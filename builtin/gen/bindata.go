// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x4f\x83\x40\x10\x85\xff\xcb\x9c\xf7\xa4\xc6\x03\x37\x13\xaf\xfe\x82\x86\x34\x0b\x3b\x8d\x9b\xd0\x19\xc2\xcc\xd4\x62\xd3\xff\x6e\x68\x16\x16\x4c\x15\x8d\x26\xbd\x41\xe6\x0d\xef\xe3\xbd\xdd\xcd\x09\x6a\x26\x51\x4f\x0a\x85\x76\x86\x0e\x22\xb5\xa6\x02\xc5\xa6\x74\x40\x7e\x8f\x50\x40\xcd\x46\x0a\x0e\xd8\x34\xcd\x4e\xe3\x08\x1c\x68\xdf\x0e\x4f\x16\x49\x1f\x1f\xe0\x5c\x3a\x68\x7d\xef\xab\x06\xa1\xd8\xf9\x46\xd0\x81\xa8\x57\x7c\x31\xf5\x55\x6c\xa2\xf6\x50\xc0\x21\xe2\x5b\x5e\xdd\x19\xd5\x1a\x99\xe0\xec\xe6\x3c\x69\x7b\x02\x9a\x4c\xb7\x3e\x84\x2e\xaf\x0f\x6f\x28\x72\xb1\x4e\x8a\x80\xde\xf4\x95\xbb\xf8\x8e\x0b\xee\x1f\xc1\x11\xd3\x28\x5a\x43\xfc\x14\xd9\x2f\x08\x07\x5b\x93\xeb\xa1\x36\x51\x14\x43\x5e\xaf\x98\x9b\x8b\x71\x9a\xc7\x80\xa4\x03\x6b\x56\xf4\x8a\x72\x7f\x37\x17\x2d\x9b\x19\x66\x37\x6c\x26\x63\x6d\xbf\x81\xcf\xe9\xdc\xa4\xbd\x6c\x8f\x47\xac\x4d\xb9\x5b\x3b\xf3\xf3\x5e\xff\x14\xad\x27\xa6\x7e\xcf\x26\xd7\xb2\x8d\x14\xf0\x88\x61\xe4\x1d\x23\xfa\x32\xe9\x49\x9f\x3e\xb5\x7e\x6a\xf2\x9f\x3f\xcd\x82\x4f\x2a\x3c\x20\xe9\x3f\x53\x66\xc3\xe7\xc5\x4d\x5d\x5a\x96\x1f\x01\x00\x00\xff\xff\xa5\x93\xf4\xe2\x9f\x04\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x0d\x6e\xe3\xbc\x0e\xbc\xd2\xf0\x57\xe4\x71\x24\x59\xba\xff\x11\x1e\x64\xc7\x6d\xe2\x6c\xe3\x2d\xf0\x3e\x60\x6d\xa0\xb0\x58\x6a\x48\x0e\x87\x52\x1c\xeb\x55\x18\x3b\xa0\xe2\x04\x27\xc0\xc4\x8a\xcb\x7c\x3c\x8e\x01\x07\x18\xd5\x01\x88\x41\xc9\x5d\xe0\xee\x54\xdb\x16\x44\xba\xef\x09\x2b\x01\x17\x2e\x3d\xcb\xac\x76\x58\xe3\x61\x75\xb5\x16\x8d\xda\x61\xad\x79\x58\xd3\x73\x90\x55\x39\xac\x53\x0f\x6b\x17\xed\x88\x71\x20\x10\xb9\x15\x6b\x2b\x72\x60\x6e\xd6\x44\xc9\x96\xb7\xaf\x1c\xbf\xac\xbb\x65\xfd\x25\x35\xf3\xe5\xaf\x30\xf2\x32\x2f\x4f\x22\x89\x3c\x68\xd5\xcb\x00\x1d\x7e\x81\x24\x48\x62\xca\x37\x7e\xbe\xe1\xd7\xb5\x26\x47\x7d\xb0\x01\xd9\x39\x33\xf2\x15\xb7\xc9\x8a\x0b\x7c\x23\x34\xbd\x22\xf4\xf8\x80\xc0\xb3\x7c\x67\x9e\x4c\x46\x16\x72\xe4\x19\x02\x4a\x5a\xb9\x1b\x7f\xf7\x85\x7c\xf9\xc6\xeb\x7f\xe1\x58\x5f\xa0\xfc\xa1\xae\x39\x7f\x51\x17\x58\x65\xed\x92\xd8\x56\x6e\x0f\x0c\x62\xba\x60\x10\xa7\x13\x0c\xf4\xc4\xfd\x05\xf3\x9e\xf9\x85\xb8\x77\x70\x2e\x2c\xc3\x81\xf5\x8a\xb2\x2b\xcf\xb8\x09\x94\x77\xff\x47\xac\x85\xb8\x90\x77\x4c\x7a\xe5\xe8\x54\x2f\xf8\x88\x0e\xc5\xbe\xe3\xcc\x20\x04\x12\xb4\xd7\x53\x02\xd2\x16\xf3\x2b\x8f\xbc\xf6\x8f\xbb\x5b\x85\x4c\x3a\x3d\xaa\x3d\x7b\x18\xd6\x7b\xa2\x1a\x25\xad\x75\x1e\x75\x2c\x85\xb4\xcf\x75\xd5\xde\xb4\x33\xc6\x7f\x5c\x17\x03\x37\x75\x31\xd1\xc7\xba\xf6\xd5\x35\x7f\x91\x77\x1b\xe9\x89\x28\xf5\x1a\x53\xf9\x86\x8d\x36\x4a\xf5\x32\xe3\xc7\x3e\x3f\x9d\x4b\x5f\xbc\x84\x2e\xa7\x07\x1f\x7f\xd0\xdf\x62\x29\xf8\xc0\xe0\xbf\xe4\x2b\xe3\x8e\xaf\x75\x9e\x7d\xe6\xeb\xf4\x6c\xe3\xd9\x33\xfe\xc0\x63\x99\x25\xc7\x36\x24\x24\xfb\x56\x6a\xd9\xa2\x6d\xa5\x8c\x2c\xc3\x7a\xec\x62\x9a\x43\x67\xf1\xbe\xb5\x36\x6a\x15\x57\x57\x1f\x1c\x35\x3c\xad\x96\x08\x3d\xd9\x79\x9e\xaf\xca\x5f\x4c\x63\x8f\xba\x26\x4d\xa0\x9f\x7b\x50\xb4\xb7\xda\xdd\xc2\x9e\x7b\xe0\xff\xf7\x1e\xf8\x5d\x0f\xc4\xde\xf4\x73\xe9\x81\x78\xfb\xdc\x83\x43\x3b\x6f\xdf\x9c\x25\x29\xdd\x90\x6b\xde\x91\x7c\xec\x7c\xcc\xac\xa4\xfd\x13\x33\x2b\xdb\x6d\xfd\xe3\xa6\xfe\x5f\xcf\xac\xd2\xeb\xf9\x77\xf1\x0c\x26\x27\x0b\x90\xe5\xd2\x92\x72\xb3\x62\x88\x5d\xe9\x76\xe6\xad\xe2\x97\xbc\x55\xc6\x67\x46\x9d\x19\xa5\x31\x85\x84\xfc\x6a\xf2\xed\x83\xea\xf8\xa1\x3a\x39\x55\x77\xea\x4f\xff\x8e\x7f\xcd\x3b\xfe\xb5\xde\xf2\x7f\x7a\xf6\x97\xf3\x37\xde\x6e\xca\x75\x06\xc4\xfa\x15\xd5\x6a\x0f\x8b\x16\x53\x36\x8f\x61\x56\xaa\x6c\x5d\x6c\x64\x00\x5a\x82\x6d\xab\xb3\x93\x57\x96\x4c\x75\x6c\x89\x16\xdd\xd0\xa7\x48\x3c\x98\x4a\xfc\x74\xe3\x56\xfe\xd2\xf9\x71\x1a\x18\xfe\x8d\xfb\xe9\x72\xef\xca\x7e\x83\x02\x95\xdc\x9c\x4b\x2d\xb5\xb0\xc0\x82\x11\xde\x59\x88\x66\x95\x40\xd7\xac\x2c\x54\x62\x70\x1d\x34\x83\x66\x54\xea\xd1\x3c\x88\x5c\x0c\x93\x88\xbb\xd5\x41\x8d\x63\xeb\x54\x24\xbc\x03\x9c\xff\x0b\x00\x00\xff\xff\xfa\x0c\xf3\xba\x00\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4b\xc4\x40\x10\x85\xff\xcb\xd4\x5b\xa9\x58\x6c\x27\x22\x56\x36\x5a\x1e\x29\x26\xd9\x39\x58\xc8\xcd\x86\xec\x9b\x68\x38\xee\xbf\x4b\x8e\x24\x77\x86\x83\x04\x1b\xed\x76\x99\xf7\x98\xf7\xbd\xd9\x1d\xa9\x4a\x9a\xc1\x0a\xf2\x68\x4d\x1c\x45\x6d\x0c\x99\xfc\xae\x70\xa4\x7c\x10\xf2\xa4\x8c\xd8\xc9\x73\x32\x05\x39\x4a\x86\x51\x71\x9c\x04\xe4\x08\x7d\x33\xbc\x2c\x2a\x1e\x1f\xe8\x54\x38\x6a\xb8\xe7\xb2\x16\xf2\x7b\xae\xb3\x38\xca\x60\xc8\x9b\x81\xcb\x58\x47\xf4\xe4\xa9\x8b\xf2\x79\xb1\xee\x4d\x2b\xc4\xa4\x74\x72\xd7\xa9\x46\xf7\x1c\x6b\x5e\xca\x21\xb4\x17\xf7\xf0\x93\x9c\xcf\xe6\x51\x10\x83\x28\x86\x4d\xb3\xa8\xec\x21\xf9\xfe\xee\x1c\xef\x07\xdb\x53\x08\x6b\x64\x65\x4a\xf5\x46\x2e\x4d\x3a\x89\xd6\xe8\x16\x9d\xaf\xc1\x2d\x73\x7f\x80\x61\x79\x5b\x74\x77\x6b\x32\x15\x72\x6b\x38\xdc\x72\x2c\xeb\x8f\x6e\xb9\xc4\x7d\x97\x43\xea\xe4\x5f\x5c\x6a\x19\xed\x55\xf0\xf2\x25\x95\x21\xb5\x6b\xf9\xae\xf1\x7e\x5f\x6c\xf1\x1d\x00\x00\xff\xff\x61\x27\x59\xf2\xbc\x03\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x6e\xdb\x30\x0c\xfd\x17\x9d\x7d\x1a\xb6\x62\xc8\x2d\x1b\xb0\x9d\x8a\x01\xcd\x6e\x45\x50\x30\x16\xd3\x68\x90\x49\x43\xa2\x9c\x18\x45\xff\x7d\x48\xea\xc4\xce\x6a\xd9\x0e\xe2\xac\x3e\xb5\x80\x28\x9a\xef\x91\x7c\xa4\xf2\xf8\xa2\x52\x26\x2f\x40\xa2\x66\xe2\x02\x26\xca\x50\x1e\xc4\xab\xd9\xe3\x32\x51\x04\x19\xaa\xd9\xdb\x9f\x44\x71\x90\xea\xe8\xe5\x78\xa2\x12\x25\x65\xbe\xff\xcf\x8b\x33\xf4\xac\x5e\x97\x89\xca\xa1\x84\x95\x45\x35\x5b\x83\xf5\x98\x28\x2f\x20\x78\x1f\x04\x56\xc6\x1a\x29\xd5\x4c\xe5\xc1\x61\x7d\x75\x1d\x28\x15\xc3\xa4\x5e\x93\x66\x38\xd5\xed\x53\x3c\xa7\x8f\x3e\x39\x4c\x0d\x16\xe8\x6a\x17\xa0\xb5\x43\xef\x0f\x1e\x8e\x56\x90\x71\x20\xa9\x6d\x82\x21\xf9\xf4\xe5\xee\x10\x62\x65\x03\x79\xee\xb8\x88\x60\xf3\x21\x4d\xf7\x3e\x4f\x0e\x56\xcc\x76\x20\x40\x62\x3a\x1a\xf5\xc1\x8c\xb2\x2e\x2c\x60\x17\x21\xcf\x6d\xd9\x47\x7e\x13\x5a\x7f\x70\x85\xc1\xed\x15\xec\xaf\x1d\x67\xdd\xcc\x0b\x77\x9f\xa7\x0e\xb5\x69\xcb\x4c\x72\x96\x63\x2e\xd0\x95\x0f\x20\xd8\x6d\x89\xbb\xdc\x38\x38\x40\x38\xb3\xbb\xfb\xdc\x4c\xb5\xdf\x80\x3b\x4f\xf4\xd8\x89\x8c\x33\x96\x32\x89\x83\x54\xe6\x5a\xf7\xd4\x2c\xe1\xf6\x1e\xbc\xb4\x96\x76\x03\x0b\xca\xf7\xca\xe5\xc9\x7a\xda\xb8\xfa\x2a\x62\x40\xaf\x8a\x03\xf2\x6b\x74\x3f\x1c\x67\x47\xf4\x1f\xda\xb8\xb7\xec\x90\x0b\xf9\x98\xa6\x80\x69\x4c\x4d\x06\xd6\x0f\x51\xaf\xaf\xff\x65\x72\xb8\x76\x31\x69\x0c\x04\xfd\x27\x78\xf9\xe9\x78\x2b\x9b\x4a\x79\x6e\xd7\x58\xff\x10\x57\x67\x9f\xb7\xd4\xa3\x00\x2b\xb0\x40\x29\xfe\x5a\xb7\x73\x5b\x1d\xdf\x74\x40\x44\xa3\xef\x51\x85\x1a\xc4\x73\xa7\x8c\xb5\x14\x4a\xd3\xc7\x6d\x50\x34\x34\xb6\xcc\x56\x6c\xa7\xb4\xf5\x8c\xa8\x19\xd3\xd4\x0b\xdc\x61\x1a\x84\x27\x50\x06\x57\x4b\xf9\x59\x91\x2f\x36\xb0\xaf\x92\x07\xcc\xc0\x10\xea\x0f\x58\xe6\xba\x77\xcc\x6f\xc1\x4d\x22\xac\x7e\x01\x6c\xd0\xee\x73\x24\xdd\xa3\x92\x60\x2d\x6f\x2b\x21\x6c\xc1\xe6\x0e\x09\xd9\xf7\xef\xf8\x20\x81\x98\xca\x8c\x83\x6f\xeb\x68\x43\x1a\x77\xa8\x4f\x47\x43\xa7\xd3\xfc\xfd\x74\xaa\x8c\xb1\x40\x92\x0b\x3e\xfc\xc6\x7c\xe5\x36\x5e\xe3\xed\xf6\x31\x21\x8a\xc0\xea\xda\xf6\x63\x4c\xf4\x2e\xff\x91\x8b\xc3\xde\x02\x8b\xea\x2d\x30\x06\x79\xfd\x3b\x70\x24\x54\xb6\x3a\xba\xea\xc7\x6f\x0d\x7b\x20\x2c\x5a\x26\xeb\x18\x60\x3b\xe4\x30\x72\xe1\xc2\x5a\x79\x2a\xc0\x86\xee\x26\xf8\x5d\xcf\xb0\x51\x20\x75\x68\x4d\xe4\x46\x5c\x7a\xae\x02\x36\x3f\xfc\x18\x01\xf6\x1d\xb0\xe5\xdf\x00\x00\x00\xff\xff\x76\x3b\xc8\x17\xa6\x11\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x09\x7a\xeb\xac\x0e\xdd\x92\x46\x10\xcb\x61\xdc\xff\x12\xde\x27\x70\x12\xc7\x76\xe3\xf4\x9f\xee\x6b\xbe\xdb\xdb\xaa\x58\xa0\xa3\xa3\x09\x07\xf0\x8f\x80\x52\x00\x10\x0e\x08\x01\x01\x5a\xd4\x18\x78\x6c\x5f\x01\x3a\x04\x00\x82\x1c\x00\x80\x15\x04\x43\x60\x08\xa3\xb5\x0e\x6c\x88\x32\x9f\xa9\x1a\x0d\x02\x43\xd2\x9e\x63\xe1\x29\xc5\x10\x96\x14\x0d\x03\xb4\xd6\x96\x34\x6d\x6b\xb1\xf7\xd0\xa1\xd3\x92\x56\xdc\xa4\xa3\x97\x92\xc3\x58\xd2\x51\x96\x94\x90\x42\xce\x90\xa6\x94\x08\x36\x29\x17\x8b\xb4\xe9\x25\xb1\x25\x65\xe4\xda\x35\xc4\x25\x8d\xdb\x5a\x41\xaa\x75\x8c\xa5\x97\x52\x5a\xd2\x08\x19\x8c\x78\x59\x41\x79\x2c\xa9\xd5\xdc\xb3\x85\xb0\xa4\xb5\x2f\x69\xd2\x66\xa9\xc8\x5a\xeb\x96\x4e\x69\x4e\xa0\xa9\x96\xb2\xa4\xb8\xd9\x56\x59\x2a\x58\xd7\x25\xe5\x4d\x43\x63\x1b\x51\x2c\x2f\xa9\x6e\x16\x37\x4b\xc8\x5a\x97\x15\x1c\x37\xcc\x5a\x0b\xd4\x1b\xf7\x25\xb5\xa4\x51\x8b\x7b\xc0\x60\x34\x2d\x2c\xa8\x8e\x7b\x77\x5f\x3d\xa5\x53\x32\x7c\x7d\xee\x1a\x7c\xbd\x80\x62\x00\x02\x03\x23\x25\xc3\x04\x86\x80\xc6\x86\x86\xea\xff\xc8\xff\x0a\x98\x50\xc1\x40\x31\xc1\xf6\xbb\x3f\xc1\xc6\xae\x5b\x8b\xaf\x47\x98\x3b\x22\x4d\x8f\x18\x81\x3f\xcf\xf3\xff\x4d\x87\xff\x15\xd9\xf7\x55\x58\x9f\x34\xff\xf9\x8e\xae\x17\x07\x06\xdb\xb4\xa8\x6d\x5a\xd8\xe6\x09\xfd\x4c\x53\x8b\x93\x10\x01\x20\x03\x63\xc2\xf0\x7e\x42\xd7\x9c\x68\xe9\x5e\xb6\x19\x24\x04\x4e\x30\xf8\x89\x09\x46\x3c\x60\x82\x66\xbe\x43\x80\xbc\x31\x19\x78\xf2\x5d\x31\x04\x20\x61\x7f\x8a\xfb\x78\x21\x96\xdc\x38\x7d\xed\xfd\xf3\x5e\xf9\x88\x3f\x66\xc7\x5f\x34\xed\xb5\x7d\xa3\xa9\xd6\xa3\xa6\x91\xae\x4f\x6d\x88\x61\xfa\x69\xb3\x40\xdc\x02\x08\xfe\x3d\x8e\xc3\x57\x00\x5b\xab\x10\xa4\x46\x3f\x93\xfb\x73\xdb\x93\x20\xfc\xc5\x3d\x11\x82\x4d\x86\x3d\x34\x39\x2b\xbe\xc3\xfc\xf2\xf4\x08\xb1\xa7\xbd\x3e\xe5\xbf\xa9\xcf\x92\xed\xf5\xc5\xe3\xf9\xc8\x9c\x69\x09\x60\x1f\x27\x63\x24\x48\xb8\x67\xdd\x8f\xfe\xa2\x2c\x97\xd8\xad\xdd\x13\xe8\x7e\xf7\x92\x2f\x58\xf2\x13\x23\x11\x32\xf1\xfe\xe9\x96\x8e\x67\xef\xed\xd3\xd3\x99\xf7\x36\xbd\xaf\xfb\xda\x3e\xc6\xa3\x7d\x2b\xb3\x14\xd8\x9f\x8d\xe9\xc4\xff\x2f\x62\xad\x88\xec\x75\xc8\x95\x7d\x08\x45\xf3\x7e\x95\x9e\xe2\xe3\x27\x0c\x4f\x5c\x2d\x79\xcf\x2d\xb6\x53\x7e\x98\x31\x5b\x99\xf6\xab\xd2\xc9\xbf\x5f\xef\x57\x0d\xa7\x07\x10\xb8\xf8\xef\x83\xeb\xc3\x23\xb6\xe5\x83\x0d\x79\xaf\xbb\xd9\xbd\x11\x87\x4a\xb0\x30\xa2\xd7\x36\x08\x23\x7a\x19\x20\xf8\xc5\xd7\xcc\xf2\x33\x1b\xaf\xac\xbb\x76\x7c\x3f\x2f\x7b\x1e\x0f\xd3\xaa\x67\xee\x7f\xfc\x24\x33\xe3\x13\x24\xb1\xe8\x79\xda\x44\x29\x89\xf3\x45\xc9\x33\x35\x81\xa9\xd3\x3a\x41\xa2\x84\x09\xe2\xb0\xaa\xa5\x63\xd7\x5e\x7a\x8d\x4d\x4b\x43\x19\x11\x85\x62\xc3\x6e\x32\xb8\x35\x67\x51\x85\x11\x0b\x51\xc2\xae\x85\x00\x72\xb5\x1a\x2b\x97\x44\x9a\x96\xc6\x0f\xf9\x31\xb3\xe7\x79\x40\xdf\x71\x66\xfd\x65\x93\x77\x29\x12\x3c\x7e\x6b\xce\x57\x76\xce\x0e\x45\x2a\xf6\x21\x38\xd7\x3f\xeb\x20\x6c\xb6\x7a\xed\x7b\xf5\x38\x8e\xc9\xa3\xcb\x01\x5a\xa7\x01\x81\xf9\xc4\xe3\x44\xc6\xce\x9c\x89\x5d\x34\xe0\xe2\x15\xc2\xcf\x91\xed\xc8\xde\x1a\x34\x03\x0f\x7c\xac\x28\x6f\xfc\x7e\xaf\x5e\xba\xea\xda\xe6\x2f\x93\xb3\x25\xcc\x67\x19\x8a\x39\x06\xea\xbd\x8d\x4e\x34\x7a\xfe\x8c\x46\x2a\x52\xb0\x54\xb2\xf0\x13\x1e\xbb\x3e\xef\x89\x8b\x39\x7c\x0f\x3c\x2e\xf2\x88\xa3\xf4\xec\x00\xbe\xc3\x4b\x05\x6e\xf0\x52\xc5\x8f\x78\xc1\xe2\xc4\x37\x28\xe9\x73\xd7\x53\xfe\x57\x13\x93\x89\xd9\xac\x63\x6b\x95\xf5\xe3\xaa\x14\x3e\xe3\x5a\x39\x1b\xb2\x66\x0b\x8f\xcf\x07\x34\xed\x47\x34\xd5\xc2\x1e\xcd\xe4\xf8\xca\xca\x98\x26\x9b\x8f\xc4\xd8\xbb\xa0\x15\x91\x5e\xef\x37\xe4\x4f\x35\xff\xe1\x1b\x7b\xfa\x26\x4f\xdf\xc0\x9d\x6f\x02\x1c\xed\x3f\xfa\x26\xe0\x38\xfb\xc6\x2e\xb0\x37\x3d\xcb\xe2\x30\xac\x91\x86\xc5\x16\xa5\xc4\x50\x63\x07\x02\x31\x29\xd9\xc0\x46\x0e\x2a\x29\x6b\xd2\x98\x53\x55\x20\xe9\x25\x30\x06\x88\x4d\x86\xe4\xa1\xb9\x81\xa9\x7f\xb6\xae\x8a\x8c\xb7\x0c\xb6\xc7\xe5\x84\xc6\xec\x09\x66\x6e\x7b\x43\x0f\xfc\x27\xef\x4b\xdf\xb3\xcd\xf3\xf3\xca\x34\x21\xd9\x97\xb1\x25\x7f\x38\xb6\x42\xbf\xf5\xdf\xb8\xf0\xdf\x31\x17\x9d\x63\xc9\x33\xb4\xd7\x38\x23\x5c\x33\x51\xa4\x63\x7f\x16\xa9\x7c\x46\x29\x14\x63\x8c\x79\xcc\xb8\xfb\x19\x15\xfd\x11\x15\x32\x7e\x8b\x11\xdc\xe2\x83\x1e\xf1\xf1\x15\xc7\xa3\xdd\xe5\x9f\x98\x2e\xf2\x8f\x9d\xce\xe3\x7c\x66\x1d\x55\xbb\x4a\x0e\xb1\x17\xa2\x61\xc8\x8d\xb1\x82\x05\xcf\x1b\x55\x4d\x48\x9b\x28\x45\x64\x69\x3a\x3c\x64\x29\x32\x14\xa4\xd8\x4c\x7a\x35\x7a\x61\x71\x65\xad\xbd\xec\x84\xa7\x9d\xcf\x89\x6a\xc7\x5c\x3a\xb1\x36\x8e\x9b\xfa\xf8\x64\xad\xfe\x61\xd6\xda\xb9\xff\x3b\x78\xc4\x34\xff\x53\x15\xe1\xa1\xd1\x8e\xfc\x35\xeb\xce\xcc\x55\x13\x5a\x59\x53\xec\xec\x3d\x38\xbd\xa3\xfb\xa6\xd3\xfb\xa4\xd5\x51\xbd\xba\x98\x53\x47\xc5\x9e\xdd\x3d\x5b\x25\xef\xcd\xc8\x57\x12\xa8\x18\x25\xd8\xa6\x6a\xab\xef\xf5\xe9\xbc\x8b\x7e\xb1\x4b\xdc\xef\xe2\x33\xbf\x8a\x71\x02\xf7\x8d\xea\xb5\x8d\x01\x90\xb6\x5e\xd1\xa7\x96\xf6\x99\x33\xb9\x16\xa9\x04\xfd\x5f\xee\xa9\x92\xd2\x0d\x23\x52\xe0\x7f\x98\x11\xc9\x8e\xf3\x45\x4a\xf2\x19\x8d\x82\xcc\xcd\xda\xb0\x6f\xe3\x45\x66\xdc\x3e\x6b\x10\x7d\x97\xb1\xd2\x79\xfe\x3b\xa2\xd1\x2f\xe2\x23\x0e\xe9\xd4\x0b\x4b\x81\x96\x42\x0d\xd4\x09\x14\x85\x3b\x71\xd2\x11\x81\xba\x90\x44\xa6\x91\x08\xc0\xca\x80\xe2\x73\xea\x90\x1a\x99\xad\xe6\xda\x66\xbb\xf2\xf9\xfe\x22\xe3\x5b\xce\xc9\x74\xc3\x1f\xc4\x54\x6b\xd7\xed\x5e\xe9\x0f\xe6\x9c\x7c\x8a\xff\x23\xa6\xf9\x7d\xfe\x3b\x31\xec\x98\x15\xa6\xfd\xf9\xc6\xfe\x67\xce\xfd\xff\xb3\xbf\x40\xb9\x9d\x54\xe5\x31\xa9\x8a\xc9\xd0\x5f\x4d\xa7\x5f\x4c\xaa\x30\x67\x7e\x64\xbe\xcc\xc2\xe7\x09\xb0\x84\x9b\xf8\xfc\x8f\xb2\xd5\x71\x02\xdc\x4e\x57\x6e\xea\x6f\x6c\x16\x81\xc3\x9a\x43\x7e\xc3\x86\xbf\xd9\x21\xdd\xda\x53\xf1\x78\x3f\x72\x8c\x8d\x4a\xf4\x31\x36\x24\xf1\x45\x1f\x5d\xb9\xde\xcc\x52\xd2\xb8\xd6\x9c\xff\x73\x7f\xbd\xa3\x88\xde\xe5\xde\xd5\xda\x35\x9f\x19\x29\x3d\xf2\xb9\x57\xf4\xc5\x65\xde\x71\xda\x4e\x75\xc8\x7d\xf4\xc0\xb1\x6e\x79\xdb\xb9\x3d\x19\x3f\x6f\x0d\x8d\xb8\x6c\x15\xcc\xfb\xee\xd7\xcd\xf7\xac\x6b\x4f\xcd\x88\x38\xb5\xb4\xe6\x5d\x3f\x42\xed\x37\xf8\x6a\xa0\xca\x48\x66\xf2\xcb\xfc\xf3\x33\xe3\x20\xd1\xc6\x38\x7e\xe4\x9f\x5f\xb2\xad\xc9\xdd\xfd\x49\xd3\xcf\xf7\x27\xa0\xf0\x58\x19\x8e\xf3\x4f\x8b\x37\xf3\x7b\xe2\x4e\x95\x07\xaf\x77\x1d\xff\x06\x02\xb7\xf5\xbd\xd5\xbb\xfa\xde\xda\x45\x7d\x5f\xf6\xf5\x68\x74\xb8\xc5\xe8\x03\x34\xda\x69\xa2\x98\x11\x06\xbd\x43\xb1\xfc\xce\x00\x03\x4d\xf3\xcd\x5f\x87\xaa\x51\x41\x93\x96\x07\xe3\x71\x60\xf2\xef\x6e\x9d\xcf\x23\x80\xbb\x3e\x80\xd2\xcb\x13\x72\x1f\x9b\xde\x2b\x5f\x9c\xea\x7c\x77\xf0\xec\x36\x8c\x77\x3f\x6f\x6f\xa6\x8c\x0c\x81\xe7\xdb\xac\xbf\xfe\x16\xab\x5b\xff\xf0\x16\xab\xc7\xf0\xd5\x5b\xac\x5e\xca\x5f\x7e\x8b\x25\xaf\xbb\x86\x2f\x38\xd2\xdb\xe9\xfd\xc5\x81\x23\xbd\xd7\x2b\x8e\x5c\xf1\xe0\xea\xbe\x26\x8e\xd6\x06\x29\xe5\x86\xa5\x53\xb5\x54\x42\xaa\x54\x20\xd8\xa8\x1c\xad\xe5\x9c\x94\x4a\x8e\x03\x3d\x4f\x67\xc4\x40\x36\x54\xb3\xb4\xa1\xc4\x85\xfb\x78\xc4\xcf\xe7\xdb\xdc\x57\x4d\x78\x64\x86\x43\x8f\x31\x9f\xf6\xfc\x09\x90\x31\x68\xa0\x98\x63\x8e\xc4\xa0\xe6\x21\x99\xab\x98\x39\xc0\xd9\x04\xaa\xe5\x50\x4c\x7a\x88\xad\x20\x48\xa7\x9a\xe3\x68\x31\x76\x44\x6d\x63\x70\xe8\x58\xa2\x55\x1e\x60\xbd\xa6\x50\x0d\x80\xd2\xff\x02\x00\x00\xff\xff\xfa\x28\xce\xe3\xf4\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\x31\x6f\xfa\x30\x10\xc5\xbf\xcb\xcd\x9e\xfe\xfa\x97\x21\x1b\x54\x15\x13\x0b\xe9\x86\x18\x2e\xce\x51\x5c\x25\xe7\xc8\x3e\x03\x11\xe2\xbb\x57\xd0\xd0\x94\xca\x81\x08\x15\x90\xba\x25\xca\x3b\xfb\xbd\xdc\xcf\x27\xcf\xb6\xa0\x2d\x7b\x41\x16\x48\xc4\x05\x52\x60\xb8\x0a\xe2\x21\x99\xcd\x15\x30\x96\x04\x09\x30\x8a\x59\xd1\x98\xe4\xd5\x0a\x16\x69\xa8\xaa\xa2\x06\x05\x36\x48\x23\xdd\x1e\x95\xa0\x40\xea\x6a\xff\x14\x0c\xcb\xbf\xa7\x01\xec\xe6\x0a\x2a\xac\x31\x2b\x08\x92\x05\x16\x9e\x14\x78\x41\xa1\x49\x10\xcc\x4c\x61\xa4\x86\x04\x56\x86\xd6\x6d\xed\x22\xb0\x16\x63\x19\x76\xea\x8c\xbf\xaf\x4d\x31\xcf\x5d\x5b\xbc\x7f\x23\xef\x0f\x1b\xff\xf4\x3f\xc2\x02\x59\xd3\x03\xbc\x37\xd5\xbd\xcd\xab\x56\x50\xda\xc0\x12\x37\x77\x92\x2f\x0d\x59\xcf\x7c\x99\xb5\x45\xcf\x70\x6c\xf9\x28\xba\x3a\xa2\xb6\x2c\x0e\xb5\x0c\x2f\x45\x2d\xd1\x0b\xf5\x69\x65\x4a\xf2\xdc\x2c\x3a\x39\xd6\xb4\x89\x7f\x3b\x58\x17\x77\x0b\x67\xcb\xb3\x79\xc4\xf6\xc3\x32\x5d\xa2\x33\xfc\x36\xa5\x12\x0d\x53\xfe\x37\xf1\x1c\xe6\x79\x0c\xcf\x7b\x35\xeb\x02\x84\x91\xae\x9c\x21\x2c\xd2\x94\xef\x2b\xdd\x66\xde\x45\x2c\xbe\x6c\x48\x07\xb1\x8f\x30\xd7\x49\x8c\x43\xa1\x5e\x38\xbc\x07\x2f\x63\x67\xd7\xb2\x9c\x7e\x96\xdc\x0e\x8a\x4e\xb3\xd7\x1d\xe1\xf6\xb3\x76\x94\x9b\x18\xfd\xad\xc4\x91\xb6\x2b\x72\xf5\x34\xfe\x5f\x5a\x21\x6d\x2a\xe3\xf0\xe0\xfe\x44\x36\xf8\x1f\x1d\x80\xcd\xd0\xb8\xe7\x61\xea\xba\x11\x8c\x82\xbb\xdb\xd8\x9a\x7f\x04\x00\x00\xff\xff\x98\x73\x15\xf4\xb3\x08\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x6b\x6e\x7a\x3b\x0c\xc4\xb7\x34\x7e\xc6\x59\x4e\x9e\xfb\x5f\xc2\x95\x73\x38\xa5\xa5\x15\xdc\x8f\x7f\x22\x81\x62\xe2\x71\xe6\x67\xc7\x91\x4b\x61\xec\x80\x8a\x13\x9c\x00\x99\x56\x5c\xf6\xe3\xe3\x58\x70\x80\xd1\x1c\x80\x18\x94\xdc\x85\x8b\x6c\xad\x8a\x20\xd2\xcc\x51\xb6\x12\x70\x89\xd5\x9a\xb7\x81\x2b\x6a\xf3\x8a\x0e\xd1\x81\x58\x76\x45\xc3\xac\x58\x4f\xb5\xc0\x9e\xd6\x45\xc9\x8e\x46\xd6\xfd\x8a\x9e\xfc\x7e\xee\x65\x0e\xce\x6f\x02\xba\x9a\x5b\xcf\x7f\xee\x2c\x8f\xd7\xac\x22\x8f\x2c\x02\xcd\x91\xe7\x8f\x47\xaa\x08\x4a\xa7\x0c\xd0\x15\x09\x54\x82\x54\x6c\x79\xea\x55\xbc\xea\xd5\x70\x02\x9b\x3e\x95\xfc\x28\xb4\x07\x97\x54\xa8\x44\xfe\x4e\xfd\xdc\x7d\xa4\xce\xe0\x4b\xe7\xa7\x42\x32\x6d\xa3\xeb\x60\xac\xac\x7e\xd7\x49\xb5\x54\x3d\x7a\xf4\xec\x0a\xf9\xb3\x2f\xe0\xab\x32\x14\x27\xe3\xae\x1e\x02\x09\x3a\x5e\x4a\x40\x3a\xd9\x71\x48\xa0\x17\x87\x3c\xdc\x1a\x64\xd3\x7d\x82\xf8\xfb\x09\x43\xae\x5b\x35\x39\xe6\xee\xf5\xfe\x22\xbf\x63\xa4\xb7\xa2\xf4\x97\x9a\x74\xc6\xed\x0d\x8d\x2e\x32\x66\xac\x16\x12\x72\xd3\xf8\x9a\xc4\x2f\x0e\x71\x20\xdd\xfe\x83\x40\x95\x2b\x2a\x9f\x4e\x68\xf0\x83\xde\x21\x83\x8f\x64\x62\x7d\x22\x53\xf7\x4f\x32\x21\x95\x0c\x65\x73\x2c\x61\xf5\x9d\x7c\x6c\xdb\xa0\x35\x6b\x94\x4e\x22\x6b\xf3\xa6\x2a\x2a\xb5\xb3\xb5\xd1\x9b\x37\x5b\x5e\x37\x53\x5d\x51\x7d\x8f\x3a\xa9\xd4\x64\x1a\xfc\x69\x4e\x1b\x9f\x5e\x5c\xc4\xf2\xad\xd2\xf2\xf7\x14\xb9\xb5\xdd\x87\x95\x64\xf8\xf7\x54\xfd\x49\x55\x7f\x51\xa5\x9c\xf1\x8b\xea\xff\x9a\x32\x16\xfd\xc0\x92\xd5\xde\x4e\x99\xd4\xcb\xed\x77\xbf\x6c\xeb\x9f\x78\x43\xdc\xe4\x93\xbb\xae\x6f\xdd\x51\xee\xeb\xf1\x26\xe7\x17\x68\xe4\xe6\x5c\x5a\x69\x85\x05\x16\x0c\x88\x6c\xcc\x18\x73\xed\xe5\x6b\x29\xb0\xe6\x68\x33\xb6\x4f\x6f\x63\xb8\xb2\xcf\xd8\x7b\xb5\x60\x9a\x4d\x46\xdb\xbb\x18\xcb\x2c\x5b\xb7\xae\x2c\xcf\xf5\xbf\x00\x00\x00\xff\xff\xaf\xf6\xb2\xbc\xe4\x05\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4b\xc4\x40\x10\x85\xff\xcb\xab\xb7\x3a\xd1\x62\x7b\xb1\xb2\xb2\x3c\xae\x98\xe4\xe6\x60\x71\x9d\x0d\xd9\x37\xd1\xe5\xb8\xff\x2e\x8a\x67\x30\x04\x4d\x61\x39\xbc\xf9\xe0\x7b\x6f\x7f\x46\x5f\xac\x52\x8c\x88\x1c\x5d\x03\x92\x0d\xce\x8a\xb8\x3f\xc3\xe4\x45\x11\xf1\xac\x0d\x01\x6c\xc3\xc7\xd1\x35\x6a\xbd\xd9\xe1\x72\x08\xd7\xdc\x84\x69\xd2\x07\x25\x02\x8a\x73\x89\xcf\xac\x27\xe3\xee\xf6\xee\x93\x1d\xa4\x49\x97\x15\xf1\x24\xb9\x6a\x40\xa5\x50\x1f\x9d\xd2\xa5\x9c\xd8\x10\x31\x25\x7d\x9d\xd9\x93\x5b\xcf\x54\x0c\x97\xf0\x8b\xf3\x8a\xd4\xfd\x9b\xf6\xce\x32\xfe\x25\x27\xc7\xe3\xa8\xb5\xfe\xa7\xdc\x17\xbd\x75\xd1\xf0\x9d\x4f\x92\x5d\xd7\x77\xfb\x51\xef\x69\xb1\xf9\x26\x75\x2b\x76\x7d\x5a\x29\x70\x78\x0f\x00\x00\xff\xff\x2e\xcb\x7f\x71\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

