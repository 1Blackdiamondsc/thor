// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x4f\x83\x40\x10\x85\xff\xcb\x9c\xf7\xa4\xc6\x03\x37\x13\xaf\xfe\x82\x86\x34\x0b\x3b\x8d\x9b\xd0\x19\xc2\xcc\xd4\x62\xd3\xff\x6e\x68\x16\x16\x4c\x15\x8d\x26\xbd\x41\xe6\x0d\xef\xe3\xbd\xdd\xcd\x09\x6a\x26\x51\x4f\x0a\x85\x76\x86\x0e\x22\xb5\xa6\x02\xc5\xa6\x74\x40\x7e\x8f\x50\x40\xcd\x46\x0a\x0e\xd8\x34\xcd\x4e\xe3\x08\x1c\x68\xdf\x0e\x4f\x16\x49\x1f\x1f\xe0\x5c\x3a\x68\x7d\xef\xab\x06\xa1\xd8\xf9\x46\xd0\x81\xa8\x57\x7c\x31\xf5\x55\x6c\xa2\xf6\x50\xc0\x21\xe2\x5b\x5e\xdd\x19\xd5\x1a\x99\xe0\xec\xe6\x3c\x69\x7b\x02\x9a\x4c\xb7\x3e\x84\x2e\xaf\x0f\x6f\x28\x72\xb1\x4e\x8a\x80\xde\xf4\x95\xbb\xf8\x8e\x0b\xee\x1f\xc1\x11\xd3\x28\x5a\x43\xfc\x14\xd9\x2f\x08\x07\x5b\x93\xeb\xa1\x36\x51\x14\x43\x5e\xaf\x98\x9b\x8b\x71\x9a\xc7\x80\xa4\x03\x6b\x56\xf4\x8a\x72\x7f\x37\x17\x2d\x9b\x19\x66\x37\x6c\x26\x63\x6d\xbf\x81\xcf\xe9\xdc\xa4\xbd\x6c\x8f\x47\xac\x4d\xb9\x5b\x3b\xf3\xf3\x5e\xff\x14\xad\x27\xa6\x7e\xcf\x26\xd7\xb2\x8d\x14\xf0\x88\x61\xe4\x1d\x23\xfa\x32\xe9\x49\x9f\x3e\xb5\x7e\x6a\xf2\x9f\x3f\xcd\x82\x4f\x2a\x3c\x20\xe9\x3f\x53\x66\xc3\xe7\xc5\x4d\x5d\x5a\x96\x1f\x01\x00\x00\xff\xff\xa5\x93\xf4\xe2\x9f\x04\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x0d\x6e\xe3\xbc\x0e\xbc\xd2\xf0\x57\xe4\x71\x24\x59\xba\xff\x11\x1e\x64\xc7\x6d\xe2\x6c\xe3\x2d\xf0\x3e\x60\x6d\xa0\xb0\x58\x6a\x48\x0e\x87\x52\x1c\xeb\x55\x18\x3b\xa0\xe2\x04\x27\xc0\xc4\x8a\xcb\x7c\x3c\x8e\x01\x07\x18\xd5\x01\x88\x41\xc9\x5d\xe0\xee\x54\xdb\x16\x44\xba\xef\x09\x2b\x01\x17\x2e\x3d\xcb\xac\x76\x58\xe3\x61\x75\xb5\x16\x8d\xda\x61\xad\x79\x58\xd3\x73\x90\x55\x39\xac\x53\x0f\x6b\x17\xed\x88\x71\x20\x10\xb9\x15\x6b\x2b\x72\x60\x6e\xd6\x44\xc9\x96\xb7\xaf\x1c\xbf\xac\xbb\x65\xfd\x25\x35\xf3\xe5\xaf\x30\xf2\x32\x2f\x4f\x22\x89\x3c\x68\xd5\xcb\x00\x1d\x7e\x81\x24\x48\x62\xca\x37\x7e\xbe\xe1\xd7\xb5\x26\x47\x7d\xb0\x01\xd9\x39\x33\xf2\x15\xb7\xc9\x8a\x0b\x7c\x23\x34\xbd\x22\xf4\xf8\x80\xc0\xb3\x7c\x67\x9e\x4c\x46\x16\x72\xe4\x19\x02\x4a\x5a\xb9\x1b\x7f\xf7\x85\x7c\xf9\xc6\xeb\x7f\xe1\x58\x5f\xa0\xfc\xa1\xae\x39\x7f\x51\x17\x58\x65\xed\x92\xd8\x56\x6e\x0f\x0c\x62\xba\x60\x10\xa7\x13\x0c\xf4\xc4\xfd\x05\xf3\x9e\xf9\x85\xb8\x77\x70\x2e\x2c\xc3\x81\xf5\x8a\xb2\x2b\xcf\xb8\x09\x94\x77\xff\x47\xac\x85\xb8\x90\x77\x4c\x7a\xe5\xe8\x54\x2f\xf8\x88\x0e\xc5\xbe\xe3\xcc\x20\x04\x12\xb4\xd7\x53\x02\xd2\x16\xf3\x2b\x8f\xbc\xf6\x8f\xbb\x5b\x85\x4c\x3a\x3d\xaa\x3d\x7b\x18\xd6\x7b\xa2\x1a\x25\xad\x75\x1e\x75\x2c\x85\xb4\xcf\x75\xd5\xde\xb4\x33\xc6\x7f\x5c\x17\x03\x37\x75\x31\xd1\xc7\xba\xf6\xd5\x35\x7f\x91\x77\x1b\xe9\x89\x28\xf5\x1a\x53\xf9\x86\x8d\x36\x4a\xf5\x32\xe3\xc7\x3e\x3f\x9d\x4b\x5f\xbc\x84\x2e\xa7\x07\x1f\x7f\xd0\xdf\x62\x29\xf8\xc0\xe0\xbf\xe4\x2b\xe3\x8e\xaf\x75\x9e\x7d\xe6\xeb\xf4\x6c\xe3\xd9\x33\xfe\xc0\x63\x99\x25\xc7\x36\x24\x24\xfb\x56\x6a\xd9\xa2\x6d\xa5\x8c\x2c\xc3\x7a\xec\x62\x9a\x43\x67\xf1\xbe\xb5\x36\x6a\x15\x57\x57\x1f\x1c\x35\x3c\xad\x96\x08\x3d\xd9\x79\x9e\xaf\xca\x5f\x4c\x63\x8f\xba\x26\x4d\xa0\x9f\x7b\x50\xb4\xb7\xda\xdd\xc2\x9e\x7b\xe0\xff\xf7\x1e\xf8\x5d\x0f\xc4\xde\xf4\x73\xe9\x81\x78\xfb\xdc\x83\x43\x3b\x6f\xdf\x9c\x25\x29\xdd\x90\x6b\xde\x91\x7c\xec\x7c\xcc\xac\xa4\xfd\x13\x33\x2b\xdb\x6d\xfd\xe3\xa6\xfe\x5f\xcf\xac\xd2\xeb\xf9\x77\xf1\x0c\x26\x27\x0b\x90\xe5\xd2\x92\x72\xb3\x62\x88\x5d\xe9\x76\xe6\xad\xe2\x97\xbc\x55\xc6\x67\x46\x9d\x19\xa5\x31\x85\x84\xfc\x6a\xf2\xed\x83\xea\xf8\xa1\x3a\x39\x55\x77\xea\x4f\xff\x8e\x7f\xcd\x3b\xfe\xb5\xde\xf2\x7f\x7a\xf6\x97\xf3\x37\xde\x6e\xca\x75\x06\xc4\xfa\x15\xd5\x6a\x0f\x8b\x16\x53\x36\x8f\x61\x56\xaa\x6c\x5d\x6c\x64\x00\x5a\x82\x6d\xab\xb3\x93\x57\x96\x4c\x75\x6c\x89\x16\xdd\xd0\xa7\x48\x3c\x98\x4a\xfc\x74\xe3\x56\xfe\xd2\xf9\x71\x1a\x18\xfe\x8d\xfb\xe9\x72\xef\xca\x7e\x83\x02\x95\xdc\x9c\x4b\x2d\xb5\xb0\xc0\x82\x11\xde\x59\x88\x66\x95\x40\xd7\xac\x2c\x54\x62\x70\x1d\x34\x83\x66\x54\xea\xd1\x3c\x88\x5c\x0c\x93\x88\xbb\xd5\x41\x8d\x63\xeb\x54\x24\xbc\x03\x9c\xff\x0b\x00\x00\xff\xff\xfa\x0c\xf3\xba\x00\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4b\xc4\x40\x10\x85\xff\xcb\xd4\x5b\xa9\x58\x6c\x27\x22\x56\x36\x5a\x1e\x29\x26\xd9\x39\x58\xc8\xcd\x86\xec\x9b\x68\x38\xee\xbf\x4b\x8e\x24\x77\x86\x83\x04\x1b\xed\x76\x99\xf7\x98\xf7\xbd\xd9\x1d\xa9\x4a\x9a\xc1\x0a\xf2\x68\x4d\x1c\x45\x6d\x0c\x99\xfc\xae\x70\xa4\x7c\x10\xf2\xa4\x8c\xd8\xc9\x73\x32\x05\x39\x4a\x86\x51\x71\x9c\x04\xe4\x08\x7d\x33\xbc\x2c\x2a\x1e\x1f\xe8\x54\x38\x6a\xb8\xe7\xb2\x16\xf2\x7b\xae\xb3\x38\xca\x60\xc8\x9b\x81\xcb\x58\x47\xf4\xe4\xa9\x8b\xf2\x79\xb1\xee\x4d\x2b\xc4\xa4\x74\x72\xd7\xa9\x46\xf7\x1c\x6b\x5e\xca\x21\xb4\x17\xf7\xf0\x93\x9c\xcf\xe6\x51\x10\x83\x28\x86\x4d\xb3\xa8\xec\x21\xf9\xfe\xee\x1c\xef\x07\xdb\x53\x08\x6b\x64\x65\x4a\xf5\x46\x2e\x4d\x3a\x89\xd6\xe8\x16\x9d\xaf\xc1\x2d\x73\x7f\x80\x61\x79\x5b\x74\x77\x6b\x32\x15\x72\x6b\x38\xdc\x72\x2c\xeb\x8f\x6e\xb9\xc4\x7d\x97\x43\xea\xe4\x5f\x5c\x6a\x19\xed\x55\xf0\xf2\x25\x95\x21\xb5\x6b\xf9\xae\xf1\x7e\x5f\x6c\xf1\x1d\x00\x00\xff\xff\x61\x27\x59\xf2\xbc\x03\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x6f\xdb\x3c\x0c\xfd\x2f\x3a\xfb\xf4\xe1\x5b\x31\xe4\x56\x0c\xd8\x4e\xc5\x80\x66\xb7\x22\x28\x18\x89\x69\x34\xc8\xa4\x21\x51\x4e\x8c\xa2\xff\x7d\x48\xea\xc4\xce\x6a\xd9\x0e\xe2\xac\x39\xb5\x80\x48\x9a\xef\x91\x7c\x64\x9e\x5e\x95\x66\x0a\x02\x24\x6a\x26\x3e\x62\xa6\x2c\x15\x51\x82\x9a\x3d\x2d\x32\x45\x90\xa3\x9a\xbd\xff\xc9\x14\x47\xa9\x9f\x5e\x0f\x2f\x2a\x53\x52\x15\xbb\xff\x82\x78\x4b\x2f\xea\x6d\x91\xa9\x02\x2a\x58\x3a\x54\xb3\x15\xb8\x80\x99\x0a\x02\x82\x0f\x51\x60\x69\x9d\x95\x4a\xcd\x54\x11\x3d\x36\xae\xab\x48\x5a\x2c\x93\x7a\xcb\xda\xe9\xd4\xde\xc7\x7c\x8e\x1f\x7d\xf6\xa8\x2d\x96\xe8\x9b\x10\x60\x8c\xc7\x10\xf6\x11\x0e\x56\x90\x73\x24\x69\x6c\xa2\x25\xf9\xef\xcb\xdd\x3e\xc5\xda\x06\x8a\xc2\x73\x99\xc0\x16\xa2\xd6\xbb\x98\xc7\x00\x4b\x66\x37\x12\x20\x31\x1d\x8c\x86\x60\x26\x59\x17\x16\x70\xf3\x58\x14\xae\x1a\x22\xbf\x0d\x6d\x38\xb9\xd2\xe2\xe6\x02\xf6\x57\x9e\xf3\x7e\xe6\x85\xfb\xdf\xb5\x47\x63\xbb\x2a\x93\x9d\xd4\x98\x4b\xf4\xd5\x23\x08\xf6\x5b\xe2\xb6\xb0\x1e\xf6\x10\x4e\xec\xee\xfe\x6f\x97\x3a\xac\xc1\x9f\x16\x7a\xea\x42\xa6\x19\xd3\x4c\xe2\x41\xcb\xbd\x31\x03\x3d\x4b\xb8\x79\x80\x20\x9d\xad\xdd\xc2\x82\xf2\xad\x0e\x79\xb4\xbe\x6d\x5c\x43\x1d\x31\x62\x56\xc5\x03\x85\x15\xfa\xef\x9e\xf3\x03\xfa\x4f\x1d\xdc\x6b\x4e\xc8\x99\x7c\xdc\xa6\x80\x19\xd4\x36\x07\x17\xc6\xa8\xd7\xd7\x7f\xb2\x39\x7c\xb7\x98\xb4\x16\x82\xf9\x1d\x83\xfc\xf0\xbc\x91\x75\xad\x3c\xd7\x1b\xac\xbf\x88\x6b\xaa\xcf\x1b\x1a\x50\x80\x25\x38\x20\x8d\x3f\x57\xdd\xdc\xd6\xcf\x57\x5d\x10\xc9\xec\x07\x54\xa1\x01\xf1\xd2\x2b\x63\x1d\x8d\xd2\x8e\x71\x1d\x14\x2d\x8d\xad\xf2\x25\xbb\x5b\xba\x7a\x26\xd4\x8c\xdb\xd4\x0b\xdc\xa2\x8e\xc2\x37\xd0\x06\x17\x4b\xf9\x49\x93\xcf\xd7\xb0\xeb\x92\x47\xcc\xc1\x12\x9a\x4f\x38\xe6\xce\x56\x9a\x16\xbe\x50\x20\x99\x01\x39\x02\xe7\x78\x53\x2b\x4e\x07\x36\xbf\x47\xbe\x1b\x94\xe9\x41\x02\x31\x55\x39\xc7\xd0\x35\x3a\x96\x0c\x6e\xd1\x1c\x9f\xc6\xae\x81\xfb\x8f\x6b\xa0\x36\xc6\x12\x49\xce\xf8\xf0\x3b\xf3\x75\xd8\x74\x33\x75\xdb\xa7\x26\x3e\x01\xab\xef\xac\x4e\x31\x31\x78\x65\x27\x1c\xc7\x1d\xdd\xf3\xfa\xe8\x9e\x82\xbc\xe1\x63\x33\x91\x2a\x3b\x93\xbc\xa9\xd3\x5e\xe3\x2e\xf1\x79\xc7\x0a\x9b\x02\x6c\x8f\xee\x24\x1c\xce\xec\x95\xe7\x12\x5c\xec\x1f\x82\x5f\xcd\xb2\x98\x04\x52\x8f\xd6\x24\x3c\xd2\xd2\x73\x11\xb0\xfb\xfd\xaf\x7e\x70\x1f\x80\x2d\xfe\x04\x00\x00\xff\xff\x3d\x48\x4a\x96\x0f\x11\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x09\x96\x23\xa9\xae\xdd\x92\x06\x24\xc4\x72\x18\xf7\xbf\x84\x7f\x04\x84\x87\x08\xa7\xed\xaa\xee\xff\xb2\xd3\xa7\xb2\xb3\x65\x42\x48\x57\xd3\x85\x50\xf0\x4f\x00\x21\x05\x08\xac\x08\x8a\x00\xb5\x4a\x54\x1e\xfb\x47\xa1\x83\x02\x10\x64\x05\x00\x16\x08\xa8\xca\xa0\xa3\xb5\x0e\x6c\x88\xc1\x9f\x69\x28\xd1\x40\x19\x92\xf4\x1c\x0b\x4f\x29\x4a\x59\x52\x34\x54\x68\xad\x2d\x69\xda\x6b\xb1\x77\xed\xd0\x69\x49\x8b\x6e\xe9\xe8\xa5\x64\x1d\x4b\x3a\x60\x49\x09\x49\x73\x86\x34\xa5\x84\xb2\xa5\x5c\x2c\xd2\xd6\x4b\xdc\x96\x94\x91\x6b\x17\x8d\x4b\xaa\x7b\x6d\x40\xaa\x75\x8c\xa5\x97\xac\x2f\x69\x84\x0c\x46\xbc\xbc\xa0\x1c\x96\xd4\x6a\xee\xd9\x54\x97\xb4\xf2\x92\x26\x69\x96\x4a\xd8\x6b\xc7\xd6\x90\x13\x48\xaa\xa5\x4c\x29\xe3\xf6\xad\x72\xa8\x60\x5d\x96\x94\xb7\x86\xc6\x36\x62\xb0\xbc\xa4\x61\x7b\xdc\x9a\x52\x6f\xdc\x97\x54\x8b\x44\x29\x8e\xb5\xc1\x68\x52\x38\xa0\x4c\x84\x3d\x2a\x37\xa9\x4b\xfa\x5c\x9f\x40\xd4\xd7\x07\x10\x54\x20\x30\x30\x12\x32\x4c\x60\x08\x68\x6c\x68\x28\xfe\x8f\xfc\xdb\x89\x3e\x18\x08\x26\xd8\xff\xef\x4f\xb0\xb1\xeb\x96\xe2\xeb\x3d\x70\x8e\x3d\x4d\xec\x8d\xc0\x9f\xe7\xf9\xdf\xad\xc3\xbf\x05\xf3\x7d\x05\xd6\x27\xcd\x7f\xbe\xa3\xeb\xc5\x81\x6a\x5b\x4b\x68\x5b\x0b\xdb\xb4\xd0\x6d\x9a\x5a\x78\x6a\x01\xc8\xc0\x98\x50\x9f\x2d\x74\xcd\x89\x96\xee\xe5\x9b\x41\x9a\xde\x0e\xbe\x61\x82\xaa\x27\x4c\x30\x36\xdf\x41\x21\xef\x9c\x05\x9e\x99\x2d\xa8\x0a\x14\xd8\x9f\xe2\x86\x77\xc4\x92\x3b\x27\xf7\xbd\x7f\xde\x2b\x9d\xf1\xc7\xec\xf8\x07\x2e\x8f\xda\xbe\xd1\x54\xf1\xac\xa9\xf7\xd7\x56\x1b\xa2\xce\x38\x6d\x0f\x82\x7b\x00\xea\xbf\xe3\x38\xfd\x28\xd8\x5a\x85\x10\x72\x72\x9b\x3c\x9e\xc7\x9e\xa3\xfc\xe5\x9e\x08\x6a\xea\xda\xb6\x26\xf2\xac\xf8\x0e\xf3\x97\xd6\x23\xc4\x8e\x8f\xfa\x82\xfd\x43\x7d\xb6\x2a\xe0\xd0\x17\xcf\xf6\x51\x34\x45\x48\x58\x1e\xeb\x64\x8c\x04\x09\x1f\xb3\xee\xc7\x78\x51\x4a\x2f\xb1\x5b\xbb\x27\x7a\xda\x3d\x8f\x17\x59\xf2\x53\x46\x22\x64\xee\x8f\x4f\xd7\x7e\xb6\xbd\xd3\xbb\xa7\x4b\x7f\xf4\xe9\x79\xdd\xd7\xfe\x79\xcf\x7e\xd5\x59\x0a\x3e\xda\xc6\x78\xc9\xff\x2f\x6a\xad\xc8\x78\xd4\xc1\xaf\xfc\x43\x28\x5a\x1f\x57\xc9\xa5\x3e\x7e\xc2\xf0\x92\xab\xa5\x94\x47\x4d\xf1\xd2\x1f\xbe\xd6\x54\x43\x98\xd8\x3a\x5a\xa6\xe8\x63\xf1\xc0\xda\x76\xa5\x6f\x4c\x3d\x42\xd9\x71\x8e\x43\x82\x9a\x8e\xe8\x35\x02\x3a\xa2\x6f\x4f\xf0\x07\x3f\xb3\x7f\xcf\x3e\xbb\xfa\xe9\xda\xf1\xd9\x5e\xf6\x0e\xad\xd3\xab\x5b\x57\x3f\xfe\x0a\xb3\x97\x13\xa4\x60\xd1\x3b\xb0\x05\xa1\x14\x3c\x13\x84\xbc\x07\x13\x98\x24\x10\x49\x90\x28\x61\x82\x38\xac\x4a\xe9\xd8\xa5\x97\x5e\x63\x93\xd2\x30\x8c\x88\x81\x62\xc3\x6e\x61\x70\x6b\xc0\x18\x2a\x8c\x58\x88\x12\x76\x29\x04\x90\xab\xd5\x58\xb9\x24\x92\xb4\x34\xbe\xe9\x7c\x99\xbd\x83\x03\xfa\x8e\xb3\x9f\x2f\x9f\x9c\x69\x38\xc4\x08\x55\xdb\x2b\x3f\x27\xcb\x08\x15\xfb\x08\x38\xd7\xdf\x26\x1c\x6c\x5f\x7d\xaa\xdd\x79\x8a\x63\x72\x30\x15\xa0\x65\x0d\x04\x98\x4f\x1c\x16\x19\x3b\x63\x99\xd8\x45\x03\x2e\xde\xfb\xdd\x0e\xcb\xe7\xbc\xac\x2a\x19\x78\xe0\xb1\x22\x3d\xf5\xcf\xe7\xb9\x24\x6b\x62\xed\x78\xd9\x25\xc3\x50\x99\xaf\x32\x0c\xe6\x18\x88\x90\x44\x99\x68\xd4\xfa\x1e\x8d\x54\x42\xc1\x52\xc9\xf4\x27\x3c\x1e\xb8\xda\x0d\x17\x73\xf8\x0e\x3c\x5e\x74\x08\x47\xe9\x36\xdb\xbf\xc3\x4b\x88\x3e\xe0\x25\xce\x78\xde\xe0\x05\x2b\x27\xbe\x41\x49\x6e\xbb\x4a\x7b\xd4\x19\xe8\x3a\x03\x8d\x50\xd1\xd9\x89\x44\x3e\x59\x28\xb1\x9a\x77\xb5\x1a\xe7\xf4\x59\x1a\xed\xdc\x1f\xc4\xfa\xfb\x18\x54\xce\x86\x2c\xd9\xf4\xf8\xbc\x41\xde\x7e\x44\x5e\x4c\x1f\x91\x4f\x1e\x8b\xb0\xfa\xa6\x85\x1d\xcf\x60\xec\x5c\x68\x55\xaf\x4f\xfd\x1d\xa5\x8b\xd7\x47\x1c\xed\x16\xc7\x3c\xe3\x08\x9f\xe2\xa8\x70\xf6\xff\x1c\x47\xc5\x78\x8d\xa3\xbd\x88\x93\xc9\x55\x16\x87\x61\x8d\x34\x2c\xb6\x18\x4a\xd4\x1a\x3b\x10\x04\x0b\x25\x1b\xd8\xc8\x2a\x21\x65\x49\x12\x73\xaa\x02\x14\x7a\x51\x46\x85\xd8\xc2\x08\x79\x48\x6e\x60\xe2\x9f\xcd\xad\xc8\x78\x77\xbb\x47\x5c\x2e\x68\x4c\x66\x30\xfb\xe0\x13\x7a\xe0\x7f\x39\x3b\x7d\xee\x4c\xb7\xcf\xbd\x2b\xf9\x1c\xf8\xae\x0e\xc3\x2f\xd7\xa1\xf6\x8f\xf1\x1b\x2f\xe2\x77\xee\x5b\xd7\xba\xf3\x6e\xee\xf3\x70\xd6\x93\x57\x4d\xc4\x33\x7f\x8c\xc4\xef\x51\xd2\x62\x8c\x31\x0f\x0b\x8e\xd3\x8f\xa8\xc8\x8f\xa8\x90\xf1\x53\x8d\xe0\xae\x0f\x3a\xea\xe3\xab\x1c\x8f\xf1\xcc\x2f\xcf\x18\x45\x4b\x2f\x72\xfc\x62\x8f\xe7\x33\xcb\xa8\xd2\x25\x64\x8d\xbd\x10\x0d\x43\x6e\x8c\x15\x4c\x93\x2a\x56\xb1\x40\xd2\x82\x50\x44\x0e\x4d\x86\x97\x2c\x45\x86\x82\x14\x9b\x85\x5e\x8d\xee\x58\xbc\xf2\xd6\xee\x7e\xc2\xcd\xcf\xdb\xb9\xea\x21\x73\xe9\x92\xb5\xb1\x97\x2f\xb3\x56\x7e\x39\x6b\x2d\x9c\xf9\xdd\x39\x22\x26\xf4\x6f\x4d\x8f\x43\x63\x3c\xe7\xaf\x99\x7a\x66\xae\x99\x90\x26\xd3\x75\xbd\x52\x12\xa7\x13\xba\x86\x28\x73\x56\x5b\x5d\xb3\xfa\xb4\x8f\x81\xc9\x62\x64\x77\x16\x74\x61\x64\x3c\x19\x19\x0b\x25\xe7\x76\xce\x10\x83\x51\x02\x84\x3d\x8b\xac\x8e\xad\x7b\xee\x64\x69\xb3\x4f\x6b\xf9\x6c\xe7\x5c\x9f\x10\x7f\xb0\x25\x7c\x61\x8b\x3e\xdb\x62\xdb\x9a\x79\x9b\xb0\x3a\xf9\xcd\x86\x65\xd3\x19\x15\xa4\xcd\x4e\xfd\x04\x64\xef\x33\x2f\xd7\x12\x2a\x41\xff\x7f\x66\x71\x49\xdb\x87\xbc\x4a\xb1\xff\xcb\x79\x95\x72\x3c\xed\x99\xf2\x78\x8f\x46\x41\xe6\x66\x6d\xd8\xb7\x55\x17\x66\xf5\xdf\x26\x19\x7d\xd7\xf7\xd2\x08\x1f\xd0\xc8\x20\x57\x34\xe2\x08\x9d\x7a\xe1\x50\xa0\x25\xad\x4a\x9d\x40\x30\x70\x27\x4e\x32\x22\x50\x0f\x14\x22\xd3\x48\x04\x60\x65\x40\x01\x2a\x79\x84\x1a\x99\xad\xe6\xda\x26\xe9\x79\x7f\x17\x92\xf1\xa9\x73\xe5\xf0\x21\x7f\x10\x53\xad\x5d\xf6\x1d\xd5\x2f\x76\xae\x9c\x2e\xe7\xd7\x33\xa6\xcf\xe7\xff\x4b\x86\x5d\x7a\x8b\x3f\x53\x3f\xf8\x7f\xeb\xdc\xff\x3d\xff\x0b\xe9\xc7\xb3\x71\x38\xce\xc6\xc1\xc2\x90\x3f\x3a\x0f\x7f\x71\x36\xde\xdd\x92\xf9\xb9\x47\xee\x6f\x4a\xd4\xff\x44\x6f\x3a\x9f\x30\xb7\x75\xf5\xc3\xf9\x37\x36\x8b\xc0\x2a\x8b\x43\xfd\x41\xec\xff\x21\xab\xfa\xe8\x4f\xa5\xf3\xf9\xea\x5c\x09\x95\xc3\xdb\x4a\x08\x89\x4f\xdc\xfb\xd9\x4e\x74\xee\xf9\x69\x8e\xad\x53\x93\x91\xd0\xd1\x1f\x7d\xae\xee\xfb\xc0\x87\x1c\xb1\xeb\x9c\xf4\x2e\xbe\x2d\xb5\x3d\x37\x9c\x0d\xcf\x0c\x9a\x37\xdb\x46\x5c\xf6\x44\x70\x06\x70\xbf\x95\x9e\x73\xe2\x49\xf3\x7c\x2a\x7f\xe0\x5f\xb7\x2e\x16\x7f\xb9\x8a\x1b\x7c\xe2\x5f\x0d\x3f\xf2\xaf\x8d\x55\xa3\x0f\xf5\x75\xf3\xfa\xb7\xef\x2c\x5a\x3c\xdf\x5f\x5e\xbc\xb6\xf6\xf9\xac\x34\xbf\x0f\x88\xfb\xed\x46\xcb\xe6\x2c\xcc\xd8\x08\x01\x45\xca\x21\x2f\x32\xe5\xfb\x4c\x8e\xb8\x59\xdb\x18\xde\x41\x11\x5a\xa5\x8f\x95\x3f\x22\x95\x68\xd1\xd4\x04\xf8\xaf\x6a\x1d\x12\x6d\xac\xf8\xc0\xea\x0f\x4f\x4f\x1d\xcf\xfc\xe6\x8c\x5a\x27\x7b\x81\x1a\x42\xe7\x0f\xe7\xc3\x9b\x87\xea\x4c\xfc\xe0\x08\xff\x7b\x0f\xed\xd3\xf9\xb0\xa7\x17\xe7\x43\x97\x67\x31\x39\xdd\x28\x8d\xdc\x25\xbe\xba\x01\x54\xae\xd0\x3b\x14\xcb\x1e\xd1\x47\xbb\x24\xcd\xb7\xae\xbd\x66\xcf\x18\x49\x52\x8e\x3e\x87\x03\x93\xff\x76\xdf\xfc\x6c\x08\xf8\xc0\xa6\x28\xdd\xb3\x33\x7c\x9e\x51\x9e\x89\x2f\xac\xba\xde\xe3\xdc\x38\x9b\xf1\xc3\xdf\xfb\x5d\xa1\x91\x21\xf0\x7c\xbf\xf8\xf7\xef\x15\x47\xa8\x6f\xde\x2b\x0e\x0e\x5f\xbd\x57\x1c\x31\xfd\xf5\x7b\xc5\x70\xbf\xf7\xf9\x22\x43\xc6\xe5\xfd\xcf\x39\x43\x46\xce\xd7\x0c\x79\x7d\x13\x6c\x2f\x30\x8f\xa3\xb5\x41\x42\xb9\x61\xe9\x54\x2d\x15\x4d\x95\x0a\xa8\x8d\xca\xd1\x5a\xce\x49\xa8\xe4\x38\x50\xb9\x86\x8c\xa8\x64\x43\x24\x87\x36\x84\xb8\x70\x1f\xc7\x2d\xe4\xbb\x5b\xf8\x75\x07\xef\x99\x8b\x00\x7c\xcc\xaf\xc9\x47\xa7\xc5\x67\x6e\x7a\x74\xd4\x13\x9b\x9b\x3b\xf8\x64\x05\xc8\xa8\xa2\x14\x73\xcc\x91\x18\xc4\x08\x6a\x69\x31\x93\x05\x1c\x86\x4a\x98\x39\x18\x58\x8d\x9a\x5b\xaa\x06\x20\x2d\x22\xe7\x4c\xb1\x16\x6d\xdc\x7b\x6d\xa9\x23\x97\x3a\xb4\x55\x5f\x9a\x01\x28\xfd\x5f\x00\x00\x00\xff\xff\x4a\x76\x19\xa2\x94\x20\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xb1\x6e\xc2\x30\x10\xfd\x97\x9b\x3d\x55\x2d\x43\x36\x5a\x55\x4c\x2c\xd0\x0d\x31\x1c\xce\x51\x5c\x25\xe7\xc8\x3e\x03\x11\xe2\xdf\x2b\x68\xc0\x2d\x35\x69\x84\x4a\xe9\x96\xc8\xef\xd9\xef\xf9\x3d\xdf\x64\x03\xda\xb2\x17\x64\x81\x4c\x5c\x20\x05\x86\xab\x20\x1e\xb2\xc9\x54\x01\x63\x49\x90\x01\xa3\x98\x25\x0d\x48\x5e\xac\x60\x31\x0e\x55\x55\xd4\xa0\xc0\x06\x69\xa0\x9b\x03\x12\x14\x48\x5d\xed\xbe\x82\x61\xb9\x7b\xe8\xc1\x76\xaa\xa0\xc2\x1a\x67\x05\x41\x36\xc7\xc2\x93\x02\x2f\x28\x34\x0c\x82\x33\x53\x18\xa9\x21\x83\xa5\xa1\x55\xe4\xce\x03\x6b\x31\x96\x61\xab\x5a\xf4\x1d\x0f\xc5\x3c\x77\x91\xbc\xfb\x23\xef\xf7\x07\x9f\xea\x7f\xc4\x02\x59\xd3\x0d\xb4\x37\xec\xef\xe2\xb5\x65\x71\xa8\xa5\x9f\x36\xa1\x8e\xc0\x12\xbd\x50\x17\x9f\x63\x92\xa7\x66\xd3\xe1\x81\x13\xed\x76\xb2\xc4\x96\x0f\xa0\x4b\x43\x99\x3b\x5b\xb6\xfa\x11\xdb\x2d\xb3\xf1\x02\x9d\xe1\xd7\x11\x95\x68\x98\xf2\xff\x94\xdd\x99\xe2\x45\x8f\xb3\x63\xdf\x12\xea\x4e\x43\x4b\x95\xf3\xaf\xd2\xfa\xa1\x85\x89\x58\x5a\x2a\x96\x48\xe5\xf3\x4e\xd7\x99\x06\x09\x89\xcf\x6b\xd2\x41\xec\x2d\xc4\x9d\xad\x8c\x43\xe9\x52\x87\x7e\xfe\x16\xbc\x0c\x9c\x5d\xc9\x62\xf4\x41\xb9\x5e\x29\xce\x8a\xbd\xec\x0d\xc7\x65\xed\x28\x37\x92\xb0\x1b\x21\x8e\xb4\x5d\x92\xab\x47\xe9\x7b\x89\x40\x5a\x57\xc6\xe1\x5e\xfd\x17\x58\xef\x3e\xf9\x98\x9a\xa9\xf1\xdb\xf7\x36\x7d\x0f\x00\x00\xff\xff\xcd\xc1\x5e\xd0\x31\x07\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x6b\x6e\x7a\x3b\x0c\xc4\xb7\x34\x7e\xc6\x59\x4e\x9e\xfb\x5f\xc2\x95\x73\x38\xa5\xa5\x15\xdc\x8f\x7f\x22\x81\x62\xe2\x71\xe6\x67\xc7\x91\x4b\x61\xec\x80\x8a\x13\x9c\x00\x99\x56\x5c\xf6\xe3\xe3\x58\x70\x80\xd1\x1c\x80\x18\x94\xdc\x85\x8b\x6c\xad\x8a\x20\xd2\xcc\x51\xb6\x12\x70\x89\xd5\x9a\xb7\x81\x2b\x6a\xf3\x8a\x0e\xd1\x81\x58\x76\x45\xc3\xac\x58\x4f\xb5\xc0\x9e\xd6\x45\xc9\x8e\x46\xd6\xfd\x8a\x9e\xfc\x7e\xee\x65\x0e\xce\x6f\x02\xba\x9a\x5b\xcf\x7f\xee\x2c\x8f\xd7\xac\x22\x8f\x2c\x02\xcd\x91\xe7\x8f\x47\xaa\x08\x4a\xa7\x0c\xd0\x15\x09\x54\x82\x54\x6c\x79\xea\x55\xbc\xea\xd5\x70\x02\x9b\x3e\x95\xfc\x28\xb4\x07\x97\x54\xa8\x44\xfe\x4e\xfd\xdc\x7d\xa4\xce\xe0\x4b\xe7\xa7\x42\x32\x6d\xa3\xeb\x60\xac\xac\x7e\xd7\x49\xb5\x54\x3d\x7a\xf4\xec\x0a\xf9\xb3\x2f\xe0\xab\x32\x14\x27\xe3\xae\x1e\x02\x09\x3a\x5e\x4a\x40\x3a\xd9\x71\x48\xa0\x17\x87\x3c\xdc\x1a\x64\xd3\x7d\x82\xf8\xfb\x09\x43\xae\x5b\x35\x39\xe6\xee\xf5\xfe\x22\xbf\x63\xa4\xb7\xa2\xf4\x97\x9a\x74\xc6\xed\x0d\x8d\x2e\x32\x66\xac\x16\x12\x72\xd3\xf8\x9a\xc4\x2f\x0e\x71\x20\xdd\xfe\x83\x40\x95\x2b\x2a\x9f\x4e\x68\xf0\x83\xde\x21\x83\x8f\x64\x62\x7d\x22\x53\xf7\x4f\x32\x21\x95\x0c\x65\x73\x2c\x61\xf5\x9d\x7c\x6c\xdb\xa0\x35\x6b\x94\x4e\x22\x6b\xf3\xa6\x2a\x2a\xb5\xb3\xb5\xd1\x9b\x37\x5b\x5e\x37\x53\x5d\x51\x7d\x8f\x3a\xa9\xd4\x64\x1a\xfc\x69\x4e\x1b\x9f\x5e\x5c\xc4\xf2\xad\xd2\xf2\xf7\x14\xb9\xb5\xdd\x87\x95\x64\xf8\xf7\x54\xfd\x49\x55\x7f\x51\xa5\x9c\xf1\x8b\xea\xff\x9a\x32\x16\xfd\xc0\x92\xd5\xde\x4e\x99\xd4\xcb\xed\x77\xbf\x6c\xeb\x9f\x78\x43\xdc\xe4\x93\xbb\xae\x6f\xdd\x51\xee\xeb\xf1\x26\xe7\x17\x68\xe4\xe6\x5c\x5a\x69\x85\x05\x16\x0c\x88\x6c\xcc\x18\x73\xed\xe5\x6b\x29\xb0\xe6\x68\x33\xb6\x4f\x6f\x63\xb8\xb2\xcf\xd8\x7b\xb5\x60\x9a\x4d\x46\xdb\xbb\x18\xcb\x2c\x5b\xb7\xae\x2c\xcf\xf5\xbf\x00\x00\x00\xff\xff\xaf\xf6\xb2\xbc\xe4\x05\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4b\xc4\x40\x10\x85\xff\xcb\xab\xb7\x3a\xd1\x62\x7b\xb1\xb2\xb2\x3c\xae\x98\xe4\xe6\x60\x71\x9d\x0d\xd9\x37\xd1\xe5\xb8\xff\x2e\x8a\x67\x30\x04\x4d\x61\x39\xbc\xf9\xe0\x7b\x6f\x7f\x46\x5f\xac\x52\x8c\x88\x1c\x5d\x03\x92\x0d\xce\x8a\xb8\x3f\xc3\xe4\x45\x11\xf1\xac\x0d\x01\x6c\xc3\xc7\xd1\x35\x6a\xbd\xd9\xe1\x72\x08\xd7\xdc\x84\x69\xd2\x07\x25\x02\x8a\x73\x89\xcf\xac\x27\xe3\xee\xf6\xee\x93\x1d\xa4\x49\x97\x15\xf1\x24\xb9\x6a\x40\xa5\x50\x1f\x9d\xd2\xa5\x9c\xd8\x10\x31\x25\x7d\x9d\xd9\x93\x5b\xcf\x54\x0c\x97\xf0\x8b\xf3\x8a\xd4\xfd\x9b\xf6\xce\x32\xfe\x25\x27\xc7\xe3\xa8\xb5\xfe\xa7\xdc\x17\xbd\x75\xd1\xf0\x9d\x4f\x92\x5d\xd7\x77\xfb\x51\xef\x69\xb1\xf9\x26\x75\x2b\x76\x7d\x5a\x29\x70\x78\x0f\x00\x00\xff\xff\x2e\xcb\x7f\x71\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

