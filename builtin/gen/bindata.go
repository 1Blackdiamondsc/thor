// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6e\xb3\x30\x10\x84\xdf\x65\xcf\x3e\xfd\xff\x8d\x5b\x1f\xa0\x97\x5e\xa3\x08\x19\xbc\x44\x96\x60\x17\x79\xd7\x14\x14\xe5\xdd\xab\x44\x80\x49\x45\x52\x52\x35\x95\x7a\x4d\x76\x67\xbe\x19\xdb\xec\x8e\x50\x32\x89\x5a\x52\xc8\x2a\x5b\x0b\x1a\xf0\xd4\x46\x15\xc8\x76\x47\x20\xdb\x20\x64\x90\x8b\x3f\x10\x06\x30\xa0\x43\x7b\xfe\xc1\x3a\x17\x50\x04\x4e\x7b\x33\xcd\x04\x6c\xb8\x43\x30\xc0\x51\xc7\xfd\xbd\x81\xd6\x0e\xb6\xa8\x71\xd6\x16\xb5\x8a\xaf\x51\x6d\xe1\x6b\xaf\x03\x64\x40\x4c\xd3\xd0\x2c\x5f\x45\x2a\xd5\x33\xc1\xc9\x2c\xf9\x34\xc4\x25\x5e\xf2\xae\x7c\x10\xbd\xb2\x9e\xd1\xd7\x99\xbf\xc6\xea\x3c\xbe\x3f\x0a\xf4\x50\x5f\x84\xfd\x5f\x43\x3e\xe0\x0d\xe2\xda\x8b\xa2\x4b\xbb\x05\x73\x7d\xf1\x1d\xff\x47\x72\x1c\x84\xd7\xd4\xd3\x90\x77\x48\x7a\x4e\x92\x64\x06\x45\xf9\xff\x6f\x39\x64\x4b\xf5\x1d\x7e\x76\x7a\x5a\x3d\x29\x3b\xf6\x58\x46\xbd\x44\xf8\xed\x23\xfb\xc6\xb3\x4c\x85\xe5\x9b\xba\xcf\xef\x94\x9f\x3a\xb0\xce\x3d\xe1\x7d\x5b\x62\x1a\x1a\x8e\xb2\x96\xd4\x93\xc3\x1e\xdd\x74\x30\x23\xc8\xbd\xdc\xf3\xc6\x28\xb6\xe9\x0a\xde\x58\xda\xd4\xca\x8b\x5b\xdc\x7c\xec\x90\xf4\xc7\x63\x25\xb3\xb7\xe9\x2b\x7b\xed\xb7\xff\x08\x00\x00\xff\xff\xbd\xc0\xe9\x35\xc8\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\x23\x29\x0c\xbd\x92\x76\xc4\x71\xc4\x76\xff\x23\xcc\xa3\x28\xc7\xf6\xb8\xdb\x1d\x9c\x71\xa6\x5f\x77\xf1\x2a\xa9\x08\x84\x84\xbe\x16\x14\x03\x07\x03\x01\x25\x03\x10\x36\x04\x43\x80\xe4\x9a\x0c\x00\x58\x53\x05\x84\x17\x9f\x0c\x20\xc6\xe3\x7c\xd0\x1c\x8c\x29\x43\xa6\x06\x1d\xe5\x90\xd3\x34\x4d\x2a\xb7\x21\xad\x0d\x59\xd4\x0a\x8b\x1a\x25\x71\x67\xb4\x83\x8a\x98\x16\xb5\x52\xa9\xd4\x47\x5d\xd4\x1c\x27\x95\xa5\x82\x77\x3d\xa8\x24\xb4\xa8\xad\x02\x64\x29\xbe\xa8\x39\x6b\xd2\x32\xcf\xe5\x30\x9a\x16\x16\x07\xd4\x29\xd1\xf3\x3a\xef\xa2\xeb\x61\x83\xd2\xa7\x45\x1c\xd8\x80\x7d\x4a\x02\x07\x9f\x16\xf9\x38\xd1\xaf\x1e\xb4\x0c\x06\x04\x93\x37\x53\xc6\x0c\x7a\x0c\x43\x60\x08\x35\x2d\x00\xb7\x5a\xd4\xfa\xa8\x45\x9b\x33\xaa\x30\x57\x1f\x38\xa1\x83\xd3\x8e\x0e\x3b\x6b\x1d\xa7\x1f\x1c\x1a\xe3\xa1\xe9\x29\x31\x23\x70\x86\xc1\x37\xda\x22\xf1\x83\xb6\xa8\xfe\x46\x9b\xe9\xb0\xdf\xcf\x0a\x61\x8f\x56\x68\xe5\x8d\x56\xb0\xa6\x77\x56\x50\x3c\xc7\x55\x6b\x97\xf7\x5b\xc6\x79\x9e\x1a\x33\xda\xe5\xf7\xcd\x1c\x3d\xea\x94\x45\xe1\x32\x9e\xd8\x93\xa4\x3f\xd8\x93\x34\x19\x42\x6a\xfd\xb7\x43\x9f\x42\x1f\xb4\x65\x78\x43\x0c\xfc\x17\xfc\x17\x9c\x7e\xea\x59\xee\x72\xc9\x49\xf3\x1c\x48\x57\xab\xef\xc8\x66\xde\x59\x8d\xe2\x53\xb6\x60\xd7\xa4\xc0\xb0\xc3\x6b\x0c\xd4\x5c\x0c\x8a\xd3\x89\x12\xdd\xd6\x9b\xaf\xd4\x2e\xa0\xe5\x07\x20\xf0\xcd\xde\x46\x1f\x1e\xe7\x3c\x3d\xe8\xf0\xaf\xe4\xc0\x05\xf5\xf4\x3b\xee\x78\xef\x77\x1a\x03\xaf\xb3\x43\x35\x71\x5b\xf3\xdc\xd7\xd7\xb9\xee\x26\xfe\x26\x9d\xc0\x11\x17\x97\x40\xb9\xdd\xf3\xea\xb9\x8a\x3f\xf6\x18\x54\x2d\x33\xc6\x27\x2f\xdd\xd5\xcf\x5d\x14\xa9\x64\x2f\x60\xfa\x97\xa1\x28\x55\x9e\xa0\x28\xcd\x5f\x41\xb1\xf7\x5d\x14\x0f\x3e\x85\xb8\xe3\xdb\x42\x30\x8d\xd2\x53\x4d\x51\x99\xc4\xdb\x10\x75\xac\x04\x16\x2e\x11\x85\x6b\x91\x9e\x9a\x12\x16\xe5\xec\x45\xa8\x98\xcf\xbb\xdc\x48\x1e\x1a\xa9\x09\x62\x5f\x67\xb9\xcf\xb4\x41\x97\x5b\x0f\x6c\xe7\x85\x81\x90\xa0\xd7\x73\x5f\xc7\x77\xf8\xd3\xa7\x30\xd6\x62\x4f\x30\xd6\x1a\x2f\x60\xac\x1d\xf6\x30\xce\xeb\x7d\xd1\x96\xd1\x38\x9a\xf5\x36\x2b\xfe\x5f\x14\x9d\x96\xf9\x09\x72\x16\xe9\x05\xe4\xac\xb4\x17\x90\x5b\x7f\xd9\xa5\x73\x39\x65\x6e\xa2\xd8\xbb\xd9\xbc\x95\xb8\xfd\x39\x28\xfa\xaf\x51\x4c\xe9\x59\xfc\xcd\x0c\xf4\x49\x14\xfd\x8a\x62\x8a\x4f\xc7\xdf\x57\x68\xa7\x07\xf0\xbf\x5e\xfc\xf8\xf9\x62\x3c\x67\x0a\xb4\xd1\xe2\x7f\xcf\x8d\x2e\xcf\xea\x9f\xeb\x2b\xf5\xcf\x6d\xb3\xfe\xdd\xe4\xc6\x79\x03\xae\xdf\x73\xe7\x3d\xab\xae\xd7\xbb\xfe\xe1\xf8\xda\xde\xe9\xb4\x57\x9e\x2d\x82\xae\xec\xb0\x15\x83\x73\x8f\x59\xf1\xd7\x2e\xb3\x32\xaf\x5d\x0c\x00\x27\xa6\x97\xbe\x61\xad\x3b\x35\xcf\x44\x5f\xb9\xf1\x01\x15\xb3\x6a\xe8\x32\xc7\xe9\x29\xf2\xa6\x8c\xf4\x2d\xdd\xf0\x37\xc8\xa0\x9f\x77\xdc\x33\x27\x5c\xa2\xe2\x13\x91\x17\xf0\xac\x7f\x08\x7c\xa5\x7f\x08\xda\xee\x1f\x16\x9f\xa4\x3b\xbe\xbd\xfa\x31\xaa\x47\x6d\xc3\x01\x7b\x44\xd1\x5c\xdd\x1a\xa2\x9b\x80\x6a\x6b\x45\xdc\xac\x8d\x20\xd7\xdc\x8c\xd5\xda\x18\x34\x2d\x41\x5d\x1b\x0f\xab\x64\xce\x1f\xf7\x9a\xcd\xd8\x7b\x03\x8a\xf4\xa3\xff\x8f\xc4\x49\x9d\x0d\x7c\xa0\xa9\x51\x8a\x14\x89\x18\xd4\x09\x24\x5b\x2a\xcc\x35\x5c\x53\xcf\xd6\x6a\xf2\x54\xc2\x3c\xf3\x48\x18\x48\x0d\xba\x96\x28\x23\x77\x6b\xbd\x59\x1b\x5d\x35\x91\x60\x2e\x1a\x8e\xc3\x01\x28\xff\x13\x00\x00\xff\xff\xfe\x81\x4c\xc2\x04\x16\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xc1\x6a\xc3\x40\x0c\x44\xff\x45\xe7\x3d\xb5\x37\xdf\x7b\xec\x17\x84\x50\x64\xaf\x1c\x04\x8e\x64\x56\x5a\x37\x26\xe4\xdf\x4b\x5c\xe2\x84\x3a\xd8\x84\x9a\xd2\x1c\xcd\x8e\xf0\x9b\xd1\x68\x73\x84\x4a\xc5\x1c\xc5\xa1\xa8\xb1\x31\x0a\xc0\xd2\x66\x37\x28\x36\x47\x10\xdc\x13\x14\x60\xbc\x13\x4a\x10\xc0\xfb\xf6\xfc\x8d\x31\x26\x32\x83\x53\x18\x25\x24\x51\x93\xe9\xbc\x88\x23\x89\xb3\xf7\x57\x51\xd9\x3b\xd9\xeb\x0b\x9c\xb6\xe1\x22\x12\x74\xee\xe8\x03\x63\x84\x00\x9a\xfd\x27\xcc\xcd\xb0\x6a\x33\x4c\xb6\xd8\x63\xd9\xd0\xe8\xc0\x1c\x9d\xde\xb3\x63\xc9\xcd\xf9\x77\x05\x88\xca\x45\x34\x8e\xd7\x59\x2a\x67\x95\x81\xf0\x9a\x82\xa7\xfc\x58\x08\x13\x74\xb6\xb7\x21\x0d\x5a\xd3\x41\xc7\xf4\xb9\xc8\xfe\xf8\x06\x27\xf0\x89\xf6\xda\xd1\xbf\x88\x7e\xc2\x46\x07\xaa\xb2\x0f\x25\x9b\xa5\xbb\x75\xb7\x52\xb2\xbf\x6f\x85\xd0\xc1\x9f\x12\x7c\x47\x8b\xdc\xdf\x75\x08\x73\x8e\xee\x3d\x8e\xd7\x7f\xf7\x71\xe5\xdb\x58\x2a\x57\xcd\xc9\xfe\x68\x41\xdb\xaf\x00\x00\x00\xff\xff\x92\x80\xc4\x2e\x77\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\x1b\xad\x0e\xde\x92\x1e\x48\x88\xe5\xf0\xdc\xff\x12\xee\x11\x60\xc7\x8e\x53\x37\x38\x4d\x7b\xfb\x77\xe6\xc4\xc7\xd1\x30\x92\xf8\xf4\xe9\x81\x15\x0c\x14\x02\x08\x29\x40\x60\x45\x50\x04\xc8\x43\xa2\x02\x00\x4b\xac\x80\xf0\xe2\x95\x00\x82\xf2\xd8\x17\xaa\x81\x32\xe8\x68\xad\x03\x63\x70\x3b\x25\x48\x9c\xd2\x24\x3d\xc7\xb2\xa4\x18\xb6\x14\x0d\x15\x5a\x6b\x4b\x9a\xd3\x92\x12\x17\x8b\x74\x91\xb6\xbd\x96\x91\x6b\x17\x8d\x53\x4a\xb2\xd7\x46\xc8\x60\xc4\xb8\xa4\x96\x97\x34\x49\xb3\x54\xc2\x96\x76\x5c\xd2\x9c\x40\x52\x2d\x65\x4a\x39\x6e\x69\x29\x2c\xd1\x78\x4b\x9b\x2e\x69\xb3\x84\x2c\x75\xf9\x10\xa4\x6c\x69\x53\xea\x8d\xfb\x92\x9a\x4a\x94\xe2\x28\x1a\x8c\x26\x85\x83\x01\x8a\xef\xba\xc2\x42\x77\xc9\x65\x22\x5e\x93\xbf\x33\x9a\xa8\xbf\x13\x40\xd0\x66\x64\x08\x00\x8d\x0c\x81\x8d\x84\x8c\x0d\x0d\xc5\xff\x68\x3d\x4b\x28\x60\x20\x98\xf6\xda\x04\x06\xc6\xc6\xae\x5f\x8a\xaf\xc7\x65\x15\x61\x62\x62\x04\xf3\x7d\x0b\xb0\x75\x18\xfa\x5b\xcb\x8b\xde\xdd\xbe\xc0\xba\xd3\xfc\x5b\xcf\x15\x70\x46\x70\xe9\x62\xdd\xba\xd8\x6d\xab\xfb\xc8\xd3\x3e\x4f\x4b\x00\x19\x18\x13\xea\xbd\x9f\xae\x39\xd1\xd2\x7d\xd9\x63\x42\xe0\x04\x83\x6f\xf0\xf1\x95\xef\xf1\x41\x1b\xce\x4f\x03\x56\xe0\xe5\x91\xe3\xc3\x12\xaf\xfc\xfa\xd9\x85\xfa\x86\x51\xa2\x34\x35\xb0\xbc\x97\x6d\xef\x10\x84\xf3\x5d\x2c\x08\x65\xdd\xef\xf6\xf4\x74\x27\x45\x1e\x77\x52\xba\x27\x19\x95\x7b\xed\x27\x5a\xfb\x23\x3e\xc4\xdf\x84\xcf\xb7\xe1\xab\x0d\xbf\x8c\x2f\xe9\x23\xbe\xa4\x8e\x6f\x1c\xf5\x5e\xbb\x82\x7b\xb8\x3e\x4f\x2c\x24\x7d\xb4\x50\xcb\xaf\xc7\xfa\x8a\x8b\x81\xbc\xcc\x0c\xea\xed\xd1\xdb\xa1\xae\xb5\x87\x6f\xab\x2c\x7c\xad\x06\x3f\xae\x2c\x8c\xe5\x53\x95\x85\x95\xbf\xb1\xb2\x70\x7c\xc4\x87\x4b\xfd\xcd\x95\x25\xd1\xd7\x99\xcf\x9d\x1e\x76\x12\x02\xfe\x65\x35\x20\xb1\x7d\x19\x89\xa0\xf1\x11\x89\xe8\x9f\x39\xbd\x9e\x49\x21\x7d\x80\x6f\x8f\xff\x7f\xf8\x5e\xb1\x2c\x7c\xdc\x51\x14\x74\x4a\x57\x96\xfb\x8e\xd6\x24\xe8\xd5\x01\x6e\x32\x2c\x0e\x51\x15\x09\x6a\x3a\x22\xbd\x32\x09\xba\xae\x4b\xd6\x2f\x2f\x5d\xb6\xf0\x65\x3e\xd9\xff\xc9\xda\x1b\x04\xe0\xed\xbb\x5b\x25\x98\xb6\x8f\x90\xff\x55\x96\xcd\xa3\x26\x02\x46\x27\x1a\x0f\x51\x1a\x56\xa5\x74\xec\xd2\x4b\xaf\xb1\x49\x69\x18\x46\xc4\x40\xb1\x61\xb7\x30\xb8\x35\x9f\xc1\x2b\x8c\x58\x88\x12\x76\x29\x04\x90\xab\xd5\x58\xb9\x24\x12\x0b\x9f\x65\x52\xf6\x8e\x30\x99\xe8\x8c\x9c\x7c\xdc\x11\x66\x38\xf1\x59\x59\x12\x15\xb6\x54\xb7\x7e\xbc\x3d\x3b\x7c\xe5\x1c\x02\x7b\x07\x10\x3c\x06\x74\xf5\xdf\xd8\xf3\x78\x32\x21\x1a\x70\x41\xd9\xd9\xaf\x09\xef\xb3\x5f\xf2\xc0\xb7\xa7\x59\x24\x72\xdb\xec\xed\xeb\xdb\x5e\x77\xd3\x81\x5c\xee\xd1\xde\x5d\x52\x4b\xb9\xd5\xf9\x56\x3f\x6e\x3b\xec\x6d\x4e\x7f\x9c\x2d\x76\xc4\xc3\xbf\x3f\x5b\x24\x38\x7e\x7e\xfb\x54\x27\xed\x1e\xc3\x7f\x13\x93\x69\x99\x8c\x24\x00\xaf\xa9\xe7\x52\x53\xe6\xe4\x8b\x16\xfc\xf6\x9e\x50\xf7\xa4\xb1\xf3\x93\x2f\x33\xd2\x85\x55\x0a\x48\xf7\x3c\x3b\xcd\xd9\xde\x55\xbd\x27\xfa\x94\x36\xb3\x8a\xbe\x23\x6b\xed\xb0\x5a\xbe\x88\xf4\xae\x6e\x9f\xa8\x10\x96\xe9\x49\x85\xb0\xa2\x2f\x54\x08\xab\xf5\x85\x0a\xb1\xfe\xd3\x9f\x74\xf3\x70\xdf\xcd\x25\x04\x0b\xe3\xd5\xc0\x7c\xd4\xcd\xe7\x5c\xdb\x99\x7f\xc0\xbc\xf7\x9d\xe1\xa8\x9b\x59\x38\x59\x8d\xc1\xe6\xf4\x17\x83\x44\x39\xb4\x74\xca\x7e\x90\x94\x04\x7a\x32\xfd\xa7\xd8\x9f\xe9\x59\x7f\xcc\xfc\x4a\x7f\xcc\xe1\xb0\x3f\x9e\x71\x42\xca\xee\x21\x39\x8e\x5b\x3b\x2e\xb1\xfc\xf9\x8a\x79\xca\x10\x64\x6b\xa1\xc1\x9f\x9f\x69\xf2\x28\x4f\x62\x56\x60\xbc\x10\xb3\x42\xf2\xa5\x99\x66\x75\xb2\xa3\xec\xfe\xa5\x3d\xf4\x8f\x9c\x3c\x24\x7c\x54\x11\x0d\x11\x27\xa6\x4d\x3d\x12\x87\x2c\xe3\xd4\x1b\x58\x13\x0b\xd7\x3e\xcc\xdf\x54\x89\x7e\x03\x66\x77\x27\x8e\xeb\xaf\x3a\x9f\xe0\x78\xd5\xf6\x84\xe3\xd5\xf0\x05\x8e\xd7\x14\xcf\x38\xbe\xeb\x4c\x2d\x7c\xfb\xde\x71\xdd\xa8\xbd\x8d\x5c\x71\xfd\xe2\xf6\xdf\x8c\x28\xfc\x3c\xa2\x4d\xf4\x49\x44\x9b\xe6\xe7\x11\xf5\x78\x1d\x79\x7c\x78\xca\x6e\x6d\x90\x50\x6e\x58\x3a\x55\x4b\x45\x53\xa5\x02\x6a\xa3\x72\xb4\x96\x73\x12\x2a\x39\xfa\x60\x51\x43\x46\x54\xb2\x21\x92\x43\x1b\x42\x5c\xb8\x8f\x6b\x6c\x3f\x71\xca\xbe\xf4\x21\x80\x8c\x2a\x4a\x31\xc7\x1c\x89\x41\x8c\x60\xb4\x6e\x2d\x24\x6c\xd6\x5a\xe7\x81\x96\x33\x59\x4a\x64\x23\xe8\xb0\x44\x2d\xf4\x6e\x5a\xa9\xe6\x52\x2a\xd2\x30\xeb\x52\x63\xe3\x36\x32\x13\xa4\x04\x40\xe9\x7f\x01\x00\x00\xff\xff\x08\x97\x69\x9d\x0a\x1c\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x4b\x03\x31\x10\x85\xff\xcb\x9c\x73\x12\xf4\x90\xa3\x77\x4f\x1e\x4b\x91\xd9\xee\x54\x02\xd9\x99\xb0\xf3\xa6\xb2\x94\xfe\x77\x11\x5c\x4a\xb5\xd8\x15\x45\x7b\x0c\xbc\x17\xbe\x2f\x33\x59\xed\x69\x63\xea\x60\x05\x65\x8c\x21\x89\x8a\xb6\x80\x53\x5e\xed\x49\x79\x10\xca\xc4\x7d\x3f\x52\x22\x4c\x6d\x3e\x89\x3b\x1d\xd6\x69\x0e\x28\xa3\xec\xe4\x69\x60\x87\xbc\x25\x2d\xf0\xf1\x8e\xf3\xfd\xc6\x13\x77\x55\x28\x6f\xb9\xba\x24\x72\x30\xe4\x21\xc0\x5d\xa9\x05\x13\x65\xda\x15\x79\x39\x76\xb7\xa1\x1b\x14\x53\x3a\xa4\x2f\xc0\x3f\x81\xc1\xc0\xf5\x3e\x46\x95\xfe\x12\x5d\x14\xc5\xcd\xed\xdd\x6f\xd2\xbd\xb7\x17\xbf\x6b\x3a\x06\x06\x0b\xc5\x79\xb8\x53\x43\xee\x4f\xcd\x16\xd1\xab\xe9\x1c\xba\x06\x07\x8f\xee\xd2\x74\x3a\xb3\xba\x70\x34\xdf\x90\x5b\xb4\x3e\x8f\xd1\x5a\x9d\xfe\x61\x7d\x7e\xfa\x2b\x9f\x05\x7f\x43\xbd\x7e\x0d\x00\x00\xff\xff\x39\x77\x62\x59\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x01\x01\x44\x21\x08\x03\xd0\x4a\x73\xde\x06\xc4\x41\x3d\xfa\x47\xf8\xcf\x48\x18\x3f\x88\x06\x90\x98\x07\xf4\xb2\xcc\xe8\xe8\xe0\x86\x92\x50\x59\xf5\x8f\x7c\x3d\x9d\xab\x8f\xae\xa9\xfb\xbc\x46\xfb\xd8\xb1\x93\xea\x5a\xaf\x6b\x9f\x0b\x72\xce\xb9\x23\x67\x46\x2d\x0e\x04\xb0\xbe\x00\x00\x00\xff\xff\x35\x10\x33\x98\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xf4\x30\x10\x06\xe0\xff\x32\xe7\x9c\xfa\x7d\x2e\xd2\xa3\xe8\xc1\x83\x20\xee\x82\x87\xa5\xc8\xa4\x9d\x4a\x68\x9a\x84\x64\x52\x37\x2c\xfb\xdf\xa5\x65\xdd\xed\x41\xdc\x8a\x68\x7b\xcb\x61\x5e\xf2\xf0\x32\xb3\xdd\x43\x69\x4d\x60\x34\x0c\x39\xfb\x48\x02\x94\x71\x91\x03\xe4\xdb\x42\x80\xc1\x96\x20\x07\xb6\x8c\x7a\x1d\x9d\xd3\x09\x04\xd8\xc8\xc7\x89\xfd\xc7\x00\x08\xe0\xe4\xfa\x57\x54\x86\xb3\xab\x15\x1c\x0a\x01\x0e\x13\x4a\x4d\x90\xd7\xa8\x03\x09\x08\x8c\x4c\x0f\x91\x51\x2a\xad\x38\x41\x0e\x9d\xa2\xb7\x73\xb6\x8e\xa6\x64\x65\x0d\x1c\xc4\x17\xac\xd3\xa7\x2f\x1d\xea\x48\xe7\xb8\x4c\x4c\x61\xf8\xf8\x38\x20\x35\x36\x94\xc9\x9e\x73\x41\x3d\x44\xff\x65\x7f\xa1\x36\xb1\xfd\xbc\xad\x13\xda\x96\xcd\x46\xb5\xb4\xa0\xa6\x27\x99\xd7\xea\xd5\x90\xbf\xa4\xc6\xaa\xf2\x14\xc2\x62\xd4\x9b\x61\xb5\x4b\xeb\x27\xf5\xbd\xfa\xff\x8b\xf0\xd1\xbd\xed\xee\x76\x4e\x79\x1c\x32\xb3\xaf\xc1\xd8\x75\x7f\x3b\xff\x29\x8d\x3d\x8f\xde\x76\x54\x3d\x5b\xdf\xcc\xdf\xd3\xf7\x16\x6f\x69\x4d\xde\xf4\xa8\x27\xaa\x27\xa9\xae\x7f\x88\x2a\xde\x03\x00\x00\xff\xff\x9e\xad\x27\x0c\x78\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x01\x72\xe4\x28\x0c\xfc\x52\x4b\x42\x42\x3c\x07\x30\xfc\xff\x09\x57\x80\x27\x9b\x89\xe7\x9c\xb5\xb3\xbb\xa9\x38\x95\x4a\x46\x80\x90\xba\xdb\x92\xc6\xe0\x30\x04\x28\x1b\x10\xc4\x08\x46\x40\x0e\x1a\x0d\x80\x68\xac\x20\xdc\x7c\x12\x10\x4c\xfa\xfe\x90\x39\x4c\xc8\xc9\xb0\x6d\x1b\x85\x79\x4f\xd2\x38\xac\x12\x39\xa8\x53\x58\xd6\x2d\xec\xd6\xe2\x68\x2d\xf3\xb4\x92\xee\x7b\x03\x7a\xea\xb9\xb7\x65\x4d\x79\xb7\x52\x4f\x88\x4c\xd3\xca\x88\xcb\x6a\xd0\xad\x6b\xaa\xcb\xaa\x75\x59\x53\xae\x2a\x5b\x29\xcb\xea\xfb\xde\x5a\xba\x6d\x5b\x5d\x7e\xb9\xec\x7e\x37\xe5\xd8\x24\xac\xc8\xb8\xe9\xb2\x36\x87\xaa\xcb\xba\x4d\xb8\x69\xd4\x32\xf0\x72\xf4\x4d\x8b\x04\x07\xe9\xc8\xa4\xe8\xc2\x71\xd9\x75\x62\x5b\xda\x38\xe3\x5d\x6d\x9c\x09\x50\x72\x38\x3b\x0d\x06\x18\xa0\x44\x0a\xc5\x63\x25\x11\x24\xa1\xcb\x7b\xaf\x0d\x07\xaf\x24\xe3\xfe\xe0\x10\x83\xf8\xc0\x05\x0e\x87\x68\xc2\xee\x15\xce\xa0\x0f\x96\xc9\x3d\x75\xd0\xb0\xcc\xbb\x02\xf6\x28\xd6\xfd\x09\xc3\xd7\xd2\x87\x23\x49\xe2\x34\x6d\xbf\xa2\x75\x71\x99\xf1\x07\x89\xe3\x86\x15\xfd\xe3\x27\xd1\x3c\xc1\x69\xff\x6c\x84\x20\xfa\x9c\xf9\xc8\x84\x12\xd9\xe3\xef\x05\x24\xc8\x8e\xf8\x92\x87\xcf\x90\x58\x59\xbc\x45\xa4\x61\xbb\xcd\x05\x65\x3b\x46\x50\xf5\x62\x04\xc6\xe1\x39\x82\xf8\xf6\xd6\x7c\xf6\x90\x5d\xd9\x7b\x21\x33\x26\x39\x64\xc6\xc2\x57\x33\xeb\xf4\x81\xed\x78\x8c\xea\x95\xed\x4a\xa4\xe6\xc7\x48\x23\x19\x21\x96\x76\x9b\x59\x4e\x2f\xf2\x4f\xd5\x08\x6e\xf9\x8f\x29\x98\xeb\x51\x3f\x5c\xbb\xd1\xd8\x7c\x3f\xf6\x4e\x07\xaf\x42\xb8\xc8\x5d\x2a\xf6\xc7\xf2\x14\xc9\xc7\x88\x66\xbb\xc9\xfe\x51\xfb\x07\x35\x7c\xaa\xeb\x44\x76\xef\xd4\xe7\x19\xcc\x2e\x88\x2b\xef\x98\x89\x26\x2e\xe2\xa9\xee\xde\xe8\x7d\x0f\xfc\x4a\x3f\xc5\xae\x01\x84\x55\xb1\xdf\x30\x93\xc1\xe8\x44\x37\x3a\xa4\x90\x3e\x50\xef\x1f\xea\xa3\xe6\x4e\x6f\xab\x01\x49\xa3\x6c\x6b\x5d\xda\xfa\x6f\xdf\x87\x5f\x68\x0c\x3b\xc3\x89\xf6\x53\xd4\xdf\xfb\xfc\xa5\xa4\xd1\x2d\x5e\x29\x29\xad\x5f\xbb\x87\x65\x8e\x0d\x39\xb3\xbb\xec\xd9\xf2\xdf\x40\x73\x75\xc2\xd9\xcf\xd8\x47\x77\x66\x65\x97\xd9\xe7\xe8\x59\x23\xcf\x79\x0e\xec\x47\x64\x80\x96\xb1\xff\x81\x51\xe9\x63\x4e\x18\xfd\x70\x9c\xf7\x80\xdd\xc7\x42\x6b\xf5\xc1\x3c\x75\xaf\x4f\x28\xad\xf5\xd1\x93\xc7\xb4\xb4\x7c\xb5\xba\xfb\x92\x71\xb7\xcd\x9e\x3b\xef\x1f\x6f\xcf\xc8\x3e\x43\x5e\x68\xb9\x28\x12\x3f\x78\xfc\x0d\xad\x28\xca\x89\x56\x74\xb0\x7e\x59\x2b\x2a\x7a\x43\x2b\xeb\xd3\xae\x97\x20\xce\x44\xcb\xdb\x98\xdf\xe6\x80\x3a\x67\xa7\xab\x4a\x62\xc9\x2d\x79\x4d\x7f\x5d\x49\x4f\x7e\x9f\xe6\xdf\x43\xb5\xf9\x1d\x5e\xb6\x78\xc6\x4b\x2b\x37\x78\x31\xd0\x35\x5e\x5e\x75\xe8\xb9\x56\xfe\x97\x2d\x13\x59\x6c\xb5\x7a\x8b\xad\x82\xcd\x42\xe7\x1f\xc6\x96\xe5\x76\xc2\x96\x55\xbe\xc3\xd6\xe6\xd7\xdf\xa2\x13\x66\x22\x30\x99\x89\x25\xdd\x61\xc6\x9b\x57\x74\x69\x3f\x8c\x99\x18\xcf\xea\x5b\xf4\x3b\xf5\x2d\xe6\x1b\xf5\xed\x23\x33\x57\xf1\xaf\xa9\xb8\x32\xf4\xdb\xa7\x0b\xe7\x70\x82\xa8\x8b\xdf\x40\xd4\x43\xbb\x58\x99\xde\x65\xff\xb5\x49\x63\xcb\x4a\xda\xc2\xf7\x4f\x6d\xbe\xe1\x0c\xd7\x16\xee\xe0\xda\xf3\xbf\x9c\xda\xc4\xbb\x44\xf2\xf2\xed\x58\xa6\x68\x27\x58\x26\xcf\x37\xb0\x4c\x19\x5f\xc1\x72\x56\xe2\x31\x18\x4e\x5f\xf3\xfb\x1f\x21\xc7\x7b\x33\x4d\x0c\x39\xc4\x1a\x7f\x58\x2d\xce\x81\x4e\x58\xc9\xaa\x37\x58\xc9\x56\xfe\x7d\x2d\xa6\x9e\x58\x4c\xe8\xdb\x75\x9e\x5b\x3e\x43\xb4\xb7\x1b\x88\x16\x0a\xf7\x74\x0e\x64\x32\x35\x8e\x39\xe6\xc8\x02\x75\x46\xac\x49\xbb\xd7\xde\x5a\xcc\x24\x35\x6d\x25\x91\x65\xf3\x8c\xac\xd9\x82\x81\x2b\x3c\x29\x87\x98\x75\xeb\xe4\x1e\x1c\x9d\xb3\xd6\x62\xd2\x9a\x6e\x00\xa7\xff\x02\x00\x00\xff\xff\x61\xca\x31\x28\xac\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x4b\xf3\x40\x10\xc6\xbf\xcb\x9c\xf7\x94\xf7\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x65\x92\x4c\x64\xc9\x66\x76\xd9\x9d\x8d\x0d\xa5\xdf\x5d\x12\xaa\x45\x09\x36\x08\xa6\xb9\xed\x61\xfe\xfc\xe6\xe1\x79\x76\xb3\x87\xc2\x72\x10\x64\x81\x54\x7c\x24\x05\x9a\x5d\x94\x00\xe9\x26\x53\xc0\xd8\x10\xa4\xc0\x28\xba\xa5\xad\xec\x6e\x8c\x2d\xea\x27\xaa\x40\x81\x8d\x72\xac\xdb\x7f\x94\x81\x02\xe9\x5c\xff\xca\x3b\xa1\x70\x0d\x87\x4c\x81\xc3\x0e\x73\x43\x90\x56\x68\x02\x29\x08\x82\x42\x0f\x51\x30\xd7\x46\x4b\x07\x29\xb4\x9a\xde\x4e\xad\x55\xe4\x42\xb4\x65\x38\xa8\x1f\xd8\x3e\x77\x72\x6c\x4e\xbd\x51\xb3\xfc\x4b\x86\xb5\x5f\xc9\xf3\x9e\xfb\x59\x37\x74\x0e\xbc\x9f\xb0\xfa\xbf\x30\xf0\xfb\xdb\x49\x7a\x1f\x07\x2c\x87\x7b\xad\x5f\x99\xfc\x39\x76\x2c\x4b\x4f\x21\xfc\x21\xfb\x88\x91\x1f\xbd\x6d\xa9\x7c\xb1\xbe\x9e\xe2\x88\xe4\x6a\x35\x2b\x9e\x15\x34\xeb\xe8\x9c\xe9\x2e\x4f\xf7\xab\xa4\x0d\x07\x14\xd6\x2f\x28\x6f\xdb\x16\x4d\xa4\x6f\x91\x19\x3d\x00\x6b\x4a\xf2\x5e\xd4\x8b\x87\x6e\xc4\xb8\x77\x3b\xa7\x3d\x0e\xad\x13\xa4\x9d\x9b\x6e\xae\x9f\x2a\x7b\x0f\x00\x00\xff\xff\x18\xbe\xf7\x1a\xb8\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\x4b\x52\xc5\x30\x0c\xbb\x92\x6c\xc7\xb2\x73\x9c\x7c\xef\x7f\x04\xa6\x4d\x1f\x0f\xd8\x30\x03\xf2\xa2\x8d\xac\x49\x24\x11\x09\xa2\xc0\x95\x40\x31\xca\x75\xaa\x1e\x04\x60\x1e\x03\x82\x3f\xa2\x02\x85\xb6\x1f\x08\x13\xb4\xd2\x66\x8f\xd0\x2a\x85\x28\xcb\xe3\xe2\x32\x86\xcd\xde\x79\x71\x54\x0f\xef\xd7\xdb\x89\x3d\xbd\x5b\x49\x88\x13\xfe\x38\x3a\xac\x83\xf7\x04\x9d\xde\x81\xb7\x8e\xf3\xa7\x2e\x0a\x11\xf9\xd2\x5d\x5f\x43\x7c\xba\xfa\x0d\xc2\xb7\xe7\xbb\x25\x49\xf9\x9a\xe9\x3f\xfd\x40\x53\x4e\xeb\x90\xcb\xf3\x73\x3f\xd2\x60\x79\x33\x19\x09\xeb\xe2\x27\xdb\xec\xdf\xb3\x79\xdb\xf2\xda\xad\xe5\x61\xf3\x6c\x6d\x9d\xbf\x47\x75\x86\x40\x13\x3a\x35\x5a\xb4\x50\x83\xa7\x62\x8c\x21\x05\x34\x5f\xde\x9a\xba\xb5\xba\xd7\xda\xb9\x77\x14\x63\x6f\x1e\xd6\x64\xc4\x54\xd8\x6c\x75\xa0\x47\xd4\x95\x2b\xa8\x39\x74\x63\x54\x40\xeb\x47\x00\x00\x00\xff\xff\x9d\xb4\xa2\xae\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x6d\x76\xe3\x30\x08\xbc\xd2\x00\x02\xc1\x71\xf4\x79\xff\x23\xec\x93\xad\x26\x69\xb7\x9b\xd4\xd9\x57\xf9\x87\x1d\x20\xc0\xcc\x20\x0c\x0e\x43\x82\xb2\x01\x49\x8c\x60\x04\x68\xd6\x6c\x00\x44\x73\x03\xe1\xcd\x13\x40\x32\x99\xfb\x90\x39\x4c\x38\xcb\x4c\x91\x40\xe9\xa8\xd3\x34\x2f\xab\x8f\x52\xac\xb4\x6d\x8d\x7c\x5a\x9b\xa4\x06\x1f\x7a\x5a\x7b\xd3\xac\x75\x75\xe5\x98\x5d\xab\x24\x07\xe9\xf2\x98\x9f\xdd\x9e\x76\x3d\x10\x84\x2e\x3c\x0e\x31\x88\x13\x28\xe0\x70\xc8\xb2\x82\x82\x2c\x60\xe0\xf5\x89\xe0\x38\xbc\xa2\x5f\x6d\x7a\x3c\x46\x20\x11\x35\xad\xc0\x63\xd5\x22\x7f\x57\x6d\x76\xad\xea\xad\x02\xa7\xba\x2a\x1c\x4a\x90\xc3\xd9\x69\x29\x72\xc4\xd2\x11\xb3\x3d\x41\x90\xc0\x94\xc7\x4e\xc6\x37\xf8\x27\x19\x41\x60\x9f\xb3\xe6\x9b\x1a\xaf\x0e\xd9\x95\xd8\xd7\xdd\x1e\x2c\xd6\x7b\x4f\x57\xb2\x8b\x5c\x89\xa6\x44\x7a\xf0\x42\x39\x3d\xf2\x22\xb8\x92\xc5\x84\x53\x58\x09\x29\x2e\x2e\x1b\x8f\x3c\x4e\xf3\xff\xdc\x0c\x6c\x7d\x91\xb0\x74\x91\x8f\xf9\xf8\x78\xdf\xf9\xfc\x34\x09\xbc\xe7\x05\xb8\x31\xec\xb2\x26\xed\x40\x99\x1d\x52\x49\xf7\x54\xd0\xfc\x32\x9f\x5a\x26\xdd\xbc\x8c\xac\x59\xfa\xe9\x97\x71\x7e\xed\xb8\xe3\x39\x73\xae\x5e\xf2\x64\x1f\xc2\xc9\xa6\x43\x49\xa7\x36\x1a\x3d\x3c\x57\x12\x19\x93\x27\x85\x24\x89\xca\x5a\x5a\x2d\x56\x74\x58\x4c\xa6\x18\x1e\x36\x5b\x74\xca\xe1\xfc\xd3\xb9\x2e\x27\x42\x3b\xef\xf9\x55\xc5\x6a\x27\xc5\x18\xe5\xa6\x17\xff\x92\x5e\xfc\x6f\xbd\x3e\x50\xf1\x6b\x85\xb8\xa5\x67\x0a\x75\x7f\xae\xd0\x99\x7f\xd9\x19\x4e\xb4\xff\x35\xc6\x63\xce\xfb\x0e\x52\xfa\x7e\xf7\xac\xf7\xfe\xf5\x26\xeb\xc1\x85\x6c\xf6\xb2\xf1\xd2\x6f\x70\xfe\x23\x3e\xc5\xda\x13\x3e\xc5\xf1\x06\x9f\x12\xf6\x06\x9f\x58\x0b\xbf\x90\xa9\x71\x2e\xb9\x64\x16\xa8\x33\x4a\xcf\xc5\xdc\x1c\xe2\xd2\x52\xf6\x1c\x1a\x8d\x7b\x73\xf6\xb0\x1e\x75\xb6\x82\xde\x93\xb0\x26\x9e\x5e\x13\x16\x3e\x57\x5d\x8b\x53\x53\x25\x80\xe3\x4f\x00\x00\x00\xff\xff\x71\x9b\xc0\xf7\xb0\x07\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\xb1\x6e\xc2\x30\x10\xfd\x17\xcf\x99\xa8\xda\x81\xad\x42\xea\x06\xad\x5a\x31\x21\x86\x8b\x73\x50\x0b\xc7\x8e\x7c\x67\x90\x85\xfa\xef\x55\x28\x24\xa1\x44\x4d\x89\x48\x13\x75\x44\xdc\xd9\xef\xf9\xde\x7b\xb9\xc5\x5e\x48\x6b\x88\xc1\xb0\x18\xaf\x40\x13\x46\x42\x99\xcc\x33\x89\xf1\x62\x2f\x0c\xa4\x28\xc6\x82\x50\xaf\x44\x24\x38\x64\xf9\x2f\x48\x12\x87\x44\xe2\x23\x2a\x0a\x0c\xee\xa6\x40\x8c\xae\xa6\x6a\x19\x95\xc7\x70\x51\x65\x3d\x1f\x6f\x59\x46\x22\x83\x00\xb1\xc6\x02\x01\x31\x30\x4e\x3d\x43\xac\xb4\xe2\x90\x5f\x60\xcd\xa9\xa8\xb8\x61\xe5\x8d\x64\x65\xcd\x01\x48\xc9\x82\x9d\x6f\x47\xc2\x53\x03\x7e\x45\x73\xfa\x06\xbe\x68\x2e\x1b\x63\x6b\xf5\xa1\xab\x99\xd5\x56\xe1\xae\x3b\x3e\x1b\x0c\x15\x54\x81\x91\xee\x46\x67\xe3\x60\xeb\x60\x8d\x4f\xb6\x99\x52\xa5\xb9\x6f\x56\xb1\xb6\x72\x33\xf3\x69\x5c\x1d\x96\x57\x86\x47\xf7\x0f\x55\x76\x68\xd0\xad\x43\x13\xb3\x6a\xe3\x8d\x98\xb5\x77\x51\xa3\x00\x1d\xa6\x76\x8b\x17\x22\xec\xd9\x41\x25\x3e\xe9\x9d\x43\xc3\x6f\x99\x35\xd4\xac\xaa\xea\x01\xbd\xbf\x3d\x7d\x61\x7e\x3c\xfe\xf3\x73\x8c\x69\x94\xb5\x24\x07\x33\x88\x5c\x49\x2f\x1a\x4c\xfd\x08\xa4\xc3\x44\x71\x8d\x09\xca\xe7\x70\x28\xed\x16\x5d\x78\x05\xc6\x4e\xdd\xd2\x79\x0e\xc4\xa0\xc1\x48\xfc\x5f\x41\x00\x49\xd2\x79\x0a\xb4\x87\x7f\x13\x7d\x95\x3b\xc3\xbc\x4e\xcc\x83\xb1\xda\x3b\xd0\xc4\x26\x8d\xfa\xea\x79\x2b\x28\xf1\xa6\x97\x1b\xd8\xd0\xb3\x39\x20\x3d\xbb\x99\xad\x79\xcc\xf3\xf0\x1e\x92\x40\xae\x30\x73\x5e\x30\x39\x59\xe6\xaf\x43\xaa\x35\xad\x2b\x3e\x98\x8a\x7e\xb9\x11\xdc\xc0\x24\xcb\xcf\x00\x00\x00\xff\xff\xb6\x83\x83\x7a\xd2\x0c\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x09\x72\x23\x2b\x0c\xbd\x92\x56\x10\xc7\x61\xbd\xff\x11\x7e\xf5\xf2\xbd\x4c\x27\xc4\xe0\xb4\x2b\x95\xd8\xae\x29\x4f\x14\x30\x88\xf7\x90\x1e\x6a\xe2\xc0\xc0\x81\x80\x92\x03\x10\x76\x08\x0e\x01\xaa\x53\xef\x00\x80\xd5\x67\x40\x98\x7c\x05\x00\x71\xdc\xf6\x17\x3a\x03\xc7\x80\xec\x2d\xa9\xa1\xac\xe3\x24\xf5\xab\x95\x8a\x70\xc9\x9b\x15\xa5\xee\x56\xa9\x3e\x8a\xfa\xcd\x9a\xc3\x66\xc5\x1a\x34\x55\xd1\xd5\x4a\xec\x36\x2b\x51\x20\x2b\x2e\x6d\xd6\xe0\x77\x2b\x17\xcb\xbe\xec\xd6\x16\x37\x2b\x9b\xc7\x18\xda\x66\x65\x5f\x36\xab\x42\x85\x5c\x9a\x6c\xd6\x0a\x9b\xd5\x15\xcb\xa6\x21\xae\x56\xe1\x7d\x66\x96\x23\x27\x91\x6d\xbe\x12\xda\x66\x0d\x54\x01\x4a\xaa\xab\x55\x81\x76\xab\xb2\x65\x49\xbc\x59\x75\xf7\x22\xd4\x82\xca\x19\x36\x6b\x92\xcd\x9a\x88\x8d\x89\x68\xb5\x3a\xde\xbd\xc8\x21\x4b\xcb\x82\x9b\xd5\x76\x8f\x8b\x79\x66\x8e\x79\xb3\xb6\xa2\x5e\xd3\x82\x99\x41\x2b\x9a\x58\x0c\x50\x97\x35\x6e\x7e\xc3\x72\xb3\x2b\xac\x2b\x9c\x17\xb4\x0d\xd8\x01\x1b\x02\x06\x30\xb0\x05\xed\x0b\x5a\x5f\xbd\xd0\x05\x70\x40\xb0\xf4\x0d\x14\xd6\x6f\x78\xae\xbf\xae\x6f\x87\xe0\xbd\xa9\xd3\x04\x70\xe3\x05\x6a\x3c\x7a\x11\xdb\x0f\xf6\x22\xc4\xd5\x8b\x75\x6f\xa1\x81\x11\xea\xf6\x36\x5c\xf6\xda\xda\x07\xd7\xb6\x7b\x8b\x80\xc0\x01\x1a\xdf\x7a\x5d\xf4\xe0\x35\xa1\x9d\xe3\xf5\x32\x0e\x86\x8e\x47\x31\xe5\x7b\x8f\xfe\xef\xf1\xff\xe7\x80\x67\x24\x74\xf4\xcc\xf0\x1c\xcf\x3e\xf5\x28\xc5\x7f\x3c\x1a\xf1\x20\xf2\xd1\x83\x76\x12\x36\xdf\xc2\xc8\x1c\xeb\x61\x5f\x31\xb8\x83\x17\xcc\xe9\xfb\xbd\xb8\xcc\xa2\x35\xbe\x5f\xf3\x91\x6f\x1d\x69\x3b\x80\x25\x5b\x38\xae\x42\xa9\x3f\x17\x4b\x84\x42\x47\x2c\x6b\x3e\x78\x21\x74\xc2\x9e\xba\xcc\x42\xd0\xdf\x61\xc9\xd7\x35\xbf\xdb\x4b\xb4\xf7\xf8\x1c\x01\x91\x63\x7c\x17\x0b\xaf\x8d\x07\xb8\xe4\xec\xd9\x78\x20\x31\x1d\x3c\x50\x80\x1f\xcc\x21\x07\x72\xe0\x90\x42\x3d\x7a\xb1\x5a\x5e\x80\x43\x17\x9b\x20\xf1\x38\x5b\x77\xcc\x8f\x1a\xe2\x89\x8c\x4f\xea\x9f\xce\xea\x9a\xe1\x38\xeb\xa6\x27\xce\x3a\xb3\xfb\x71\x31\xd7\xc9\x31\x7f\x3a\x93\x73\x98\xb6\x20\xf4\xe9\xea\x14\xd4\x03\xb3\x5c\x38\xea\x13\x57\x4f\xda\x07\xdf\x81\x31\x81\xf0\x74\xec\xf2\x70\xcc\x7f\x5e\x7f\x70\xfe\x23\x7c\x62\x1f\xf2\xc8\x0c\x18\x46\x5a\x3b\x06\x0d\x41\xa1\x86\x85\xc9\xeb\xc8\x74\x7b\x02\x7e\xe6\x34\x0d\x3b\xa2\x20\xf0\xe2\x3d\x4c\x70\xcd\xf0\x0b\x17\x56\xa6\x78\x03\x4e\xa8\x3b\x83\x8c\xfe\xc9\xdf\x1a\x1b\x5e\x7f\xbb\x9c\x9b\xb9\x6c\xbf\xe7\xba\xfd\x6f\x6f\x77\xa3\x0c\x16\x3b\x81\x21\xee\xbd\x54\x6e\xbf\xf3\xca\x41\xc5\x8f\x79\x31\xe2\x25\x8a\x2d\x2c\xb7\x44\xea\x15\xc6\x38\x31\xb6\xf6\x28\x9a\x16\x66\xae\xa3\x95\x5b\x8f\x46\xb9\x85\xd1\x12\x45\x4f\xc6\xc6\x3b\x22\x7c\x12\xbb\x86\xd6\x63\x8e\x5d\x2f\x61\xf0\x45\x79\xc2\xd7\x1c\x0e\x96\x3b\x1c\x0e\x11\xfa\x1c\x5e\xdf\x6e\xab\xc1\x8c\x22\xcb\xe8\x18\x21\x14\x93\x4b\xdc\x78\x23\xdb\x1d\xe3\x8a\xec\x03\xd1\x29\xfa\xd0\x41\x36\x5a\x99\x88\x4e\xf1\xfe\xfc\xff\x75\x74\x5a\x3e\x97\x9f\x9f\xe1\x09\x85\xca\xb5\x35\xfa\x2d\x3c\xe9\x54\x90\x46\xf0\x4d\xae\x87\x6f\xf2\x33\xf8\xa6\xf0\x0d\xf8\x0a\x1b\x21\x6e\xdf\x97\x96\xf3\x21\x42\xde\xea\x82\xc3\xb1\x9f\x8a\x02\xb5\x5f\x13\x21\x6e\xe7\x7e\xf7\x8c\x60\x8e\x01\xd9\xf5\xf4\x47\xf6\x33\xfa\x23\x87\x41\xfd\xb1\x7e\xa6\x5b\x0e\xbc\xb5\x66\xbf\xed\x94\xd6\x2c\x0e\x3a\x58\x17\x2f\x13\x58\x17\x8b\xa7\x6b\xcd\x52\xed\x85\x5a\xb3\x34\x7e\x46\x6b\x5e\x14\xc9\x5b\x6b\x3e\x38\xc6\x50\xbc\xaa\x99\x3a\x1c\xae\xc5\x4d\x70\xb8\xde\xd7\x7f\xbf\xe6\xf0\xce\x94\x06\xf6\x0c\x53\x42\x32\x69\x39\xa4\x37\x53\x1e\x1d\x63\xe8\x54\xd2\x8a\xef\x30\xa5\xd5\x74\xde\xa9\x44\x2b\x45\xf1\xf1\x8a\xeb\x9f\xc8\x2f\xb8\xe4\xf1\x4f\x57\x1c\x21\x4e\xe4\x17\x84\x34\x98\x5f\x56\x35\xb9\xfd\xf4\xd6\x11\x5f\xb6\x9d\xc2\x19\x4d\x3a\x38\x63\xb0\x09\x9c\x31\xd6\xb3\x75\x04\x12\xe4\xd7\xe9\x08\x24\xf4\xcf\x64\x07\xad\xe6\x90\xf0\x9d\x1d\x1e\x1e\x63\x44\x47\x20\x55\xd7\xe1\xf0\x7a\xe3\x69\x98\xc3\x8c\x30\xa3\x23\x90\x29\x3f\xc3\x14\xa7\xd1\xa5\xe2\xde\xd5\xcd\x87\xc7\x18\xd1\x11\xc8\x2d\x75\x98\x22\xd0\x1e\xd7\x11\x36\xac\x24\x4a\x94\x84\x31\xfe\xaa\x0c\x23\xeb\x8e\xe8\xac\xb8\xa4\x5e\x7e\x91\xfc\x70\x7e\x91\xeb\xde\x94\xf2\x70\x7e\xe9\x68\x0b\xbc\xfb\x77\xa8\x55\xa1\x22\xaa\x5f\x3e\x5b\x9d\xa9\x55\x25\xa8\x68\x26\xf1\x5d\xab\xfa\x90\x17\x87\xe7\xff\x77\xbc\xd0\x32\xa3\x2f\xb5\x4e\xe8\xcb\x77\xad\xea\x74\x8d\xe9\x52\x2f\x3f\xbb\x3c\x93\x9f\x5d\x1d\xcc\xcf\x13\x1a\xd3\x73\x7d\xa1\xc6\xf4\x12\xde\xb5\xaa\x1f\xab\x31\x0d\xad\xc3\x61\x5b\x54\xdf\x30\x87\xed\xfe\xfe\xef\x63\x1a\x73\xeb\xa9\xed\x19\xae\x58\xc0\xf2\x7e\x86\x3e\x32\xc6\x90\xca\x0c\x54\x3b\x5c\x09\x0b\xea\x8f\xa8\xcc\x17\xe5\x22\xfd\x53\xb9\x28\xb4\xce\xfd\x06\x8c\xf8\xc5\xfd\x86\x0f\xf7\x71\x24\x77\x7a\x2e\x8a\x26\x13\xb9\x68\xa8\xf5\x4d\x2e\x8a\xf6\x54\x7c\x21\x21\xab\xc1\xbb\x45\xfb\x5e\xb4\x8e\x9c\xc4\x2f\x79\x41\x84\xf9\xec\x4e\x37\x5f\x79\xf1\x40\x5c\x48\xdc\x79\x3e\x8b\x49\xbe\x78\x3e\xfb\x64\x1d\x3b\xb8\xd8\x5a\xd2\x3f\x56\xc7\x4e\xad\x77\xfe\xcc\x30\x53\xdf\xcc\x38\x58\xdf\xbc\xaf\x63\xcf\xa0\x77\x89\xd6\x7f\x0b\xbd\x5c\xb8\x87\x5e\xf5\x33\xe8\xb5\xf2\x0c\x7a\xfb\xd8\x95\x9d\xfa\xf9\x3a\x30\xbf\x75\xd7\x43\x63\x0c\x69\xf4\x52\x7b\xf1\xb5\xb4\x89\xfb\x2f\x58\x71\xf0\xfe\xcb\x45\xa3\x57\xc6\xdb\x9e\x0e\xb1\x49\x9e\xa9\x24\xbd\x59\x33\x3a\xc6\x10\x6b\x1a\x68\x87\x35\x0d\xc3\x04\x6b\x1a\xb5\xa9\xa7\x07\x4d\xee\xeb\xd3\xc3\x5c\x01\xb5\x40\x56\x57\xae\xfc\x0e\xe5\xf5\x0a\x46\x7e\xf0\x77\x13\x43\xca\x8e\x80\x3a\xf7\x13\x08\xf8\xc4\xfb\x09\xb9\x48\x23\x02\xfb\x2d\x75\xe6\x9f\x15\x1d\x08\xb1\xa3\x1f\x09\x69\x42\x3f\x12\xf2\x8c\x7e\x7c\xf2\xd6\xf4\x25\x8b\xbc\x79\xf2\xe0\x18\x43\x3c\x21\xea\xd4\x07\x89\x78\xa2\x3e\x48\xa4\x83\xf5\xc1\x7b\x9e\x00\x44\x74\xea\xc8\x47\x1f\x3d\x2d\xa9\x81\x40\xd8\x5c\x26\x71\x21\xf9\x46\x2d\xb4\xc4\x45\xb0\x6a\xf6\x86\xde\xd7\xda\x42\xad\x31\x5b\x11\xa8\x29\x35\x76\xd6\x82\x11\x94\x6c\x29\xe3\x72\xe2\x20\x00\x0a\xff\x05\x00\x00\xff\xff\xe4\xd0\x0f\x58\x2e\x45\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x41\x6f\xdb\x30\x0c\x85\xff\x8b\xce\x3e\x75\xd8\x0e\xb9\x6d\x01\x76\x4b\x37\x6c\xe8\xa9\x08\x06\xda\x7e\xe9\x84\xca\x54\x20\x52\x2e\x84\xa2\xff\x7d\xf0\xb0\xd8\xed\xac\x74\x69\xe6\x36\xce\xd1\x30\x45\xbf\xcf\x24\x9f\x78\x7d\x6f\x2a\xcf\xa2\xc4\x6a\x16\x1b\x72\x82\xc2\x58\xde\x46\x15\xb3\xb8\xbe\x37\x4c\x0d\xcc\xc2\x08\xdc\xc6\x14\x46\xd3\xb6\x7b\xa2\xba\x0e\x10\x31\x0f\x45\x1f\x50\x91\x73\x08\xcf\x86\x24\xc8\x97\x70\xe9\x87\x98\xd2\x7b\x67\x1e\xd6\xc5\x2e\x80\x49\x6d\x8b\x1f\xb2\xf5\x2c\xbe\xcb\xe5\xa3\xfe\x11\xb2\x2e\xcc\x96\x12\x95\x0e\xbd\x48\x51\x52\xac\xa2\x52\x69\x9d\xd5\xd4\x9d\xf7\xbc\x0b\xea\xbf\xb1\x89\x5c\xa9\xf5\xfc\x5b\xc8\x00\xaa\x21\xbe\x84\x73\xa4\xb1\x21\x51\x3c\x95\xd8\xe7\xe8\xdf\x65\xb2\xfc\x1b\xa2\xb5\xb8\x9b\x5a\xfe\x50\x83\xd2\xf9\xea\xf6\x32\x36\xe5\x63\x81\xd1\xb2\xbe\xbb\xc8\x50\x82\x11\x6e\xd2\x47\xfd\xd4\x9d\xca\xc3\x52\xe3\x23\xeb\xd3\x5c\x17\xef\x3f\x4c\x09\x7b\x7c\x53\x32\xee\x56\xcf\x14\xe3\xaf\xb6\x83\xae\xc6\x55\x9d\xba\xf1\xfe\x63\xc2\x02\x6a\x9b\xfb\xd3\x43\x48\x40\xe5\x5b\x84\xf4\x8d\x14\xf9\x92\x8c\x90\xaf\x04\xe1\xab\x23\x9e\xd3\xb4\x0d\x40\xb7\x48\x8f\xec\x22\x29\x24\xdb\xa7\xa2\x3e\xd0\x0d\x3e\xfb\x3d\x13\xd9\x92\x8b\xc8\x27\x3a\xf5\x40\x46\x39\xac\x3b\xad\x5c\xc9\x3e\xc3\xc9\x38\xea\x69\xb0\x46\xaa\x7f\x92\x2c\x7d\x8d\x73\x93\x5d\xc5\x10\xc0\xfa\x3d\x73\x11\x65\xd4\xcf\xc9\xdf\x87\xbb\xf3\x80\x8e\x3a\x90\x6f\xea\xea\x1c\x6f\x81\x2f\xa0\x13\x38\x54\xd9\x0a\xce\xc7\xd1\x0f\x9d\x7d\xaa\xeb\xd1\xf0\x9f\x1f\x45\x40\xe3\x5b\xbc\x3a\xc8\x1b\xad\x46\x25\x39\xe2\x0a\xa7\xde\x8d\x5e\xfd\xde\xe9\xe2\x96\xbb\xcd\x23\xc3\x18\xd0\x90\x65\xd4\xcb\x7d\xdb\xc9\x7c\x5c\x3d\xe6\x56\x9d\x69\xd7\xab\xe3\x49\xd7\xbf\x02\x00\x00\xff\xff\xb3\xf3\xeb\x3d\x88\x0d\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

