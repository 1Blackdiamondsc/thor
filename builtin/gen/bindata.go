// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x41\x6f\xf2\x30\x0c\x86\xff\x8b\xcf\x3d\x7d\xdf\xad\xb7\x1d\xd8\xb4\xc3\x76\xd8\x15\x21\x94\x36\x06\x45\x2a\x0e\x8a\x9d\x8e\x0a\xf1\xdf\x27\x3a\x20\xa3\xb4\x10\x46\x51\xd9\xb1\x4a\x62\xbf\x7e\x6c\xbf\x1d\xaf\x21\xb7\xc4\xa2\x48\x20\x15\xe7\x31\x01\x43\x4b\x2f\x0c\xe9\x78\x0d\xa4\x16\x08\x29\xb0\x99\x13\x3a\x48\x40\xaa\xe5\xf6\x5b\x69\xed\x90\x19\x36\x93\x64\x7f\x85\x94\x98\x12\xdf\x71\x25\x90\x80\xf5\xd2\x0c\xd1\xfe\x78\xa9\x2a\x95\x15\x08\xe9\x4c\x15\x8c\x09\xb0\x28\xc1\x37\x2f\x2a\x33\x85\x91\x0a\x52\x28\x0d\x7e\x86\xb7\x33\x4f\xb9\x18\x4b\xb0\x49\x7e\xea\xde\xbd\x3e\x15\x3e\x8d\x50\xee\x70\x61\x4b\x3c\x52\x1d\xa5\x8c\x2c\xed\x2f\x5d\xd2\xd7\xe0\x1a\x72\xcf\x8c\xe3\x21\x80\xdd\xdc\xe8\x17\xbc\x28\x3b\xb3\xb6\xa8\xd3\x76\x17\xd4\x76\x98\x55\x82\xfc\xff\x5f\xc7\x61\x1d\xf3\x6e\x1c\x9a\x55\x3e\xff\xd5\xf6\xbc\xf2\x88\xb4\x75\x8c\x3a\xae\x4b\xf7\x97\x1e\xb3\x89\xf4\x60\xee\x11\x8d\xfb\xe3\xd4\x42\x6e\x43\xdd\x87\xb7\x1c\x16\x75\xb4\xc2\xdc\x8b\x75\x0f\x34\xc8\x31\xd3\x30\xef\xb2\x98\xc2\xb0\xd4\x83\xdd\x61\x34\x58\x8f\xbe\x6d\x8b\x1e\x2e\x19\x8d\x24\xdb\x4a\xce\x19\x8f\xca\xb7\x08\x07\xb0\x1f\x1c\xae\x65\xbf\xf8\x97\x06\x60\xd3\x28\xf6\xd3\x33\xf0\x03\x03\xa5\xf5\x5d\x7f\xca\xd7\xaf\x7d\x7f\x23\xd6\xdc\xd2\x27\xdd\xa7\x51\x5f\x84\xa0\xc8\x52\xb5\xb0\x9e\xdb\x28\x18\xd2\xb8\x42\xbd\x9f\xce\x08\x28\x87\x17\xbb\x60\xd7\xd4\xff\x5d\xf9\xee\x1c\x4b\x24\xe9\x5d\x61\x48\x76\xf0\xe9\xe3\x7c\x93\xaf\x00\x00\x00\xff\xff\x56\x0d\x79\xbc\x05\x0b\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x09\x6e\xeb\x3a\x0c\xbc\xd2\x50\x5c\x44\x1d\x47\xeb\xfd\x8f\xf0\x21\xcb\x4e\x5c\x67\x2d\xf0\x3e\x5a\xa3\x45\x3a\x1e\x51\x1a\x6e\x62\x0c\xf3\x11\x68\x30\x40\xd8\x08\x46\x40\x2e\x1a\x8d\xc7\xfe\x63\xe8\x30\x20\x20\x1b\x00\x56\x08\x99\x71\x30\x74\x4b\x21\x39\x91\xcc\x35\x05\x1a\x1d\xc6\x21\x21\x85\x86\xbe\xd0\x5e\x16\xca\x6d\x48\x6b\x43\x36\x94\x50\x17\xaa\x82\xd1\x52\x8e\x0b\xa5\xb1\xd0\xc8\x95\xa8\xb5\x65\x81\xa2\xec\x68\x62\xb3\x98\x74\xa1\x1e\x17\x9a\x4b\xe4\xce\x64\x0b\x2d\xf9\x40\x7b\xcc\x16\xc7\x85\x5b\x8b\xd4\x80\x8b\xdd\x1a\x4a\x0d\x7d\xd4\x85\xb6\xb4\xa3\x2c\x15\xde\xf7\xdd\x86\x2f\xb4\x55\x20\x49\xf1\x0d\x0d\xd8\xb5\xf5\x11\x42\x2c\x9c\x16\xca\xac\x51\xcb\xf4\x94\x63\x34\x2d\x2c\xa4\x9b\x7f\xa6\x4f\x6f\xe8\x44\xea\x30\x80\x0c\x79\xf7\x2e\x78\x8b\x81\x92\x4d\x3b\x5a\xd4\xa6\x1d\x81\xd2\x95\x97\x90\x88\xcc\x69\x46\x2d\x6c\xef\x26\xcb\x91\x68\xbe\x1b\x7c\xdf\x75\xd8\x65\x57\xda\xa2\xf8\x72\x57\xa3\xb9\x2b\x70\xb3\x40\x14\x9f\x9c\x9b\x20\xb4\x31\x0f\x56\xc8\xd7\x7d\xb8\xbf\xd9\x47\xa2\xdf\xd5\x25\x26\x25\x75\xd9\x72\xf0\xaa\x33\x90\x4d\x8d\x2e\xd8\xd4\x0a\x7c\xfb\x9c\x68\xfa\x40\x43\xc2\x5c\x3b\x73\xd8\x79\x31\x1c\xf3\x0d\x28\x3d\xf7\x08\xc5\xf1\x5c\x8f\xeb\x59\x4f\x0a\x57\x3d\xd9\xbe\x8d\xd6\x3a\xd3\x17\xd1\xa1\xaa\xbf\xca\x09\xf1\x7c\x3e\x63\x97\x5f\xf9\x5c\xc1\xa7\xd5\x01\xfc\xd4\x0f\x9a\xea\x99\x45\x5f\xe7\x8f\x13\x59\x82\x21\xac\xfd\x20\xc2\xd3\x82\x76\x39\xdb\xe3\xfe\xad\x5f\x5f\xd8\x8b\xb6\x9d\x4f\x27\x1b\x09\x9b\x6d\x5c\x2d\xcc\xfe\x74\x54\xfb\xe4\x1d\x55\x34\xa3\xb1\xb2\x48\xc9\xe9\xde\xe1\xa6\xfd\xa3\xc7\x21\xac\xc8\x41\xb0\xad\x38\xa2\xe7\x0c\x76\xda\xce\x1e\x1d\x5c\xb6\xbc\x23\x84\x7c\xad\x8f\x50\x4d\x33\x78\xd0\xc1\x28\x7e\x66\x28\xe6\x73\x58\x9d\xd9\xa2\x4f\xce\xcf\xfc\x88\x91\xf8\xec\xce\xac\xd0\xa8\x78\xae\xfa\xe8\x92\x1e\x5e\xe9\x3e\x75\xf3\x9b\x7e\x97\x49\xda\x75\x3f\xe9\x34\xd3\x1b\x1e\x96\x8d\xf0\x9d\x5f\x98\xaf\xf9\x75\xf5\x0b\x8b\x7c\xf2\x0b\xa9\xde\xec\xe9\x8f\xfe\xf9\x22\xe6\x7b\xdf\xff\x7b\xf5\xe5\xda\x3f\x1e\xd4\x57\xfe\xac\x7e\x31\xdb\x8f\xfc\xf1\x27\xca\xe3\x28\x3d\xd6\x98\x2b\x07\xf1\x36\x44\x9d\x6a\x80\x65\x97\x9c\x0b\xd7\x22\x3d\x36\x0d\x54\x94\x93\x17\x09\xc5\x7c\x76\xf5\x11\x3d\x6b\x8e\x4d\x88\xfa\xe1\x9d\x73\xa7\xca\x41\xb1\xba\x1a\x5e\x65\xdb\x7e\x53\xff\xcf\x35\x26\x9a\x3e\x78\x53\x2c\xbf\xf5\x26\xcd\xff\xd3\x4d\xcd\xe6\xc3\x79\x53\x50\x62\x5d\x7f\xf7\x37\xe9\x83\xe2\xdb\xd4\xc3\x7f\x9c\x61\xd2\x3f\xd5\x97\x8c\xf7\xf5\xc5\x29\x2c\xec\xea\x95\xe7\xca\x8f\x59\xcd\xed\xac\xdc\xff\xb9\x72\xff\xa4\x5c\x0d\x1f\x94\x6b\xa4\xf7\xb5\xb5\x22\xf6\xfe\xb3\x62\xcb\x8d\xf3\xef\x43\xb6\xfc\xe9\xcd\x73\xa9\x8a\x3f\x3d\x8b\x3d\xcc\x7f\xd7\x98\x18\x97\x7f\x75\x0b\x1e\x16\xed\xe7\xfc\x73\x61\xfa\xe4\xaa\x83\x34\xcd\x5b\xd3\x5c\xe6\xad\xf9\xc0\x0a\x93\x35\xef\x99\xc9\xdc\x78\x63\xf2\x1c\x0b\x3d\xf6\x4a\xf9\xb3\xaf\x8f\xef\x01\x2e\xf3\xf9\x55\x7f\xb0\x97\x55\xc2\xb3\x82\xee\x55\xb2\xcd\xbd\x6b\x26\xbe\xd5\x8d\x88\xd3\x7d\x22\x36\xd8\x77\x31\x8b\xb8\xce\x8f\xd7\x98\x45\xd2\x2f\xef\xa8\xf8\x33\xfe\xfe\xa0\x63\xde\x51\x69\x8c\x98\x95\x84\x25\xd5\x56\xa5\x0c\xcb\x49\xb4\xc4\xd6\xc4\x13\x2b\x79\xa9\xe4\x01\x35\xb4\x5c\x2d\xa4\x32\xcc\x1a\x9b\x7a\x69\x8c\x8c\x1a\x3d\x1c\xf3\xf5\xab\xd9\x3a\x5f\x3a\xda\xb9\xc7\x01\x99\x4c\x2d\xc4\x1c\x73\x0c\x0c\xf5\x00\x94\x4a\x99\xa8\x65\x2f\x3d\x51\x94\x01\x1e\xa9\x34\x91\x9a\x46\x55\xc4\x14\xd4\x46\xa3\xd2\xb2\x52\xea\xb9\x0b\xb8\x7b\x2f\x9c\x63\xf6\x64\x36\x80\x90\xfe\x0b\x00\x00\xff\xff\x81\x61\x8f\x4d\x42\x0f\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x41\x6f\xdb\x3c\x0c\xfd\x2f\x3a\xfb\xd4\x0f\xdf\x30\xe4\x96\x16\xdb\x4e\xc5\x80\xb5\xb7\xa2\x28\x68\x9b\x29\x04\xc8\x94\x21\x51\x4e\x8d\xa2\xff\x7d\x48\xea\xd8\x4e\x27\xc5\x6a\xe2\xd9\xde\xad\x40\x49\x85\x8f\x7a\x24\x1f\xe5\x87\x57\x91\x69\xb2\x0c\xc4\x62\xc5\xc6\x61\x22\x24\x95\x8e\xad\x58\x3d\x3c\x26\x82\xa0\x40\xb1\x12\x04\x2c\x2b\xfc\x81\x7c\xaf\x19\xd4\x9d\x2b\x4b\x55\x8b\x44\x68\xc7\x8d\xe9\xeb\xc1\x52\x24\x82\xeb\x72\xf7\x97\x93\xc4\x57\xff\x7f\x11\x6f\x8f\x89\x28\xa1\x86\x54\xa1\x58\x6d\x40\x59\x4c\x84\x65\x60\xbc\x75\x0c\xa9\x54\x92\x6b\xb1\x12\x95\xc4\x6d\xe7\xbb\x71\x94\xb1\xd4\x24\xde\x92\xc8\xf8\x0a\x1c\x8a\xc7\xb2\x91\xf4\x1c\x19\x4e\xe9\x0c\x0e\x86\xd3\x78\xb7\xf1\xb4\x3f\xfa\x64\x30\x93\x58\xa1\xe9\x8e\x80\x3c\x37\x68\xed\xfe\x84\x83\x15\x14\xda\x11\xfb\x33\xd6\xd8\x40\x59\x1a\x5d\x05\xb0\x59\x97\x65\xbb\x33\xdb\x03\x52\xad\x55\x24\x40\xd2\x74\x30\xfa\x64\xd6\xdb\x9f\xdf\x41\xf2\x00\xf4\xb0\xe6\x1a\x14\x50\x36\x78\x43\x53\x32\x86\x67\x25\x72\x98\x39\x99\x26\x36\x90\xf1\xda\x9f\xdc\x1e\x7b\x08\xb7\xb7\x60\xd9\x4b\xb2\x0e\xa7\x45\xbe\x69\x8e\x6c\xad\x3b\xb4\x63\x53\x65\x0c\x5c\xac\x2f\xae\x1a\x36\x40\x76\x83\xe6\xbb\xd1\xc5\x01\xfd\xac\x25\x14\xce\xcb\xc6\xe8\x62\xd2\x7c\x2c\x34\x0f\xf1\xfc\xb0\xbb\xa2\x95\xc3\xb4\xbf\xeb\xec\xfe\x1e\xe1\x83\xfd\x25\xc7\x4c\x16\xa0\x6c\x4c\x73\xf9\x3a\xe6\x50\x0a\x75\xeb\xe8\x04\x67\xa0\xd4\x40\x76\xdb\xc6\x7e\xa3\xc9\xba\xa2\xdc\x85\xb1\x56\x4a\x6f\x67\xea\xf2\x41\x5a\x05\x46\x54\x07\x36\xa2\x78\xde\xc1\xde\xb9\x34\x72\x8a\x4d\x5c\x39\xd1\xf7\x5a\x0c\x0f\x8b\x06\xea\xa4\x23\x23\xc4\xd7\x27\xbd\xa5\x81\x70\xd3\xf7\x0b\xf9\xb9\xf1\x5f\x49\xda\xde\xd7\xb2\x07\x79\xb0\xe0\xfa\x36\x06\x73\xe9\xe3\x69\x72\x24\x3a\x75\x85\xa6\xfe\x05\xec\x03\xdd\xb3\xc4\x97\x52\x1a\xd8\xc3\x39\xb2\xfb\xef\xca\xa3\x3d\x7b\x35\x3e\x0f\x11\x06\x32\xd9\x05\xfc\x7c\x92\xb8\x9e\x52\xed\x9f\xf1\xef\xb4\xa2\x75\x9e\xfb\x5a\xd1\x64\xa3\xcd\xd6\x45\xaa\xd5\xf4\xeb\xd6\x99\x93\xcd\x3f\xb6\x16\xca\x92\x31\xd5\xde\x92\x96\x46\xcf\x25\x7c\x7b\xc1\xcc\xb1\x9e\x23\xfd\xe3\x31\xc9\x2b\x32\x7b\xb9\x0e\x4a\xd5\x5e\xdd\x3f\x1b\xc4\xfc\xac\xfb\xb8\x6c\x05\xc6\xc5\x5c\x40\xe8\xa1\xe9\xda\x19\xda\xa7\x66\x59\xcf\x06\xb3\x85\x75\xb9\x08\xbc\x8c\x91\x1f\x65\xe2\x24\x2b\xd6\xe5\xa0\x23\x04\x56\x84\xbe\x8a\x96\x57\x71\xea\xaa\x99\xe5\x0b\xd1\x58\x21\xb1\xdd\xdf\xbb\x4b\xa4\x7c\x40\x91\xc3\xe9\x25\xd0\x60\x01\x92\x76\xb2\x60\xc2\xe2\x1d\x55\x92\x77\x50\xb3\x85\xaf\xbe\x9f\x40\x3b\x54\xef\xfb\xff\xdf\xeb\x6b\x9c\xe3\x49\xe5\xbc\x3d\x60\xb1\x73\x19\x48\x53\x5d\x68\x67\x7d\x57\x27\x29\xc7\x17\xcc\x0f\x39\x88\xee\x73\x01\xbf\x13\x6d\xaf\xf5\x68\x82\x88\x68\x83\x01\x97\xe1\xb6\x18\x70\x8c\x6b\x93\xde\x06\xd9\x58\x63\x85\xc4\x9f\xc8\xea\x07\xac\xf1\x69\x3d\x76\x8c\x7a\x80\x3c\x9e\x8e\x8b\x0d\x38\xec\x34\xd4\x14\xd6\x9e\xa6\x70\x26\xcc\x73\xd9\x7e\x1c\xb0\x56\x79\xf0\x7b\x48\xd8\x2b\xee\x2b\x8a\xef\x49\x6c\x0c\xb0\x27\x9e\xff\x03\x0e\xa1\xfd\x30\x00\xef\xa9\x02\xe5\x02\x4f\x60\x8d\xc9\x7d\xb7\x2e\x8e\x02\xe9\x84\x94\x08\x78\x84\x95\xc5\x45\xc0\xde\x5b\x07\xa8\x3f\x80\x3d\xfe\x0e\x00\x00\xff\xff\x0f\x48\x18\xcd\xf5\x1e\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x09\x76\x2b\xb9\x0a\xdd\x12\xb3\xd0\x72\x34\xee\x7f\x09\xff\xa8\xa4\x8a\x6b\x70\x6c\x27\xfd\x7e\xbf\x7e\x39\x9d\x4e\x88\x0a\xc1\x05\x5d\x40\x65\x83\xf1\x25\xa0\x64\x00\xc2\x86\x60\x08\x18\x50\x83\x71\x5f\xff\x0c\x1a\x18\x00\x41\x32\x00\x60\x05\x41\x33\x06\x29\xd8\xba\xa0\x23\xca\xf6\x8c\x69\x70\x30\x06\xeb\xb5\x36\xe0\x29\x8d\x79\x49\xa3\xb6\x14\xf2\x94\x12\xe9\x94\x22\xc6\x52\x9a\x2e\xa9\xae\xb5\xe8\x68\x50\x6b\x9d\xd2\x90\x96\xb4\xb7\x9c\x93\xf5\x29\xf5\x3a\xa5\x84\x64\x29\x41\x9c\xd2\x2c\x4b\xca\xd9\x03\xed\x1a\x6a\x59\xd2\x40\x28\x45\xa6\x06\x86\xb5\x96\x91\x4b\x53\x0b\x53\x4a\x71\x49\x29\x49\x0a\xa6\x53\xaa\x34\xa5\x6a\x54\x18\xc9\xa7\x34\x84\x29\xb5\xec\x8c\x21\x2d\xbd\x71\x69\x08\x90\xc0\x89\x27\x3a\x9c\xdb\x92\x2a\x16\x2a\xb0\xf4\xd6\xe5\x85\x97\xd4\x92\x9b\x6d\x52\x41\x9c\xd2\xc8\x8d\x0a\xf7\x89\x8e\xc8\xf2\x22\x6a\xf5\x98\x65\xea\x15\x5b\x7a\x63\x96\x8c\xb9\xd0\x94\xfa\xd2\x90\x22\x68\x2c\x39\x4f\x69\x82\x25\x2d\x59\x0a\x41\x9b\xd2\xb2\x7c\xcb\x54\x9b\x0a\xae\xb5\x75\x45\xa8\xb0\x14\xf0\x36\xed\x55\xf4\x25\x95\xca\xa5\xa4\x74\x8e\x7c\xf5\x88\xac\x65\xa2\xae\xb4\xa2\x59\x53\x15\x2a\x3a\xf1\x55\x5e\xf6\xd6\x0c\x9e\x4a\x5e\x7a\x6d\xe9\xad\xd5\xa8\x55\x9e\x96\x69\x5c\x1e\x37\xed\xaa\xad\x4d\xcb\xb4\x2c\xdf\x5a\x88\x9d\x43\x9d\x1e\x6b\x5b\x36\xf4\x16\x00\x62\x9f\x52\x83\xa4\x41\xf3\xc8\x5a\x87\x5e\x35\xb3\xa0\x0e\x8b\x07\x3e\x0f\xe9\x26\x89\x63\x3d\x45\xb5\xb1\x5e\x40\x31\x82\xe3\x38\x15\x04\x80\x53\xe2\x10\x47\x7c\xa1\xf3\x43\x53\xb2\xab\xa6\xd4\x36\x4d\xed\xa1\x69\xe8\x70\x70\x52\xf2\x4d\x2b\xa0\xb3\x0f\x1b\xf0\xb1\x43\x44\x05\xdf\x76\x5d\xbf\x8f\x27\xd8\x79\xe8\xd6\x3c\xd6\x23\xcc\x1d\xdb\x76\x1e\x9c\x60\x3c\xcf\xdb\xff\x77\x2b\x11\xb0\xd2\xd8\x57\x61\x7e\xc5\xed\xbf\xb1\xe3\xd0\x8b\x1d\xcd\xa7\x16\xc2\xb0\xb4\xb0\x6f\x16\x0e\x9b\x36\x2d\x83\x02\x10\x00\x12\x30\x46\xb4\xb3\x85\x43\x73\xa4\xa9\xfb\x5b\x4c\x88\xe1\x82\x09\xc9\xf8\x1d\x0d\xd2\xe2\x11\xe0\x8d\x6d\x14\xcd\x80\x84\xc7\x53\x66\xfd\x88\x3d\x2a\xea\x07\xf8\x93\xdd\xf0\xf7\xf8\xed\x5e\x08\x56\xb7\x08\xef\x4f\xbb\x3e\xcf\x83\xda\x8f\xab\xa2\x5f\xfd\xc9\xf4\x7c\x0f\x47\xb4\x2d\x82\xfb\x7e\x41\x6c\x68\x1a\x31\xdc\xb5\xe5\xfe\x29\x3a\x17\x6d\x20\x13\x29\x8f\x7c\xb4\xae\x85\x7f\xa8\x2f\x72\x3e\xe8\x63\xb8\xd9\xf7\xb1\xb7\x31\x1d\x2d\x63\x96\x8b\x26\xe6\x62\x08\x99\xe4\x78\x36\x7a\x8f\x10\xf1\x98\x69\xdf\x46\x9b\xb5\x7e\x1a\xed\x9b\x6d\x99\x8e\x91\x67\xa7\x5f\xe4\xe8\x45\x47\xba\xfa\xf7\x39\x52\x99\xf1\xa8\xa9\xc4\x1f\x65\x71\x66\x3d\x3e\xdd\x7e\x9b\x9f\x33\x03\xc0\xc6\xf7\x43\xb5\xf7\xaf\x7d\x52\x3b\xec\x23\x58\x2e\xfb\x08\xc3\x0b\x2b\xab\xd5\x63\x9c\xcf\xeb\x3e\x8e\xb9\xe8\x2d\xbf\xbf\xf3\xee\x18\xa9\x13\xbe\x12\x6e\xf8\x6e\x2c\x5d\x8b\x1d\x57\xf9\xcf\xfc\x3b\x73\x89\xa4\xfc\x8b\x8c\x6a\x10\x8e\x3a\xca\x35\xbf\x87\x05\x5f\x75\x69\x5f\xd5\xae\xfc\x2a\x5d\x5e\xd8\xd9\xf0\x75\x1c\x08\x6d\xd4\xa6\xc1\xb8\x5b\xa5\x5a\x15\x45\xbe\x2a\xc7\xd3\xb8\x28\xf1\x53\x5b\x1b\x1d\x73\x53\xf9\x19\x3f\x23\xb4\x99\x1b\xfb\x2a\xb9\xc6\xe7\x47\x19\xbc\x59\x8e\xd0\xf2\x69\xe7\x70\xb5\xef\x4f\x9d\x8a\x96\xd3\x71\x9f\x74\xcd\xcf\xcf\x39\xa9\x95\x63\x96\x6a\xb9\xe6\xdf\x0f\x34\xb5\x93\x4d\xfd\xda\xdf\xbc\x3d\x33\x0b\xc3\x6e\xe5\xa0\xc7\xf0\x5a\x1f\x5f\x66\x1a\x42\x0d\x33\xd3\x60\x74\x1e\xb6\x3d\x61\x3c\xfe\xc2\x35\xed\x39\xe8\xab\xb7\x5a\x67\x7e\xd8\xb5\xf1\x40\xe8\x6a\xa6\x2a\xe6\xd6\x03\xc1\x2f\xfe\x3d\xb2\x77\xf6\x3d\xcb\x96\x93\xb5\x3c\x3a\x29\xdb\x7c\xfa\xea\xbe\xf6\x9f\x64\xeb\xb9\x08\xa2\x78\x18\x9d\x92\x8b\x52\x94\xc1\x54\x4a\xa3\x57\x22\x70\x8d\xa0\x3a\xce\x4c\xc4\x08\xa1\x7b\xd1\xdc\xb0\x69\xcb\xad\x84\xaa\xb9\xa2\xf4\x80\x42\xa1\x62\x73\xe9\x5c\xeb\x98\x83\x0a\xf4\x90\x89\x22\x36\xcd\x04\x90\x8a\x97\x50\x38\x47\xd2\x38\x35\xbe\xe8\x35\x13\xeb\xc6\x41\x63\xc7\xad\xef\xda\xba\xbb\x03\xc2\x63\x22\xbb\xb1\xd4\x71\x3e\xb3\x0d\x99\xbd\x0f\xdd\xcf\xf6\xe8\x3d\x1f\xd9\x3d\x10\xd9\x67\x3c\xa0\x69\x0b\x08\x6c\x4f\xec\xf6\x38\x03\xfb\xa6\xcd\x83\x03\xe7\x95\x31\x81\x6e\xfc\x5c\x4c\x13\x70\xc7\x7d\x05\x9f\xea\xd3\xb9\x7b\xd4\xd9\x57\xbe\xf5\x66\x9f\x6f\x5c\xbe\xf3\xe7\x30\xa5\x7e\xf9\xe5\xc3\xfd\xdd\x9f\x27\xf5\x67\x78\xf9\xd5\x41\x7f\xe8\x6f\xbc\xf5\x47\x57\x7f\x33\xbc\xf7\x97\xf9\x6e\xd1\x3c\xd5\x4e\x38\xe7\xc0\x50\x4f\xfd\xc5\x73\x5c\xf6\xd9\xd3\x65\x20\xf3\x2d\x0e\xfa\x2d\x0e\xe4\x7c\xc4\x61\xa2\x42\x5f\xa8\xc8\x86\x0a\xbc\x43\xc5\x29\xbd\x41\xc5\x39\xdf\x51\xf1\x9b\x3d\x68\xa1\xb3\xf6\xa2\x4d\x25\x59\x68\x99\xa8\x3b\x72\x65\x2c\xe0\x16\xcd\xb0\xa8\x0b\x69\x15\xa5\x80\x2c\x55\xbb\x89\x13\x05\x86\x8c\x14\xaa\x4b\x2b\x4e\x0f\x2c\x9e\x79\xeb\x0f\x3f\x5f\x56\xbb\xb4\x26\x9d\x0f\x33\x53\xff\x72\x66\x7a\xbb\xd6\x8f\x5b\x0c\x7a\x7d\x99\x99\xa0\x4f\x3c\xbc\x67\xea\xc8\xcf\xa5\x31\xd2\xb5\xbe\x47\xc6\x91\x8b\x2e\x86\x88\x9a\xbe\xf8\x0a\x23\xc7\x33\x9e\x27\x9d\x83\x6d\x27\x2f\x3f\xb8\xf0\xc6\xcb\xec\x86\xe6\xac\x14\x07\xc3\xd3\x58\x49\xa0\xe2\x14\x61\x4d\xc7\xd1\xda\xc9\x9e\xfb\x2e\xfa\xc1\x2e\xe1\xb8\xcb\x98\xdd\x55\x9c\x23\x8c\xd8\xa8\x3e\xf7\xd1\x6f\xb9\xf6\x1d\x72\x3e\xba\xa4\x24\xaa\x41\xdf\x65\x14\xff\xe5\x8c\x4a\xb7\xfa\x7f\xcd\xa8\x74\x8e\xff\x3f\xc9\x28\xfd\xda\x55\xaf\xfd\x6d\xd2\xe8\x34\xba\x88\xb4\x75\x8d\xfb\x3a\xfb\x80\x1f\xf7\xdb\xa7\xfd\x2e\xe5\x05\x7e\xf6\x2d\x7e\xbc\x72\xf3\x8b\x23\x67\xd7\xfc\xe0\xc9\x79\x5f\x31\xd8\x72\x47\xd8\x3e\xe3\xcd\x54\xae\xe7\xe7\x86\x70\x0d\x77\x84\x43\x07\x6d\x56\x23\xd5\x82\x42\x8e\x3d\xa6\xd2\xdc\x63\x25\x23\x11\x2c\xa5\x94\xdc\xa4\x55\x34\x32\xc3\x96\x63\x69\x2a\x5d\x08\xad\x52\x6a\x29\xe8\xe0\x48\xfa\x23\x1c\x89\x8f\x13\x8d\xf4\xa8\xe2\xe7\x7e\xe5\x1d\x87\xee\xf7\xc0\x7f\x3d\xe3\xb3\xb7\x37\xf1\xc8\xe7\xfa\x7f\xcb\xf8\x13\xcb\xf9\xad\x5b\x7e\xc9\x0a\x65\x64\xfe\x5b\x56\xb0\xbf\x8c\x51\xa1\xdb\xfd\xde\x05\xa3\xc2\xf8\xc7\x59\xa1\xe8\x75\xbe\x2e\x26\xae\x37\x56\x28\x76\xed\xcf\x4a\xf0\x8d\xa9\xbf\xd6\x0d\xd9\xf9\xfe\xe7\x1b\xee\x58\x77\xd4\x6e\xfb\xd7\xc2\xf9\x81\x6e\x98\xd3\xc4\xa1\x77\xa6\x27\x48\xdb\xa8\x28\x1b\xd2\xbc\xb1\xc5\x98\x29\xd6\xe4\xe5\xb6\xf7\x59\xae\x5b\x97\x0f\x91\x26\x7f\xb8\x8c\xbf\x8c\x55\xfe\x15\xa1\xf4\x19\xab\x94\xfb\xfc\x77\x89\x50\x05\x7a\xd2\x8d\x3d\x89\xc0\xd6\xd5\xdc\x3a\x34\xf5\xd0\x39\x13\xa6\x9a\x35\xf6\x9c\xc6\xc4\xe8\xc9\x43\x8f\x02\x0d\x73\x48\x91\x5a\x73\xc9\xda\x04\x39\x42\x37\x77\xc9\xde\x42\xb2\x5c\x25\xa5\xe4\x3a\xbe\xd6\x5d\x2f\x8d\x5a\xbb\xf1\x0c\x03\x6e\xdc\x3a\x7c\x3d\xcd\x26\xb3\x36\x1f\xfe\x0a\x06\xe3\xa7\x0b\x17\xf1\x7e\xef\xfd\x71\xcf\xf6\xdf\xe3\x9b\x5a\xda\xdb\x79\x59\xf6\x79\x59\x45\x5c\xfa\x6f\x66\xe5\x17\xf3\xf2\x76\x8b\x83\xc2\xfc\xb4\x8b\x3b\xf0\xfa\xb4\x7b\xfc\x1e\xf1\x35\xde\xfb\x1b\xa7\x7f\x79\x16\xfd\xd6\x9e\xfd\xfd\xd5\xbf\x6b\xcf\x23\x33\x6f\x79\x7a\xce\x26\x74\x7a\xdf\xa5\x46\x88\x32\x6f\xee\xf6\x53\x31\x7a\xe1\x77\x73\xf4\xfe\x5e\x73\xce\x8b\x3f\xc8\xfd\x7f\x38\x41\xbe\xc5\xaa\xcb\xed\xfe\xf4\xc2\x59\x5d\xcb\xcb\xaa\x22\x91\x3f\x3b\xfd\xfb\x9b\xce\x33\x02\xf2\xc7\x4f\xff\x3c\xbb\xdf\x7b\x5c\x6e\xef\x0f\xae\x1e\x57\x7d\x5d\x47\x67\xdc\xf6\x9a\x3a\xdf\xf7\x3d\xab\xa3\xcf\xa6\x93\x7d\x86\x43\x00\xff\x41\x1f\x2d\xce\x3b\x73\xff\x57\xba\x68\x04\xbb\xdd\x1f\x9f\x91\x44\x08\xe9\x59\x17\x5d\x33\x97\xd2\x48\x1a\x21\x91\x45\x65\x6f\xa4\x49\xa5\x46\x4a\xa9\x29\xe4\xea\xde\x20\x64\xce\x14\x93\x61\xaa\xac\x8d\x35\x0b\x56\x2f\x8c\x4d\x9d\x5f\xdc\x35\x6c\xfe\xfa\xd9\x53\xb8\x78\xfa\x59\x5d\xc3\x73\x56\xfb\x7f\x3a\xaf\x11\xef\xef\x7f\x2f\xd1\x18\xa9\xf7\x83\xbc\x5e\x15\xe6\x52\x69\x1c\x47\x69\x32\x44\x92\xae\xe1\x39\x22\xfb\xe7\x35\x46\xd6\xfe\x21\xb6\x5b\x91\xdc\x7b\xb9\x9f\x33\x1d\x62\x79\x8b\x4f\x7d\xdb\x3f\xef\x2b\x9b\xbd\x3f\xbb\xfb\xe7\x48\xe6\x0c\xfc\xff\xf0\xf9\xed\x09\x25\x7e\x73\x3f\x88\x24\x4f\xee\x07\xc7\x4a\x24\xf5\xf3\xf4\x3f\x7e\x36\xd4\xf0\x8c\xd5\x8c\x0b\xb4\x06\xd9\xd3\x39\xe6\x0e\x1a\x11\x86\xb6\x50\xc7\x8c\xa5\x51\xf3\x5e\x53\xb1\x63\x1c\xdf\x87\x77\xe3\xc4\x02\x1e\x6e\xe2\x29\x3e\xb0\x97\xf7\x5d\x81\xc3\xb3\x99\xef\x19\x23\xef\xf7\xfd\xce\x87\x9f\xf7\xcc\x27\x9f\xef\xa8\xe9\xf7\x9f\x14\x41\xea\xfd\xfb\x4f\x8a\x20\xb5\xf0\xc9\x27\x45\x90\x37\xd6\xff\xdd\x27\x45\xe4\xd1\xe7\x7c\x90\x23\x2c\x6f\xee\x2f\xf1\xf2\xfe\x7f\xcf\x91\x67\x79\xf0\x6c\x96\x09\xbd\xd6\x4e\x4a\xa9\x62\x6e\x54\x3c\x66\x8b\x85\x32\x98\xf7\xc2\xc1\x6b\x4a\x51\x29\xa7\xd0\x71\x74\x88\x09\xd1\xc8\xbb\x6a\x92\xda\x95\x38\x73\xeb\xfb\xf9\x79\xfd\xbe\xe6\xcc\xd5\xb7\x3b\xc8\x51\x7b\x97\x3f\xfb\x7b\xff\x81\xd8\xd6\xf5\x6f\x9f\x8c\x70\xe2\xbc\x66\xe4\x8d\xe5\xbe\xf0\x9c\x55\x7e\xd3\xbc\xb3\xcc\x65\x32\xd8\xec\x1a\x3d\x20\x40\x42\x53\xa3\x90\x42\x0a\xc4\xa0\x4e\x90\xda\x18\x36\x3b\x59\x48\x5e\x04\x86\xa5\x99\x51\x5a\xeb\x52\x51\xcc\x7a\x8b\xd1\x43\xd3\x14\x9c\x00\x32\xc5\x80\x90\xb0\x07\xe6\x88\x0c\xa1\x01\x50\xfc\x5f\x00\x00\x00\xff\xff\xf9\x0f\xe5\x59\x30\x28\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\xf4\x40\x0c\x86\xff\x4b\xce\x73\xda\x8f\xcf\x43\xef\xe2\xc9\x93\xc7\xa5\x48\xda\x66\x65\xb0\x9b\x29\x4d\x52\x77\x58\xfa\xdf\x45\xb7\xed\x80\xcc\x32\x22\xb2\x78\x2c\x7d\x27\x79\xf2\xf0\xee\xcf\xd0\x06\x16\x45\x56\xa8\x0e\xd8\x0b\x39\xf0\x3c\x98\x0a\x54\xfb\x33\x30\x1e\x09\x2a\x78\x7e\xa5\x08\x0e\x34\x0e\x1f\x5f\x4d\x54\x92\x7f\x3b\x98\x5d\x0a\x4c\xd8\x1b\xa5\x88\x79\xd6\xdd\xff\x3b\x98\x6b\xb7\x46\x84\x14\x1c\x04\xd3\x65\x78\xed\x60\xc0\x88\x4d\x4f\xdb\x62\x51\x54\x7a\x34\xc5\xc6\xf7\x5e\x23\x54\xc0\x81\xd7\xd0\x36\xfb\x60\xdc\xaa\x0f\xfc\xb9\x3f\xc1\xeb\x68\x59\xf6\x3c\x7a\xe2\x62\x54\x3f\xd1\xc3\x17\xba\xed\x79\xfe\xa6\x32\xf9\xe4\xe9\xed\xc7\xcc\x57\x7c\x27\xe8\x97\xbf\x80\x9b\x71\x78\x7f\xa2\xd6\x34\x8c\x25\x38\xec\xba\x91\x44\x7e\x13\xee\x6a\x79\x4b\xdd\x2d\x57\xf7\x72\xde\xd3\x6d\x0b\x9c\xd6\xd3\xad\xa5\x22\x07\x8e\xc7\x60\x92\xb3\xea\xb9\xa3\x13\x75\x2b\x6f\x49\xf2\x16\x5f\x26\x7d\x5b\xfa\x45\xf7\xf2\x9f\x26\x62\x85\xb9\x7e\x0f\x00\x00\xff\xff\xd3\x6a\xf5\x71\xaf\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x61\xae\xeb\x2a\x0c\x84\xb7\x34\xb6\xb1\xb1\x97\x03\x04\xf6\xbf\x84\x27\x43\xd3\xbe\xd3\x5b\x9d\xde\x5f\xb7\x91\x2a\x65\x84\x61\xe6\xb3\x89\x21\x9f\x02\x65\x03\x8a\x18\xc1\x08\xd0\xa9\xd5\x64\x3d\x7e\x86\x09\x03\x18\xcd\x00\x88\xa2\x90\x99\x70\x95\x55\xa2\xc0\x89\x4a\xd6\x98\x68\x75\x98\x70\x6b\xab\x0f\xad\x47\xad\xf3\xa8\x3e\x5b\xb3\x36\x70\xd4\x66\x47\x6d\xa3\x97\xc1\x98\x47\xcd\xaa\x54\xbb\xc8\xb8\x7c\xb6\xa3\xce\x7e\xd4\x21\x65\xc0\xa7\x6e\x95\x50\xb4\x6a\x4f\x3f\x8e\x75\x69\x97\x42\xba\x5d\xa4\xf3\xa7\xba\x1d\x8c\x9d\x4c\x0d\x9c\xff\x04\xa2\xaa\xa6\x1d\x78\x55\x79\xbc\x57\x45\x79\x54\x11\x58\x28\xd7\x6f\x4a\x14\x70\x4a\x56\x0c\xd0\x51\x1c\x41\x90\xc0\x92\xd7\x7e\x9d\x7e\xdd\x6f\x9f\x7f\xaf\x1d\xf5\x7d\xed\x58\xb9\xaa\xf9\xeb\x54\xdb\xa7\xb5\x47\x17\xf2\xb4\x20\xb2\xbf\x71\xb2\xec\x2b\x0f\x6e\xd7\xff\xfc\x10\xd6\x67\x3f\x7d\x53\x10\xbc\x7b\xc9\x59\xb8\xfb\x98\x75\xb7\xe3\xf4\x95\xfe\xb6\x33\x7a\x4d\x13\xd9\x6b\x9e\xc0\x27\x03\x0a\x76\xc5\x9d\xc3\x05\xe2\xb4\x5d\x54\x87\x74\xd2\xe3\x4d\xaf\x37\x6f\x3c\x4c\x1b\x64\xd1\xbd\xe2\x67\xff\x15\xf9\xdc\xbb\x66\xf7\xf4\x83\x7f\x91\x3f\x35\x2a\xf7\x8e\xf1\xa3\x3f\x9f\xf3\xdf\x13\xeb\xe2\x72\xe7\x7f\xde\x99\x67\x72\xdf\x58\xee\xc4\x9e\x7b\x73\x20\x78\x77\xb1\x38\x3f\x78\x6d\x16\xf8\xca\x62\xca\x37\x16\xab\xfc\x64\xe1\x12\xa4\xa8\x8b\x7d\x0a\x17\x5b\x49\x44\x97\x0e\x9a\x57\x78\xed\x24\x32\x17\x2f\x0a\x29\x12\x9d\xb5\x8d\xde\xac\xe9\xb4\x58\x4c\x31\x3d\x6c\x8d\xb8\xa8\x46\x52\x74\xfe\x76\x1f\x1a\x6f\xfa\x96\x27\xa7\x8b\xc0\x99\x67\xe0\x33\xc3\xfb\xbb\x91\x04\x3f\x4f\xd1\x47\xa6\xe5\x0f\xa6\x94\xb7\xe3\x30\xfd\xab\xa9\x62\xf7\x2f\x24\x39\xe2\xd7\xa9\x92\x38\x59\x9f\x09\xe3\x91\x5b\xbf\x64\xfe\x47\xf7\x86\xd7\xfb\xf7\xed\x3d\xa1\xa0\xfd\x9a\x90\xf2\x3d\x53\x01\x8d\x4c\x8d\x6b\xab\xad\xb2\x40\x9d\x11\xeb\x6a\xa8\x52\x87\x10\x5d\xd3\xed\x02\xa1\x93\x0f\xe1\x35\xbb\x77\x82\xcd\x4e\xa1\x57\xb8\x3a\xcc\xd7\x70\xbe\xba\x74\x35\xe5\x5e\x16\x4d\x80\xe3\xbf\x00\x00\x00\xff\xff\x12\xed\x04\x61\x88\x06\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

