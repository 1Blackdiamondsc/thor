// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// compiled/thor.abi
// compiled/thor.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6e\xb3\x30\x10\x84\xdf\x65\xcf\x3e\xfd\xff\x8d\x5b\x1f\xa0\x97\x5e\xa3\x08\x19\xbc\x44\x96\x60\x17\x79\xd7\x14\x14\xe5\xdd\xab\x44\x80\x49\x45\x52\x52\x35\x95\x7a\x4d\x76\x67\xbe\x19\xdb\xec\x8e\x50\x32\x89\x5a\x52\xc8\x2a\x5b\x0b\x1a\xf0\xd4\x46\x15\xc8\x76\x47\x20\xdb\x20\x64\x90\x8b\x3f\x10\x06\x30\xa0\x43\x7b\xfe\xc1\x3a\x17\x50\x04\x4e\x7b\x33\xcd\x04\x6c\xb8\x43\x30\xc0\x51\xc7\xfd\xbd\x81\xd6\x0e\xb6\xa8\x71\xd6\x16\xb5\x8a\xaf\x51\x6d\xe1\x6b\xaf\x03\x64\x40\x4c\xd3\xd0\x2c\x5f\x45\x2a\xd5\x33\xc1\xc9\x2c\xf9\x34\xc4\x25\x5e\xf2\xae\x7c\x10\xbd\xb2\x9e\xd1\xd7\x99\xbf\xc6\xea\x3c\xbe\x3f\x0a\xf4\x50\x5f\x84\xfd\x5f\x43\x3e\xe0\x0d\xe2\xda\x8b\xa2\x4b\xbb\x05\x73\x7d\xf1\x1d\xff\x47\x72\x1c\x84\xd7\xd4\xd3\x90\x77\x48\x7a\x4e\x92\x64\x06\x45\xf9\xff\x6f\x39\x64\x4b\xf5\x1d\x7e\x76\x7a\x5a\x3d\x29\x3b\xf6\x58\x46\xbd\x44\xf8\xed\x23\xfb\xc6\xb3\x4c\x85\xe5\x9b\xba\xcf\xef\x94\x9f\x3a\xb0\xce\x3d\xe1\x7d\x5b\x62\x1a\x1a\x8e\xb2\x96\xd4\x93\xc3\x1e\xdd\x74\x30\x23\xc8\xbd\xdc\xf3\xc6\x28\xb6\xe9\x0a\xde\x58\xda\xd4\xca\x8b\x5b\xdc\x7c\xec\x90\xf4\xc7\x63\x25\xb3\xb7\xe9\x2b\x7b\xed\xb7\xff\x08\x00\x00\xff\xff\xbd\xc0\xe9\x35\xc8\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\xdb\x38\x0c\xbd\xd2\xc7\x4a\xf0\x38\x5c\xef\x7f\x84\x79\x94\xe4\xd8\x1e\xb7\x6e\xe4\x8c\x33\x7d\xad\xf8\x94\x28\x20\x41\x80\xf8\x58\x88\x38\x02\x0e\x85\xb1\x03\x2a\x4e\x70\x02\x52\x58\x72\x00\x62\xa9\x81\xf0\xe2\x93\x01\x75\x99\xc7\x43\x1e\x70\xe1\x8c\xcc\x1d\x83\x74\x93\xd3\x2d\x2d\xaa\xf4\xa9\xbd\x4f\xdd\xa9\x0d\x3b\xb5\xd4\x24\x43\xc8\x37\x2a\x51\xda\xa9\x8d\x6b\xe3\x31\xdb\x4e\xcd\xe5\xa0\x8a\x36\xc4\xb0\x8d\xca\xca\x3b\xb5\x37\x20\x6b\x8d\x9d\x9a\xb3\x25\xab\xeb\x5c\x81\xd9\xad\x8a\x06\xc8\x96\xc4\xc8\xfb\x79\x77\xba\x6d\x36\xa8\x63\x59\x24\x20\x0e\x89\x25\x09\x81\x58\x16\xf9\x38\xd1\xaf\x1e\xf2\x0c\x07\x63\xf1\x66\xce\x94\x61\xdb\x70\x82\xa0\x98\x5b\x05\x6e\xb5\x68\xed\x51\x8b\xbe\x66\xcc\xb0\x56\x6f\x38\x51\x20\xf8\x8c\x0e\x67\xd6\x06\x2d\x3f\xd8\x34\xa6\x4d\xd3\x43\x62\x26\x48\xc6\x94\x1b\x6d\x89\xe5\x41\x5b\xb2\x78\xa3\xcd\x6c\xfa\xef\x67\x85\xe2\x8f\x56\xe8\xf5\x8d\x56\xf0\x6e\x77\x56\x30\x3a\xc6\x55\xeb\xd0\xf7\x5b\x26\x64\x9d\x9a\x32\xf9\xe5\xf7\xcd\x1c\x3f\xea\x94\xd5\x70\x19\x4f\xec\xc9\x3a\x1e\xec\xc9\x96\x9c\x90\xfa\xf8\xed\xd0\xe7\x62\x0f\xda\x0a\xde\x10\x03\xff\x05\xff\x05\xa7\x9f\x7a\x56\x84\x5e\x72\xd2\x3a\x07\xf1\xd5\xea\x67\x64\x8b\x9c\x59\x4d\x1a\x4b\xb6\xd2\xb0\x64\x10\x9c\xe1\x75\x01\xf7\x50\x47\x0d\x3e\x50\xe2\xdb\x7a\xf3\x95\xda\x05\xde\xfd\x00\x8a\x6f\xf6\x36\xfe\xf0\xb8\x90\xe5\x41\x9b\x7f\xa5\x80\x54\xb2\xc3\xef\x64\xd0\xbd\xdf\x59\x99\x74\x9d\x9d\x66\x49\xfa\x3e\x2f\x63\xff\x3a\xd6\xdd\xc4\xdf\xa2\x33\x82\x68\xe7\x52\xd4\xdb\x3d\xaf\x9e\x6b\xf4\x63\x8f\x21\xb3\xba\x62\x7c\xf1\xf2\x5d\xfd\x3c\x8b\x22\xd7\x1c\x15\x6e\x7f\x19\x8a\xda\xf4\x09\x8a\xda\xe3\x15\x14\xc7\x38\x8b\xe2\xc6\x67\x28\x77\x7c\xa7\x10\x4c\xb3\x8e\xd4\x52\x69\xc2\x1a\x7d\xaa\x05\x35\x86\x97\xd0\x52\xaa\xb4\xaa\x23\x75\x63\xaa\x26\x39\xaa\x72\xf5\x58\x77\xb9\x99\xa2\x58\x49\x5d\x89\xc6\x7e\x96\xfb\x4c\x5b\xf8\x72\xeb\xc1\xe9\xbc\x30\x09\x09\xa3\x1d\xfb\x06\xbd\xc3\x9f\x3e\x85\xb1\x55\x7f\x82\xb1\xb5\xf2\x02\xc6\x36\x70\x0e\xe3\xbc\xbf\x2f\xda\xb2\x74\x29\xdd\x47\x5f\x15\xff\x2f\x8a\x4e\xcf\xf2\x04\x39\x2f\xe9\x05\xe4\xbc\xf6\x17\x90\xdb\xff\xf2\x4b\xe7\x72\xc8\x3c\x89\xe2\x18\xee\xeb\x56\x12\xfe\xe7\xa0\x18\xbf\x46\x31\xa5\x67\xf1\xb7\x32\xd0\x27\x51\x8c\x2b\x8a\xa9\x7c\x3a\xfe\xbe\x42\x3b\x3c\x40\xfe\xf5\xd2\xc7\xcf\x17\xe3\x99\x67\x73\xe8\xa4\xff\x3d\x37\x86\x3e\xab\x7f\x61\xaf\xd4\xbf\xf0\x93\xf5\xef\x26\x37\xae\x1b\x70\xfb\x9e\x3b\xef\x51\x75\xa3\xdd\xf5\x0f\xdb\xd7\xe9\x9d\x0e\x7b\xe5\xd5\x22\xd8\x9e\x1d\x4e\xc5\xe0\xda\x63\x55\xfc\x7d\x97\x55\x99\xf7\x5d\x1c\xa0\x85\xe9\xa5\x6f\xd8\xd7\x1d\x9a\x67\xe6\xaf\xdc\xf8\xc0\xd5\xbd\x39\x85\xae\x71\x78\x8a\xbe\x29\x23\x7d\x4b\x37\xfc\x0d\x32\xf8\xe7\x1d\xf7\xca\x09\x97\xa8\xf8\x44\xe4\x15\x3c\xeb\x1f\x0a\xbd\xd2\x3f\x14\x3e\xdd\x3f\xec\x7c\x9a\xee\xf8\xce\xd5\x8f\xd9\xa2\xb4\x3e\x03\x34\x4a\xa9\x96\x5b\x78\x27\x0a\x57\x98\xf5\x5e\x35\xdc\xfb\x2c\x1c\x96\xbb\x8b\x79\x9f\x93\x97\x25\x78\x58\x97\xe9\x8d\x3d\xe4\xe3\x5e\x73\x32\xf6\xde\x80\x22\xff\xe8\xff\x23\xe5\xa0\xae\x06\xbe\x90\x9b\x73\x2a\xa9\x24\x16\x58\x30\x8c\xa8\xb5\x2a\x94\xe6\x68\x28\x42\x96\xaa\xeb\x0c\xb0\x59\x14\xca\x49\x83\x99\xb8\x47\x6e\x4a\xa5\x22\x75\x4d\x66\x54\x75\x28\x01\xd4\x2a\xc0\xf9\x9f\x00\x00\x00\xff\xff\xcf\xa9\xbf\xa6\x04\x16\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6b\x83\x50\x0c\x85\xff\x4b\x9e\xef\xd3\xf6\xe6\x7b\x1f\xf7\x0b\x4a\x19\xa9\x37\x4a\xc0\x26\x72\x93\xeb\x2a\xa5\xff\x7d\xd4\x51\x5b\x66\x51\xca\x64\x6c\x8f\x92\x13\xfc\xce\xc9\xd1\xed\x09\x4a\x15\x73\x14\x87\xa2\xc2\xc6\x28\x00\x4b\x9b\xdd\xa0\xd8\x9e\x40\xf0\x40\x50\x80\x71\x2d\x94\x20\x80\xf7\xed\xe5\x19\x63\x4c\x64\x06\xe7\x30\x4a\x48\xa2\x26\xd3\x79\x11\x47\x12\x67\xef\x6f\xa2\x7d\xef\x64\xaf\x2f\x70\xde\x85\xab\x48\xd0\xb9\xa3\x77\x8c\x11\x02\x68\xf6\xef\x30\x77\xcb\xaa\xcd\xb0\xd9\x62\x8f\xfb\x86\x46\x07\xe6\xe8\xf4\x96\x1d\xf7\xdc\x5c\x5e\x57\x80\xa8\x5c\x45\xe3\x7a\x95\xa5\x74\x56\x19\x08\x6f\x29\x78\xca\xcf\x85\x30\x41\x67\xdb\x0c\x69\xd0\x9a\x0e\x3a\xa6\x8f\x45\xf6\xe7\x2f\x38\x81\x4f\x74\xd0\x8e\xfe\x44\xf4\x13\xb6\x9a\x7c\x73\xa4\x32\xfb\xd0\xb3\x59\xc0\x7b\x83\x2b\x85\xfb\xf3\x62\x08\x1d\xfd\x5f\x82\xd7\xb4\xc8\xfd\xd5\x88\x30\xe7\xe8\xd1\x70\xfc\x01\x3c\x1c\xae\xfc\x79\x2c\xf5\xab\xe2\x64\xbf\x74\xa0\xdd\x67\x00\x00\x00\xff\xff\x6b\x47\xa3\x3a\x7a\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\x1b\xbd\x0a\xde\x12\x6f\xa1\xe5\xe8\xb9\xff\x25\xdc\xa3\x47\x1c\x3b\x4e\xdd\xc8\xa9\xdb\xdb\xbf\x9e\xe3\x1c\x87\xd1\x00\xfa\x80\x0f\x34\x06\x0e\x06\x02\x4a\x06\x20\x6c\x08\x86\x00\xa9\x6b\x30\x00\x60\x0d\x05\x10\x9e\xfc\x44\x00\x31\xee\xfb\x83\xe6\x60\x0c\xd6\x6b\x6d\xc0\x28\xc3\x4e\x16\x0d\x53\x1a\xb5\xa5\x90\x97\x14\x65\x4b\xd1\xd1\xa0\xd6\xba\xa4\x29\x2e\x29\x71\xf6\x40\x6f\xd2\xba\xd7\x32\x72\x69\x6a\x61\x4a\x49\xf7\xda\x00\x09\x9c\x18\x97\xd4\xd3\x92\x46\xad\x1e\xb3\x6c\x69\xc3\x25\x4d\x11\x34\x96\x9c\xa7\x94\xc3\x96\xe6\xcc\x1a\x9c\xb7\xb4\xda\x92\x56\x8f\xc8\x5a\x96\x0f\xa2\x79\x4b\xab\x51\xab\xdc\x96\xd4\x4d\x83\xe6\x81\xa2\x43\xaf\x9a\x59\x1c\x50\xc7\xae\x0b\x2c\x74\x97\x5c\x27\xe2\x25\x8e\x67\x7a\x55\x1b\xcf\x08\x28\xfa\x8c\x0c\x01\xa0\x93\x23\xb0\x93\x92\xb3\xa3\xa3\x8e\x2f\xad\x7b\x11\x15\x1c\x14\xe3\x5e\x1b\xc1\xc1\xd9\x79\xe8\xd7\x3c\xd6\xe3\xb2\x8a\x30\x31\x71\x82\xf9\xbc\x0b\x6c\x1d\x8e\xe3\xa9\xe5\x45\x6b\xc3\xbe\xc2\xba\xe2\xfc\xae\xfb\x06\x38\x23\xb8\x74\xb1\x6d\x5d\x3c\x6c\xdb\xf0\x91\xa7\x7d\x9e\x96\x00\x12\x30\x46\xb4\x5b\x3f\x87\xe6\x48\x4b\xf7\xdb\x1e\x23\x02\x47\xe8\x7c\x85\xcf\x58\xf9\x11\x1f\xf4\x3e\xf2\xd3\x81\x0d\x78\x79\x34\xf0\x61\x0d\x97\xfc\xfa\xd9\x07\xed\x1d\xa3\x48\x71\x6a\x60\xfd\x28\xdb\xde\x21\x28\xa7\x9b\x58\x10\xea\xba\x3e\xec\xe9\xe1\x4e\xb2\xde\xef\x24\xb7\x51\x64\x94\x6f\xb5\x9f\x68\x6d\xf7\xf8\x10\xbf\x08\x9f\x97\xe1\x6b\x15\xbf\x8d\x2f\xd9\x3d\xbe\x64\x03\xdf\xd0\xcb\xad\x76\x83\xe1\xe1\xfa\x7b\x62\x21\xda\xbd\x85\x92\x7f\x3d\xd6\x17\x5c\x1c\xf4\xe9\xcc\xa0\x56\xef\xbd\xed\x36\xb4\x36\x79\x19\xb3\xf0\x85\x0d\x7e\xcc\x2c\x8c\xf9\x4b\xcc\xc2\xc6\x2f\x64\x16\x0e\xf7\xf8\x70\x2e\xbf\x99\x59\x22\x7d\x3f\xf3\xb9\xd1\xdd\x4e\x44\xf0\x2f\xe3\x80\xc8\xfe\x6d\x24\xc4\xc2\x3d\x12\x61\x6a\x2f\xfe\x74\x25\x49\xfc\x04\xdf\x16\xfe\xff\xf0\xbd\x60\x99\xac\x9d\xee\xd6\xc0\xa6\x74\x55\xf9\xd8\xd1\x9a\x04\x07\x3b\xc0\x55\x85\x85\xae\x66\xaa\x62\x6e\x3d\xd0\x33\x93\xe0\xd0\xf5\x56\xf5\xcb\xcb\x21\x5b\xf8\x32\x9f\xec\xff\x64\xed\x15\x02\xf0\xfe\x7b\x58\x25\x98\xb6\x8f\x90\xff\x55\x96\x7d\x44\x4d\x15\x9c\x4e\x34\x1e\xa2\xd4\xbd\x68\x6e\xd8\xb4\xe5\x56\x42\xd5\x5c\x51\x7a\x40\xa1\x50\xb1\xb9\x74\xae\x75\xcc\xe0\x05\x7a\xc8\x44\x11\x9b\x66\x02\x48\xc5\x4b\x28\x9c\x23\xa9\xcb\x57\x33\x29\x8d\x8e\x30\x33\x71\x64\xe4\xcc\xc7\x1d\x61\x86\x13\x9f\x8d\x35\x52\x66\x8f\x65\xeb\xc7\xeb\xb3\xc3\x77\xce\x21\xb0\x77\x00\x32\x62\x40\x17\xff\x9d\x47\x1d\xcf\x4c\x08\x0e\x9c\x51\x77\xf5\x5b\xc4\xdb\xea\xd7\xd4\xf1\xfd\x6e\x52\x0d\x5c\x77\xf6\xb6\xf5\x6b\xaf\xbb\xea\x40\x43\x3e\xa2\xbd\xbb\xa4\xe5\x7c\xad\xf3\x9d\x3f\xae\x3b\xec\x75\x4d\x7f\x5e\x2d\x7e\x94\x87\x7f\x7f\xb5\xa8\x0c\xfc\xc6\x35\xa6\x3a\xad\xb7\x18\xfe\x9b\x98\x4c\xcb\xe4\xa4\x02\xbc\xa6\x9e\x37\x4e\x99\x93\x2f\xba\x8c\x6b\xf4\x84\xbe\xa7\xbe\x5d\x9f\xfc\x36\x23\xbd\x65\x95\x01\xd2\x6d\x9e\x9d\xd6\x6c\x6b\x66\xa3\x27\x8e\x29\x6d\x56\x15\xbd\xa2\x6a\xfd\x90\x2d\x9f\x44\x7a\xb3\xdb\x17\x18\xc2\x13\x3d\x60\x08\xcf\xf6\x04\x43\x78\x29\x4f\x30\xc4\xfa\xcf\x7e\xd2\xcd\xe5\xb6\x9b\xab\x88\x4b\x7f\x36\x30\x9f\x75\xf3\x39\xd7\x36\xe6\x1f\x64\xde\xc7\xce\x70\xd4\xcd\x5c\x4e\x56\xa3\xf8\xf4\x26\x05\x0d\x7a\x68\x69\x3c\xe7\xdd\x47\x34\x2a\xcc\x13\xe4\x99\x65\xcd\x9b\xa9\x62\xbe\xc9\x8f\x29\xa9\x5f\xaf\xcb\xd3\x2a\x44\xf6\x2a\x15\xfe\x7c\xe7\x4c\xd4\x1e\xd4\x45\x12\x7a\xa2\x2e\x92\xfa\xb7\x3a\xe7\xe2\xcb\xa3\x1c\xfa\xa5\x4c\xfd\x47\xe6\x5b\x95\xcf\xea\xce\x11\x71\x62\x5a\x06\x7f\x9d\x66\x19\xc7\x56\xc1\xab\xba\x5c\xd8\x9e\x5f\xc4\xf6\xbf\x01\xb3\x9b\xb9\xf6\xf2\xee\xe0\x0b\x39\x9e\x13\x3c\xc8\xf1\x9c\xe5\x89\x1c\xcf\x25\x9d\xe5\xf8\xe6\x99\xdc\x6e\xde\x4f\x1d\xf3\x46\x69\xb5\xa7\x82\xeb\xbd\xce\x7f\x33\xa2\xf0\xf3\x88\x16\x8f\x0f\x22\x5a\x62\x7d\x1c\xd1\x11\xaf\x23\x8f\x0f\xcf\x72\xb5\x76\x52\x4a\x15\x73\xa3\xe2\x31\x5b\x2c\x94\xc1\xbc\x17\x0e\x5e\x53\x8a\x4a\x39\x85\x71\x48\x2c\x92\x10\x8d\xbc\xab\x26\xa9\x5d\x89\x33\xb7\x7e\x89\xed\x17\xce\x72\xb7\x7d\x28\x74\x85\x40\xd6\x83\x8c\x6f\x88\x01\x4c\xcf\x92\x20\x84\xd3\x0c\x8a\x00\x47\x5c\x6d\xdc\xc0\xdd\x11\xdb\x3f\x36\x83\xd6\x26\x0f\xb2\xb6\x76\x7f\x82\x87\x1a\xb4\xe7\x67\x50\x80\x84\xa6\x46\x21\x85\x14\x88\x41\x9d\x20\xf5\x68\xd1\xa5\x63\x56\x8f\x35\xc4\x58\x02\x08\xf4\xd6\x9b\xc4\x46\xd2\x9b\x77\x89\x0a\x1e\x02\x58\xc9\x9a\xcd\x50\x24\x79\xa8\xaa\x62\x51\x18\x80\xe2\xff\x02\x00\x00\xff\xff\x53\x3a\xd9\x63\xa4\x1c\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xb1\x6a\x33\x31\x10\x84\xdf\x65\x6a\x55\x3f\xfc\x29\x54\xa6\x4f\x95\xd2\x1c\x61\xcf\xb7\x0e\x02\x79\x25\x4e\xb3\x0e\x87\xf1\xbb\x07\x07\x9f\x1d\x27\x01\x5f\x9a\x24\x9d\x04\x33\xe8\xfb\xb4\xbb\xda\x63\x5d\xac\x51\x8c\x88\x1c\x5d\x03\x92\x55\x67\x43\x5c\x75\x01\x26\x5b\x45\x84\x09\xd3\x4e\x9f\x58\x28\xf9\xde\x47\xd3\x01\x01\xc5\x79\x0a\xee\xe7\x1c\x02\x38\xd5\xe3\xc9\x93\xf1\xdf\xff\x3b\x1c\xba\x80\x2a\x93\xf4\x59\x11\x37\x92\x9b\x06\x34\x0a\xf5\xc1\x29\x7d\xca\x89\x13\x22\x76\x49\x5f\x2e\xdd\x8d\xdb\x9a\xa9\x18\x0e\xe1\x3d\xdd\xa9\x7d\xc6\x3b\xbf\x2a\xc3\x30\x5e\xda\xc7\x9b\xb6\xf6\x56\x9e\x03\xdb\xe2\xc6\xaf\xe1\xae\x0d\x65\xb8\x36\x5b\x44\x6f\xc5\xe6\xd0\x5f\x70\x68\xde\xdf\x9a\x4e\x5f\x4a\x5e\x38\x9a\x6f\xc8\x2d\x5a\x9f\x47\xaf\x35\x4f\xbf\xb0\x3e\x1f\xe8\x6e\xfd\xfc\x27\xfa\x67\xe5\xcf\x50\x77\xaf\x01\x00\x00\xff\xff\x07\xa8\x70\x1b\x94\x03\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x01\x01\x44\x21\x08\x03\xd0\x4a\xbb\x29\x63\x3f\x8e\x22\xf4\x8f\x70\x4f\x30\x84\x8d\xa0\x00\x18\xf3\x80\xf3\x53\x88\x79\xf2\x24\x17\xc2\x84\x7b\x2e\xa9\x5d\x08\x6f\xcf\x6c\xf4\x91\xd3\xed\x41\xbe\xf5\x39\xeb\x2d\xb1\xe2\xc4\xca\x50\x7d\x37\xa7\xc0\x7e\x62\xdc\x26\x01\x7e\xff\x00\x00\x00\xff\xff\x12\x3b\xf5\x97\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x31\x6b\xc3\x30\x10\x85\xff\xcb\xcd\x9a\xdc\x36\x83\xe6\x2e\x1d\x0a\x85\x14\x3a\x04\x53\x4e\xf6\xa5\x08\xcb\x92\x90\xee\xdc\x8a\x90\xff\x5e\x62\xdc\x24\x5d\x9a\x2c\x35\xce\xa6\xe1\x3d\xde\xc7\x3b\xdd\x6d\x76\xd0\x04\x9f\x19\x3d\x83\xe6\x24\xa4\xc0\xfa\x28\x9c\x41\x6f\x6a\x05\x1e\x7b\x02\x0d\x1c\x18\xdd\x5a\x62\x74\x05\x14\x04\xe1\x49\xb1\xfb\x11\x80\x02\x2e\xf1\xf0\x12\xeb\xb9\x7a\x58\xc1\xbe\x56\x10\xb1\xa0\x71\x04\x7a\x8b\x2e\x93\x82\xcc\xc8\xf4\x2c\x8c\xc6\x3a\xcb\x05\x34\x0c\x96\x3e\x4f\xde\xad\xf8\x86\x6d\xf0\xb0\x57\x7f\x60\x1d\x43\xdf\x07\x74\x42\x27\xbb\x29\x4c\x79\x0c\x9e\x04\xc6\x61\x47\x95\x39\xe0\x5c\xa0\x1e\xad\x77\xd5\x1c\xd4\x5e\xfa\xdf\x6d\x4d\xb1\x47\xe6\xd0\x74\x6b\xfb\xe1\x29\x5d\x82\xc6\xb6\x4d\x94\xf3\x52\xa0\x9f\x1e\x6f\xac\xe5\x57\xdb\xd3\x35\xdf\x79\x75\xff\x8f\xc4\x67\x4b\xf6\xb5\x84\x06\xcf\x79\x5e\x52\x18\xa8\x7d\x0b\xa9\x5b\xd0\xd6\x5f\x35\xd9\xf1\x5e\x35\x21\xcd\x33\xdf\xfa\x3b\x00\x00\xff\xff\x1c\x28\x2e\xbd\x46\x05\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x98\x0b\x72\x23\x2b\x0c\x45\xb7\x74\x25\xa1\x0f\xcb\xe1\xd3\xec\x7f\x09\xaf\x68\xda\x71\x1c\xbb\xfc\xc6\x9d\x89\xa7\xd2\x53\x53\x89\x2f\x20\xa4\x23\x81\xda\x31\x04\x0c\x09\xca\x06\x24\x31\x82\x11\x10\x9b\xba\x01\x10\xf5\x06\xc2\xc9\x27\x03\xc9\x64\x1c\x0f\x59\xc0\x84\x82\x0c\xbd\x77\x4a\x73\x9f\x2c\xea\x53\x15\xe7\xa4\x41\x69\xa9\x75\x5b\x6a\x4a\xc9\x5b\x68\xde\x55\x4a\xc7\x5c\xe3\x5e\x15\x5e\x97\x5a\xed\x50\x85\xa2\xfb\x61\x97\xa1\x4b\xcd\xa5\xa9\xf4\xba\xe6\xb2\x61\xa9\xad\x0e\xeb\xbd\x6d\x4b\xbd\xf8\xd0\x5b\x29\x8a\x8d\x97\x3a\x7d\xd0\x3a\x19\x04\x46\xd7\x2a\x29\x40\xba\xfb\x3c\x16\x9b\xa5\xeb\xce\xab\x84\x11\x84\xb2\xda\x5c\x93\xa0\x14\x08\x0e\x9a\x54\x19\xa0\x4c\x0a\xc5\x65\x24\x13\x24\x63\xc8\x67\xab\xad\xdc\x59\x25\xd6\x99\x93\x80\x18\x24\x08\x94\x11\x08\x88\x66\x1c\x56\x11\x0c\xfa\xa2\xec\xf9\xa4\x01\x9a\xca\xbe\x57\xc2\xe1\xc5\xda\x3f\x63\xda\x5a\x39\x0f\x64\xc9\x9c\x77\xed\xea\x6d\x48\xc8\xee\x7f\x12\x9f\x3b\x2c\xef\x2f\xff\x32\xed\x2b\x38\x1f\x9f\x67\xe4\x75\xdc\x46\x3e\x23\xa1\x4c\x76\xf9\xf9\x02\x09\x4a\xf7\x7c\xc9\xd3\x63\x12\x9f\xab\xeb\xca\x60\x45\xf4\xe1\x5d\xea\x7e\xeb\x9d\x7f\xac\xfa\xbf\x87\xec\x95\xb9\xaf\x44\xd9\xf8\x3e\xca\xcd\xbf\x11\xa5\x66\xfb\x6b\x39\x60\xa2\x3b\xef\x58\xec\x1b\xde\x99\xea\x17\xef\xfc\x9e\xdf\x23\xed\x15\xaf\xad\xdd\x7b\xed\x73\xc4\x29\xfd\x3d\x36\x0f\xce\x3f\xef\xe7\xdf\x6b\x39\x7d\xfe\xf9\xc1\xf9\xe7\x6d\x7c\x83\x78\x18\x7e\x8a\xf8\xde\x19\xf0\xca\xc9\x30\xa9\x2d\x8d\x06\xd8\x61\x8d\x3e\xc7\xf0\x9d\x1e\x83\x83\x32\xd2\xba\xf1\x3e\xe2\x95\xc9\x6c\x27\xea\x01\xa9\xa4\x07\x69\xf1\x2f\xf9\xd3\x32\xe8\x3a\x3a\xbb\x81\xf4\x35\x2e\xdb\xfa\xed\x98\x87\x2b\x8d\xa9\x33\x82\xe8\x58\x55\xf2\x67\x9b\xd7\x5c\xcd\xdb\xf6\x51\x7e\xf2\xfa\x6f\xe7\x58\x16\xdf\x50\x0a\x47\xc8\x11\x2d\xff\x04\xcd\xd5\x49\xf6\x7e\xc0\x41\x90\x60\xe5\x90\xbd\x4f\xd0\x6d\x8d\xdc\xc6\x39\xd9\x4f\xcf\x00\xad\x73\xfe\xc1\x28\xa5\x3c\xfb\xec\xec\x27\x73\x7d\x24\x1c\x36\x16\xad\x75\x53\xf3\x36\x99\xe8\x0d\xa5\x35\x3e\x7b\xda\x7c\x83\x58\xb6\xdc\x0e\x5b\x32\xf7\xb6\xbd\x67\xed\xfb\xcf\x17\x98\x19\x7d\x99\xdd\xf8\xae\x96\xab\x22\xf3\x25\x8f\x7f\x50\x2b\x29\xeb\x93\x5a\x49\x33\xeb\x2f\xd7\x4a\xaa\xe3\x44\xad\xac\x4f\x27\xeb\x85\x2b\xba\xa5\xc1\x3f\x5e\x2f\x37\x76\x6f\xde\xfc\xee\xee\x94\x3f\xa0\xaf\x9a\x9e\xd0\x57\x8b\x13\xf4\xd5\xb7\xb7\xd3\xf7\x54\x92\x37\xff\x65\xf4\x8d\xe4\x09\x7d\x63\x3f\x41\xdf\xa4\xbf\x9b\xfe\x46\x26\x9b\xd8\xf6\xdb\xe8\x77\x7e\x46\x7f\xb3\x33\xf4\x47\x7b\x37\x7d\x82\xa0\xe4\x3e\xfe\x79\xd7\x77\x2f\x4f\x78\xfa\xfc\xbe\xfb\x32\x4f\x2f\xe9\x9d\x5d\x3f\x65\xde\xc2\xd1\xff\x39\xcb\x60\x3c\x61\x19\x92\x4e\xb0\x8c\x54\xde\xc9\x32\xb6\x68\x18\xf2\xdb\x6e\x85\xe8\xfd\x19\xf9\x41\x27\xc8\x67\xf8\xf9\x5b\x01\x28\x64\x6a\xec\xc5\x8b\xb3\x40\x83\xe7\x17\x0f\xab\xdd\x5a\xb7\x28\x65\xf8\xe8\x75\x10\x72\x20\x6a\x46\xe7\x86\x24\x4e\xa8\x3d\x77\x87\x7b\x92\x30\xb4\x16\xc2\xea\xcd\xf6\xbf\x66\x00\x9c\xff\x0b\x00\x00\xff\xff\xb2\x95\xa3\xb9\x96\x12\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x3d\x4b\x03\x41\x10\x86\xff\xcb\xd4\x5b\x45\x4d\xb1\xb5\x8d\x85\x20\x44\xb0\x08\x47\x98\xbd\x9b\xc8\x72\x7b\xb3\xcb\xee\xcc\xc9\x12\xf2\xdf\xe5\x34\x1a\xfc\x20\xb1\x31\x9a\x6e\x8a\x19\xde\x67\x5e\x9e\xe5\x06\xda\xc8\x45\x90\x05\xac\x64\x25\x03\x9e\x93\x4a\x01\xbb\x6c\x0c\x30\x0e\x04\x16\x18\xc5\x8f\xb4\x92\x8c\x5c\xb0\x15\x1f\xf9\xe6\x1a\x0c\x44\x95\xdd\xea\xe6\x6d\x13\x0c\x48\x4d\xd3\xe4\xaa\x50\xb9\x98\xc1\xb6\x31\x90\xb0\xa2\x0b\x04\x76\x8d\xa1\x90\x81\x22\x28\x74\xab\x82\xce\x07\x2f\x15\x2c\x8c\x9e\x9e\xf6\xb7\x6b\xe5\x97\x14\xd8\x9a\x03\x7c\xef\xa1\xac\xc3\xfe\x56\x3d\xcb\x2e\xf6\x23\xbd\x0b\xb1\xed\xcf\x95\x7b\xe1\x1f\x99\xf2\x31\x76\xec\xba\x4c\xa5\xfc\x22\xfb\x21\x27\xee\x72\x1c\xa9\x7b\x88\xb9\x3f\xc6\x39\xfd\x3a\xbb\x9a\xff\xb3\x8e\xef\xa3\x60\x58\xb4\x31\xd3\x4f\xf8\xe7\x97\xa7\xc0\x5f\x8d\x18\x94\x3e\xd9\xf9\xed\x03\xd8\xd3\xcc\x4d\xa5\xfe\xb9\xdf\x5f\x1d\x89\x3d\xf1\x6b\xbb\x9a\x52\xa8\x67\xaa\x87\x1f\xa8\x08\x0e\xe9\x24\x76\x34\xcf\x01\x00\x00\xff\xff\x0d\xea\xac\x72\x9a\x05\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\x5d\x72\x06\x21\x08\xbb\x52\x10\x08\x78\x1c\x59\xf5\xfe\x47\xe8\xec\xcf\xd7\xaf\xed\x4b\x67\xda\xf0\xb0\x6b\xc8\x68\x12\x22\x41\x18\xbc\x11\x30\xa5\x9c\xa7\xee\x41\x00\xea\x71\x40\xf0\x47\x74\xc0\xa8\xfb\x81\x30\x41\xb5\x31\x2b\xa2\x75\x31\xc2\x96\xc7\xc9\x65\x1c\x3a\xab\x78\x72\x6c\x1e\x5e\xe7\xdb\x89\x3d\xbd\xd4\x12\xe2\x84\x3f\x8e\x6e\xd6\xc1\x6b\x82\x4e\x2f\xe0\xad\xe3\xfc\xa9\x0b\x23\x22\x5f\xba\xf3\xab\x88\x4f\x57\xbf\x41\xf8\xf6\x7c\xb5\x24\x29\x5f\x33\xfd\xa7\x1f\xb4\x94\xbb\x75\xc8\xe9\xf9\xb9\x1f\xa9\xd0\xbc\x98\x8c\x84\x96\xf8\x9d\x6d\xd6\xf7\x6c\x3e\xb6\xbc\x76\x6b\x79\xe8\xbc\xb7\xba\xee\xbf\x47\x75\x0f\x81\x21\x74\xb6\x18\x31\xa2\x29\x3c\x1b\x64\x5b\xcd\xa9\xb5\x97\x3a\xf6\x11\xe1\x79\x34\x0b\x0d\x0b\x61\xd0\x4c\xa6\xb5\xbe\xcc\xac\x30\xd0\x73\x87\x1f\xd6\x53\xbd\x71\x62\xd4\x02\x5a\xff\x08\x00\x00\xff\xff\x08\x27\x22\x01\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x6d\x96\x23\x21\x08\xbc\x52\x01\x82\x70\x1c\xb5\xf5\xfe\x47\xd8\xa7\xed\x24\x99\xd9\xd9\x64\x3a\xfb\xc6\xfe\xa1\x01\xc2\x47\x55\xa9\xc1\x61\x48\x50\x36\x20\x89\x11\x8c\x00\xcd\x9a\x0d\x80\x68\x6e\x20\xbc\xb9\x02\x48\x26\x63\x2f\x32\x87\x09\x67\x19\x29\x12\x28\xad\x3a\x4d\xf3\xb4\x7a\x2f\xc5\x4a\xdb\xd6\xc8\xa7\xb5\x49\x6a\xf0\xae\xa7\xf5\x68\x9a\xb5\xce\xae\x1c\xe3\xd0\x2a\xc9\x41\x3a\x3d\xe6\x67\xb7\xa7\x5d\xd7\x04\xa1\x73\x1e\x87\x18\xc4\x09\x14\x70\x38\x64\x5a\x41\x41\x16\x30\xf0\x3c\x22\x38\x96\x57\xf4\xab\x4d\xd7\x67\x04\x12\x51\xd3\x0a\x3c\x56\x2d\xf2\x77\xd5\x66\xd7\xaa\xde\x2a\x70\xaa\xb3\xc2\x62\x82\x1c\xce\x4e\x93\x91\x15\x4b\x2b\x66\x7b\x82\x20\x81\x21\x8f\x9d\xf4\x6f\xe6\x1f\x64\x04\x81\x7d\xce\x9a\x6f\x6c\xbc\x5a\x64\x57\x62\x5f\x77\xbb\x50\xac\xf7\x9e\xae\x64\x17\xb9\x12\x4d\x89\x74\xe1\x42\x39\x3d\xe2\x22\xb8\x92\xc5\x84\x53\x58\x09\x29\x2e\x2e\x7b\x1e\x79\x54\xf3\xff\xdc\x0c\x6c\x7e\x91\x30\x79\x91\x0f\x7d\x7c\xec\x77\x3c\x3f\x29\x81\xb7\x5e\x80\x1b\xc2\x2e\x53\x69\x6b\xca\xec\x90\x4a\xba\x55\x41\xe3\x8b\x3e\xb5\x0c\xba\x79\x19\x59\xb3\x1c\xa7\x5f\xfa\x79\xda\x71\xeb\x3b\x73\xce\x5e\xf2\x60\xef\xc2\xc9\x86\x43\x49\x87\x36\xea\x47\x78\xae\x24\xd2\x07\x0f\x0a\x49\x12\x95\xb5\xb4\x5a\xac\x68\xb7\x18\x4c\xd1\x3d\x6c\xb4\x38\x28\x87\xf3\x4f\x75\x5d\xce\x09\xed\xbc\xe7\x57\x19\xab\x07\x29\x7a\x2f\x37\xbe\xf8\x97\xf8\xe2\x7f\xf3\xf5\x31\x15\xbf\x66\x88\x5b\x7a\xc6\xd0\xe1\xcf\x19\x3a\xf3\x4f\x3b\xc3\x89\xf6\xbf\x7a\x7f\xcc\x79\x7f\x83\x94\xbe\x7f\x7b\xe6\xbe\x7f\xbd\x89\x3a\x8f\x66\x48\x83\xf6\xbc\xf4\x1b\x98\xff\x08\x4f\xb1\xf6\x04\x4f\x71\xbc\x81\xa7\x84\xbd\x81\x27\xe6\x83\x5f\xc8\xd4\x38\x97\x5c\x32\x0b\xd4\x19\xde\x0b\x89\x0f\x85\x1c\x14\xb9\x51\x6d\x14\xda\xc4\xa0\x29\x7a\x71\xb4\x83\xcb\x70\xf2\x3a\x0e\x2d\x2d\x0f\xa1\x5c\xa4\x76\xaa\x4c\x4d\xdc\x07\xc0\xf1\x27\x00\x00\xff\xff\xd4\x4b\x15\xba\xb0\x07\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x40\x10\x44\xff\xa5\xcf\x73\x5a\xd1\x43\xee\x1e\xfd\x82\x25\x48\x27\xdb\x2b\x83\x63\x4f\x48\x57\x47\x87\x65\xff\x5d\x36\x98\x49\x44\x21\xe8\x71\x98\x6a\xde\xab\x3a\x5e\xa8\xcf\x6a\x60\x05\x35\x67\x4e\x26\x81\xa2\x0e\x0e\xa3\xe6\x78\x21\xe5\x37\xa1\x86\x5e\xa5\x50\x20\x94\xe1\xf6\xe8\x0a\xc4\xee\x0e\x74\x0d\xf5\x7f\xe2\xe4\xb2\x26\x3c\x2a\x0e\xf7\x0f\x74\x6d\xc3\x92\x50\x46\x9c\xe4\xd9\x04\x14\x28\x3b\xbe\x08\x6d\xa0\x81\x0b\x77\x49\x2a\xdd\xc0\x90\x27\x07\x77\x31\x45\x94\xdb\x6d\xd6\x25\x54\x11\x67\xd7\x1e\x31\xeb\x6c\xb1\x36\xc0\xe8\xdb\x02\x3f\xf8\x2f\x82\xc7\x0f\xe9\x1d\x79\xfc\xe6\x51\x9b\xac\x04\x3e\x9d\x46\x31\x9b\x4b\xec\x3b\x4e\x51\xde\xff\x6a\xb7\x33\xef\x6f\xf2\x7b\xd2\xdb\xe5\xff\x2f\xdd\x7e\x06\x00\x00\xff\xff\x31\x85\x28\xfa\x16\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x30\x0c\xfd\x17\x62\x47\x9f\x3a\x6c\x07\x5f\x73\x4e\x37\x6c\xd8\xa9\xe8\x81\x96\xd9\x4c\xa8\x4c\x05\x22\x95\x42\x28\xfa\xef\x83\xb7\xc5\xd6\x1a\x3b\x75\x60\x2f\xf5\xd1\xd0\xa3\xf0\x9e\x1e\xf9\xcc\xbb\x67\x30\x9e\x45\x91\x15\x4a\x0d\x91\x0a\xb0\xbc\x8f\x2a\x50\xde\x3d\x03\x63\x43\x50\x82\x62\xd8\x91\x42\x01\x9a\xf6\xed\x37\xd6\x75\x20\x11\x78\xb9\x2f\x8e\x90\x0f\x3f\x51\x36\xbe\x26\x28\xc0\x47\x7d\x7d\x41\x5f\x5a\x79\xef\x7e\xd7\xed\x31\x61\xe5\x08\xca\x07\x74\x42\x05\x88\xa2\xd2\x36\x2a\x56\xd6\x59\x4d\x50\xc2\xc1\xd2\x53\x5f\xf8\x10\xd9\xa8\xf5\x0c\x2f\xc5\x52\x94\x4d\x0c\x81\x58\xbf\xef\x3d\x8b\x0f\x6f\x31\xcf\x6f\x58\x88\xfc\xdf\xea\x0b\xd8\x17\x1d\x24\x0a\x85\xf3\xf2\x02\x35\xfe\x40\x3f\xfe\xe0\x7a\x69\x93\xe8\xb3\xe7\x23\x68\x71\x07\x2e\xd1\x60\xe5\x84\xff\x15\x9a\x6a\x8e\x2f\x26\x50\x6d\x33\x48\xb4\xac\x37\x9f\x3e\xe7\x90\x40\xc6\x1f\x28\xa4\x6f\xa8\x34\x00\xcc\xe4\x0b\x69\xab\xff\xab\x43\x5e\xab\x87\xd2\x4d\xcf\x59\x1b\x27\x0e\xd9\xbb\xc7\xc3\x25\xcd\xd9\x22\x36\x47\xbb\x07\x64\x05\x6a\xd0\x32\xd5\x9b\xb1\x96\x58\x85\xce\x47\x4a\xd9\xfb\x27\x25\xf9\x78\xf3\x6f\x13\xaa\x0f\xb8\x1b\x49\xf6\x03\xba\x48\xc3\xf5\x2b\x18\xc6\xb7\x3d\xc4\xba\x5e\x5f\x42\xbe\xea\xb1\x93\xf1\x5f\x36\x6c\x56\xe0\xd3\xa4\x10\x11\x72\x64\x06\xff\xd6\x4b\x1b\x36\x47\x4a\x22\xf9\x12\x6e\xfd\x40\xa4\x75\x3a\xae\xa0\x60\xf1\x3c\xe8\xcf\x2b\xe7\xcd\xe3\x6d\x6c\xaa\x7c\xb4\xda\x7e\x5a\x57\x6c\xcc\x78\x81\xa9\x0a\x2b\x74\xc8\x66\x44\x21\x36\x3e\xf2\xca\x42\x3f\xe3\xde\xa0\xe8\xd8\x62\xd5\x9d\xfd\xbf\xcd\xf7\x0a\xee\x10\x53\xd8\xa5\x77\x33\x67\x4e\x86\x30\x3d\x6d\xcf\x78\x90\x6d\x87\xdb\x53\x1b\x17\x88\x92\xfb\x5f\x01\x00\x00\xff\xff\x16\x49\x10\x05\x16\x0e\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x0d\x72\xeb\xac\x0e\xdd\x92\x04\x92\x90\x96\xc3\xef\xfe\x97\xf0\x06\xdb\x6d\xe2\xeb\xd6\x35\x76\x93\x97\xe9\x97\x64\xee\xe4\x56\x01\x0b\x71\x8e\x24\x10\x44\x40\x41\x80\x80\x9d\x00\x90\x17\x04\x41\x80\x86\x1c\x04\x00\x3c\x87\x0c\x08\x27\x5f\x06\x40\xe2\xdb\xf2\x42\x51\x10\x4f\x04\x58\x25\x1a\xd2\xa4\x47\x38\x4c\x52\xa5\xd2\x7c\x86\x49\x8a\x8c\xb3\x54\x82\x46\x49\x69\x91\x16\x9a\xa5\x21\x90\x79\x8b\x7e\x92\x3a\x1f\x66\xa9\x51\xa0\x80\x21\xcd\xd2\xe4\x16\x69\x70\xd1\x41\x9c\x9f\xe0\xc1\x16\xa9\x52\x08\xac\x73\x5b\xaf\xcb\x73\xa3\x6b\x2e\x23\xcc\x23\xf3\x2d\x2d\xd2\x58\x4c\x51\xcb\x24\x25\xd1\x59\x9a\x24\x14\xcd\x11\x67\x69\x5e\xda\xe6\x22\xe0\x13\xd7\x49\xca\x6e\xd1\x56\x22\x71\x2d\x1a\x67\xa9\xe6\x0f\xa9\x99\x03\xcf\xb3\xb4\x2c\x4f\xa8\xc0\x0e\x1d\xcd\x6d\x85\xf5\x43\xaa\xaa\x88\xf3\x73\x25\xb5\x45\x1a\x02\xe6\x0a\xb3\x15\x81\x16\x8b\x6b\x8d\x51\xa4\xcd\xcf\x0d\xd1\x38\x70\xea\x48\x2a\xb4\xc2\xc9\x93\x02\x72\x9f\x4d\x70\x33\xc2\xb3\x9c\x3b\xea\xe8\xbb\x84\x14\xbc\x80\x57\x04\x34\x50\xd0\xce\x81\x4f\x0c\x7f\x7a\xa1\x18\x08\x38\xe8\x7d\xcd\x19\x1a\xf0\xf4\x16\x04\x85\xcc\xd2\xc7\x42\xc0\xa8\xa0\xae\xc3\xdc\xdf\x8a\x9d\x7b\x53\x1f\x9c\xda\x2e\x2d\x0c\xc1\x1b\x34\x7f\x3f\x6a\x2e\xdb\x51\x9b\x7b\xe4\xa8\x6b\x5a\x8f\x7a\xe4\xa9\x23\x6d\x47\x66\xa1\xc2\x66\x16\x9c\xe7\xdf\x9f\x85\x5f\x9b\x45\xcb\xb1\xcf\x22\xc0\x9d\x15\x8e\xfc\xd6\x0a\xd3\x17\xb6\x22\x93\xbb\xcc\x60\x97\xea\xc6\x6a\x0f\x0f\xf0\xbb\xde\xff\x88\xec\xd3\xba\xc2\xb2\xc1\xc8\x23\x6f\x47\x2b\xf1\x85\x31\xaa\x26\x97\x31\xf2\xb6\xf5\x2f\x5f\x5f\xd9\xbf\x5a\x8c\x6b\xab\x07\xac\x25\x08\x1b\x6b\x89\x1e\x84\x71\xd7\x83\xf6\xbd\x25\x08\xa9\xae\x2d\xf9\xe8\xf1\xf1\x39\x62\x59\xa0\xad\x65\xd9\x5e\x17\x47\xc4\x58\x37\x3e\x48\x65\x8b\x0f\x43\x7e\x5c\xce\x43\x72\x61\x85\x81\xbf\xcd\xf9\x8a\x59\x6e\xe9\xf1\x3d\x02\xec\xb7\xf1\x83\xf5\x85\xe3\x07\x32\xba\x0d\x02\x6c\xba\xb5\xa2\x3c\x88\x47\x3d\x56\x7d\x3b\xba\xa0\xdb\x3c\xca\x75\xcb\x0f\xf1\x4f\xf6\xdf\xe9\x3b\x7f\x60\x7e\x63\xd2\x5f\xf3\x6f\x91\xad\x7f\x4b\x7c\x10\x2e\x87\xac\x4b\xa9\x9c\x8e\xc3\xd2\x77\x11\xff\x58\x13\x00\x1e\xe8\xe7\x39\xe1\xcb\xad\x6d\x03\x6d\xd7\x47\xc1\xfc\xff\x11\xd3\x62\x70\x1a\xd3\x90\xb6\xf1\x4f\xe1\x95\xe3\x5f\x55\xfa\x88\x30\xd3\xfe\x1f\x46\x9e\x2a\x9e\x4d\x62\x6b\x89\xd5\x2f\xb3\xe2\xee\xe7\xf8\x4a\x2d\x01\x96\x79\x07\x82\x27\x73\xd5\xc1\x2d\x13\x76\xc4\x26\x3c\x83\x82\x4f\xc8\x0b\xce\xda\xf7\xd9\xf7\x38\x73\x6c\x78\xfb\x36\x15\x0e\xbe\xcc\xdf\xfb\x3a\xff\x6f\x69\x77\x97\x41\xbb\xdc\x81\x22\x2e\xbd\xca\x6a\x7f\x74\x63\x0a\xe3\xd7\xe8\xf5\xcf\xe5\x2f\x39\x89\x5e\x75\x91\x42\xf4\xff\x31\xf4\x4c\x75\x07\x3d\xb3\x7c\x02\x3d\x4b\xee\x0a\x7a\xde\x0f\x21\x87\x60\x35\xaa\xbf\xc5\xf4\x91\xde\x48\xda\xe3\x52\xf4\x81\x03\xc3\x98\xe6\x31\x24\x91\x38\xf5\xf5\x4d\xd7\x46\xab\xf9\x19\x65\xaa\x47\xf1\x08\x56\xf4\xc6\x55\xff\x20\xae\x0e\xcd\xc7\x39\xae\x3e\xc5\x1f\x3e\x57\xeb\x07\x3c\x22\x21\xee\x78\x44\x72\x7c\xc2\x23\x92\x4f\x63\x1e\xb1\x30\x25\x71\xb8\xc2\x14\x4b\x4a\x2d\x5b\x7a\x33\xe5\xa8\x8e\x1b\x53\xe0\x67\xa6\x64\x27\x3b\x4c\xc9\x3e\xee\x33\x85\x2f\x64\xab\xcf\x18\x40\x4a\x6f\x64\x8f\xe8\x18\x8a\x01\x05\xfd\x0e\xb2\xc5\x85\x13\x31\xa0\xf8\x72\x22\x2b\xba\x39\x97\x9f\xca\x8b\x25\x88\xd2\xa5\xbc\x58\xb2\x3f\x91\x17\x87\x5a\xdf\xe5\xc5\x92\xeb\x95\x68\xe7\xc8\x69\xb5\x6e\xf3\x9d\x57\xd0\x83\xbc\x82\x9e\xe0\x15\xdf\xd5\x9e\xfc\x8d\x67\x07\xa2\x54\x0d\x7b\xeb\xf3\xaa\x3f\xac\xcf\xaf\xc5\x29\xae\x2a\xe8\x30\xbd\xe3\xd4\x51\x1d\x43\x71\xaa\x49\xd8\xc1\xb6\x85\x74\x22\x4e\x35\xc3\x6b\x71\xea\x0c\x4f\x72\xa1\xe6\x1c\xe8\x9b\x27\x47\x75\x8c\xf0\x64\x2a\xc6\x7c\xcb\x13\x04\x6d\xe3\x3c\x41\x88\xfc\x7c\x9e\x34\xce\x92\xa0\xfe\x99\x75\xcf\x4e\x05\x78\x04\x5f\x94\x3d\x7c\x31\x9c\xc1\x17\xed\x22\xbe\xa3\xeb\x15\xc4\x5c\xaf\xed\xe3\x7b\xa6\x79\xde\x3e\x1e\xdd\x7a\xfd\xff\xde\xc7\x3f\x5a\xc7\x90\x4f\xb8\xc6\x3b\x3e\x31\xdd\x87\x1a\xf6\x09\x8f\x6d\x7c\x1f\x3f\xf7\xf4\xf9\x0a\x57\xd4\xb0\xb8\x18\xdc\x9b\x2b\x47\x75\x8c\xec\xe4\x91\x60\x2f\x7e\x12\xfe\x10\x3f\xef\x33\x9a\x0e\xe7\xb4\x12\x29\x61\x8c\xf6\x99\xd1\xfe\x40\xe5\x99\x26\x9f\xd8\x9b\xf1\x4c\x7b\x33\x5e\xf4\xa8\x77\xd2\xcd\x3b\xa9\xd6\xa3\xde\xb9\x93\xc5\x70\xf5\xef\x4c\x1e\x63\xef\x2e\xe6\x31\xee\x19\xfb\x69\x79\x8c\x35\x5e\x89\x4d\x9f\x7b\xbc\x77\x6c\x3a\xa8\x63\x28\x8f\x09\xef\xec\xdf\x51\xe4\xc4\xf9\x1a\x8a\x0e\x9e\xaf\x2d\x4c\x11\x6b\x57\x98\x22\x1c\x25\x15\x79\x67\xb1\xc3\x3a\x86\xb2\x58\x90\xba\xc3\x94\xa0\xee\x58\x16\x5b\xda\x6b\x4c\x1c\xce\xc7\x02\xff\x46\xf8\x90\x8e\xa1\x58\xa0\xdc\x76\x10\xd6\xe0\x4f\xc4\x02\x55\x3b\xb9\xa6\xd5\xb8\xda\xff\x08\xa2\xe5\x39\x63\xbe\x59\xf3\x60\x1d\x43\xac\xb1\x10\x77\x58\x63\x5a\x4f\xb0\xc6\x22\x9d\xca\x20\x96\xd7\xf7\x8b\x87\xb9\x02\xac\xe6\xb4\x4e\x5c\xf9\x1b\x55\xfe\x67\x30\xf2\x8b\x9b\xe0\x43\xa7\x08\x18\x2d\xef\x70\x28\x26\x78\xdc\x59\x67\x56\x28\xcc\x3e\x28\xf7\xf7\x5f\x40\xfc\xfb\xaa\xdf\x7a\xef\xb7\xfa\xfd\xd8\x97\xc8\x1d\xf0\xfe\xb4\x77\xfe\x83\xe9\xa7\xf3\x9f\x2f\xbd\x3f\xc5\x33\xf7\xb3\xfc\x47\xd4\x3a\xcb\x84\x04\x15\x55\x29\xfe\x99\xea\xef\xcf\x58\x8f\xc4\xf9\xbc\xbb\xfe\xcb\x3f\xad\xff\xbe\x44\x3a\xaf\xef\x7f\x3f\xa7\xca\x0f\x6c\xc6\x50\xed\xbf\x75\x17\x0f\xcb\xbf\xf7\x7f\x57\xf8\x15\x39\x83\x5f\x09\x67\xf0\xbb\x74\x93\x12\x5d\x61\x70\xed\xef\x9c\xd1\xfc\xae\x97\x56\xda\xb9\x5f\x86\x95\x4f\xdc\x2f\xc3\x2a\x83\xf7\xcb\x2e\x9f\xd5\xd4\x48\x17\x6b\x5c\xb5\xe1\x13\x6b\x5c\xb5\x5d\xaa\xbf\x63\xd4\xf4\xae\xbf\x8f\xe8\x18\xaa\x5c\xb4\x7f\x7f\xff\xb1\xf2\x89\x56\x0e\xd5\xdf\x01\x22\x0a\x8b\x0b\x31\xc4\xe0\xfa\x46\xc1\x01\xa7\xbe\x62\x68\x56\xc9\xb4\x39\xc1\x14\x29\x4a\xee\xc4\x4b\x49\x9d\xd7\xae\xcf\x39\xb2\x80\x4e\x5b\xd4\x4a\x49\x28\x17\x0d\xcd\x8a\x7a\x6a\x01\xc0\xd9\xff\x02\x00\x00\xff\xff\x38\x3a\x0c\xa8\x26\x40\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x41\x6f\xd3\x40\x10\x85\xff\xcb\x9e\x7d\x2a\x82\x43\x6e\x90\x73\x0a\x02\xf5\x54\x45\x68\x6c\xbf\x86\x55\xd7\xb3\xd1\xce\xac\x2b\xab\xea\x7f\x47\x46\xc4\x6e\xf1\x26\xb8\xd8\x34\xce\x31\xca\x78\xfd\xbe\x7d\x6f\xc6\x73\xfb\x68\x0a\xcf\xa2\xc4\x6a\x56\x77\xe4\x04\x99\xb1\xbc\x8f\x2a\x66\x75\xfb\x68\x98\x2a\x98\x95\x51\x0a\x3b\xa8\xc9\x8c\x36\xfb\xf6\x37\x95\x65\x80\x88\x79\xca\xba\x92\x82\x9c\x43\x38\x59\xd2\x40\x3e\x87\x6b\xdf\xd7\xe4\xde\x3b\xf3\xb4\xcd\x0e\x05\x4c\x6a\x6b\x7c\x97\xbd\x67\xf1\xed\x59\x3e\xea\x6f\x29\xdb\xcc\xec\xa9\xa1\xdc\xa1\x93\x29\x4a\x8a\x4d\x54\xca\xad\xb3\xda\xb4\xcf\x7b\x3e\x14\x75\xef\xb8\x8b\x5c\xa8\xf5\xfc\x4b\x48\x8f\xaa\x21\xbe\x8e\x74\xa0\xb2\x22\x51\xbc\x14\xd9\x9d\xd2\xfd\x97\x38\xe5\xef\x18\xb5\xc5\xc3\xfc\x00\xbd\x0f\xb9\xf3\xc5\xfd\x75\xac\xf2\xe7\x12\xa3\x65\x7d\x77\x95\xe0\x04\x23\xec\x9a\x8f\xfa\xa9\x7d\x2a\x8d\x4b\x95\x8f\xac\x2f\xcf\xba\x7a\xff\x61\x4e\xdc\x29\xd1\x64\x3c\x6c\x4e\x18\xf2\x47\xf8\xa0\x9b\xa1\xb3\x73\xc7\x6f\x52\xa7\x05\x94\x36\x75\xdb\x7d\x49\x40\xe1\x6b\x84\xe6\x2b\x29\xd2\xb6\x0c\xa0\x6f\x04\xe1\x8b\x23\x5e\x56\xd7\xf5\x48\x51\xc6\xf9\x67\xe5\x46\x8e\xb5\x65\x62\xf2\x9c\xab\x1b\x07\xba\x7f\x90\xac\x7d\x89\xcb\x13\x5e\xc4\x10\xc0\xfa\x2d\x31\xb4\x13\xfa\x97\x35\x09\xfb\x2f\xcd\x88\x5c\x8d\x24\x9c\xdb\xa1\x29\xa3\xe2\x15\x7c\x02\x87\x22\xe9\xe2\x92\x66\xdf\xd8\x29\x40\x65\x39\x18\x03\x97\xc8\x11\x50\xf9\x1a\xff\x1d\xe5\xcd\x96\x89\x9c\x1c\x71\x81\x73\x6f\x13\x13\x78\xef\xd1\x3c\xeb\xf5\x46\x21\x2d\xe8\xbf\xde\x87\xa8\x0f\xb4\x3b\x7d\x1f\x35\xb9\x88\xc4\x3b\x17\x71\x1d\x63\x83\xdc\xd6\xad\x0f\x8b\x4b\x02\x32\xa0\x22\xcb\x28\xd7\xc7\x96\x9b\x25\x7d\xf2\x62\x6a\x57\x9a\x77\x3f\x3b\xbf\xb3\xe9\xa0\x1f\x4b\xf0\x1b\x46\x77\xfb\x33\x00\x00\xff\xff\x30\x62\xdf\xaf\xb4\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledThorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xcd\x4a\xc3\x50\x10\x85\xdf\x65\x70\x79\x57\x82\x2e\xb2\xf3\x01\xb4\xd2\xe2\xaa\x74\x71\xcd\x1c\x21\x90\xcc\x84\x99\xb9\xd1\x50\xfa\xee\x52\x2c\xd6\x94\x1a\xf0\xa7\xdb\xe1\xcc\x39\x1f\xdf\x7a\x4b\x59\x54\xc6\x4e\x8b\x53\xf5\x92\x5b\x47\xa2\x46\xfa\x12\x4e\xd5\x7a\x4b\x8d\x30\xde\xc0\x54\x85\x15\x24\x92\xdc\x81\x2a\x12\xbc\xde\x67\x0f\x18\x25\x8a\xb1\xdf\x9f\x32\xb3\xc1\x9d\x76\x9b\xcf\xd4\xd5\x0a\x71\x1a\xc3\x00\x09\xda\xa5\x5f\xcd\x16\x3f\xbb\x98\xbe\xe4\x0f\x55\x87\x87\xcc\xbc\xb0\x25\x3a\x1d\x70\xfc\x7b\x56\x6d\x27\x98\x77\xcc\x1f\x99\x27\xff\x0b\xea\x74\xba\x36\x70\x13\xc7\xb6\xd2\x48\x5c\xdf\xdc\xce\xd1\x1a\x6a\x1d\x60\xe3\x32\x07\xce\x3c\x4e\xc5\xee\x59\x1f\xdb\x2c\xff\xa4\xd6\x7b\x15\xd7\x9f\xd9\x1d\xe1\x0b\x7b\xd0\x19\xb3\xab\xd3\xd6\x0b\x31\x4e\xd4\xb4\xa8\xe3\xbb\xe1\xcd\x7b\x00\x00\x00\xff\xff\xa5\x6f\x0a\x97\xf0\x02\x00\x00")

func compiledThorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledThorAbi,
		"compiled/thor.abi",
	)
}

func compiledThorAbi() (*asset, error) {
	bytes, err := compiledThorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/thor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledThorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xc0\x01\x01\x44\x21\x08\x03\xd0\x4a\x63\xca\x84\x38\x88\x9f\xfe\x11\xae\xc2\xbd\xb3\xf0\xa7\x05\xdb\x42\x40\xd8\x70\x0a\x40\x60\x1e\x50\x26\x17\x4f\x9d\x3a\x5c\xf0\x20\xa8\x9b\x64\x9b\xaa\xb2\xfb\xeb\x68\x36\x4c\xaf\x2b\xef\xcd\xbd\x38\xae\x2f\x7c\x2a\x6f\x32\xcc\x69\xc6\x97\x6f\x4c\x87\x98\x36\x80\xf9\x0b\x00\x00\xff\xff\x5e\xa4\xd1\x32\x98\x00\x00\x00")

func compiledThorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledThorBinRuntime,
		"compiled/thor.bin-runtime",
	)
}

func compiledThorBinRuntime() (*asset, error) {
	bytes, err := compiledThorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/thor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
	"compiled/thor.abi": compiledThorAbi,
	"compiled/thor.bin-runtime": compiledThorBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
		"thor.abi": &bintree{compiledThorAbi, map[string]*bintree{}},
		"thor.bin-runtime": &bintree{compiledThorBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

