// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x41\x6f\xf2\x30\x0c\x86\xff\x8b\xcf\x3d\x7d\xdf\xad\xb7\x1d\xd8\xb4\xc3\x76\xd8\x15\x21\x94\x36\x06\x45\x2a\x0e\x8a\x9d\x8e\x0a\xf1\xdf\x27\x3a\x20\xa3\xb4\x10\x46\x51\xd9\xb1\x4a\x62\xbf\x7e\x6c\xbf\x1d\xaf\x21\xb7\xc4\xa2\x48\x20\x15\xe7\x31\x01\x43\x4b\x2f\x0c\xe9\x78\x0d\xa4\x16\x08\x29\xb0\x99\x13\x3a\x48\x40\xaa\xe5\xf6\x5b\x69\xed\x90\x19\x36\x93\x64\x7f\x85\x94\x98\x12\xdf\x71\x25\x90\x80\xf5\xd2\x0c\xd1\xfe\x78\xa9\x2a\x95\x15\x08\xe9\x4c\x15\x8c\x09\xb0\x28\xc1\x37\x2f\x2a\x33\x85\x91\x0a\x52\x28\x0d\x7e\x86\xb7\x33\x4f\xb9\x18\x4b\xb0\x49\x7e\xea\xde\xbd\x3e\x15\x3e\x8d\x50\xee\x70\x61\x4b\x3c\x52\x1d\xa5\x8c\x2c\xed\x2f\x5d\xd2\xd7\xe0\x1a\x72\xcf\x8c\xe3\x21\x80\xdd\xdc\xe8\x17\xbc\x28\x3b\xb3\xb6\xa8\xd3\x76\x17\xd4\x76\x98\x55\x82\xfc\xff\x5f\xc7\x61\x1d\xf3\x6e\x1c\x9a\x55\x3e\xff\xd5\xf6\xbc\xf2\x88\xb4\x75\x8c\x3a\xae\x4b\xf7\x97\x1e\xb3\x89\xf4\x60\xee\x11\x8d\xfb\xe3\xd4\x42\x6e\x43\xdd\x87\xb7\x1c\x16\x75\xb4\xc2\xdc\x8b\x75\x0f\x34\xc8\x31\xd3\x30\xef\xb2\x98\xc2\xb0\xd4\x83\xdd\x61\x34\x58\x8f\xbe\x6d\x8b\x1e\x2e\x19\x8d\x24\xdb\x4a\xce\x19\x8f\xca\xb7\x08\x07\xb0\x1f\x1c\xae\x65\xbf\xf8\x97\x06\x60\xd3\x28\xf6\xd3\x33\xf0\x03\x03\xa5\xf5\x5d\x7f\xca\xd7\xaf\x7d\x7f\x23\xd6\xdc\xd2\x27\xdd\xa7\x51\x5f\x84\xa0\xc8\x52\xb5\xb0\x9e\xdb\x28\x18\xd2\xb8\x42\xbd\x9f\xce\x08\x28\x87\x17\xbb\x60\xd7\xd4\xff\x5d\xf9\xee\x1c\x4b\x24\xe9\x5d\x61\x48\x76\xf0\xe9\xe3\x7c\x93\xaf\x00\x00\x00\xff\xff\x56\x0d\x79\xbc\x05\x0b\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x09\x6e\xeb\x3a\x0c\xbc\xd2\x50\x5c\x44\x1d\x47\xeb\xfd\x8f\xf0\x21\xcb\x4e\x5c\x67\x2d\xf0\x3e\x5a\xa3\x45\x3a\x1e\x51\x1a\x6e\x62\x0c\xf3\x11\x68\x30\x40\xd8\x08\x46\x40\x2e\x1a\x8d\xc7\xfe\x63\xe8\x30\x20\x20\x1b\x00\x56\x08\x99\x71\x30\x74\x4b\x21\x39\x91\xcc\x35\x05\x1a\x1d\xc6\x21\x21\x85\x86\xbe\xd0\x5e\x16\xca\x6d\x48\x6b\x43\x36\x94\x50\x17\xaa\x82\xd1\x52\x8e\x0b\xa5\xb1\xd0\xc8\x95\xa8\xb5\x65\x81\xa2\xec\x68\x62\xb3\x98\x74\xa1\x1e\x17\x9a\x4b\xe4\xce\x64\x0b\x2d\xf9\x40\x7b\xcc\x16\xc7\x85\x5b\x8b\xd4\x80\x8b\xdd\x1a\x4a\x0d\x7d\xd4\x85\xb6\xb4\xa3\x2c\x15\xde\xf7\xdd\x86\x2f\xb4\x55\x20\x49\xf1\x0d\x0d\xd8\xb5\xf5\x11\x42\x2c\x9c\x16\xca\xac\x51\xcb\xf4\x94\x63\x34\x2d\x2c\xa4\x9b\x7f\xa6\x4f\x6f\xe8\x44\xea\x30\x80\x0c\x79\xf7\x2e\x78\x8b\x81\x92\x4d\x3b\x5a\xd4\xa6\x1d\x81\xd2\x95\x97\x90\x88\xcc\x69\x46\x2d\x6c\xef\x26\xcb\x91\x68\xbe\x1b\x7c\xdf\x75\xd8\x65\x57\xda\xa2\xf8\x72\x57\xa3\xb9\x2b\x70\xb3\x40\x14\x9f\x9c\x9b\x20\xb4\x31\x0f\x56\xc8\xd7\x7d\xb8\xbf\xd9\x47\xa2\xdf\xd5\x25\x26\x25\x75\xd9\x72\xf0\xaa\x33\x90\x4d\x8d\x2e\xd8\xd4\x0a\x7c\xfb\x9c\x68\xfa\x40\x43\xc2\x5c\x3b\x73\xd8\x79\x31\x1c\xf3\x0d\x28\x3d\xf7\x08\xc5\xf1\x5c\x8f\xeb\x59\x4f\x0a\x57\x3d\xd9\xbe\x8d\xd6\x3a\xd3\x17\xd1\xa1\xaa\xbf\xca\x09\xf1\x7c\x3e\x63\x97\x5f\xf9\x5c\xc1\xa7\xd5\x01\xfc\xd4\x0f\x9a\xea\x99\x45\x5f\xe7\x8f\x13\x59\x82\x21\xac\xfd\x20\xc2\xd3\x82\x76\x39\xdb\xe3\xfe\xad\x5f\x5f\xd8\x8b\xb6\x9d\x4f\x27\x1b\x09\x9b\x6d\x5c\x2d\xcc\xfe\x74\x54\xfb\xe4\x1d\x55\x34\xa3\xb1\xb2\x48\xc9\xe9\xde\xe1\xa6\xfd\xa3\xc7\x21\xac\xc8\x41\xb0\xad\x38\xa2\xe7\x0c\x76\xda\xce\x1e\x1d\x5c\xb6\xbc\x23\x84\x7c\xad\x8f\x50\x4d\x33\x78\xd0\xc1\x28\x7e\x66\x28\xe6\x73\x58\x9d\xd9\xa2\x4f\xce\xcf\xfc\x88\x91\xf8\xec\xce\xac\xd0\xa8\x78\xae\xfa\xe8\x92\x1e\x5e\xe9\x3e\x75\xf3\x9b\x7e\x97\x49\xda\x75\x3f\xe9\x34\xd3\x1b\x1e\x96\x8d\xf0\x9d\x5f\x98\xaf\xf9\x75\xf5\x0b\x8b\x7c\xf2\x0b\xa9\xde\xec\xe9\x8f\xfe\xf9\x22\xe6\x7b\xdf\xff\x7b\xf5\xe5\xda\x3f\x1e\xd4\x57\xfe\xac\x7e\x31\xdb\x8f\xfc\xf1\x27\xca\xe3\x28\x3d\xd6\x98\x2b\x07\xf1\x36\x44\x9d\x6a\x80\x65\x97\x9c\x0b\xd7\x22\x3d\x36\x0d\x54\x94\x93\x17\x09\xc5\x7c\x76\xf5\x11\x3d\x6b\x8e\x4d\x88\xfa\xe1\x9d\x73\xa7\xca\x41\xb1\xba\x1a\x5e\x65\xdb\x7e\x53\xff\xcf\x35\x26\x9a\x3e\x78\x53\x2c\xbf\xf5\x26\xcd\xff\xd3\x4d\xcd\xe6\xc3\x79\x53\x50\x62\x5d\x7f\xf7\x37\xe9\x83\xe2\xdb\xd4\xc3\x7f\x9c\x61\xd2\x3f\xd5\x97\x8c\xf7\xf5\xc5\x29\x2c\xec\xea\x95\xe7\xca\x8f\x59\xcd\xed\xac\xdc\xff\xb9\x72\xff\xa4\x5c\x0d\x1f\x94\x6b\xa4\xf7\xb5\xb5\x22\xf6\xfe\xb3\x62\xcb\x8d\xf3\xef\x43\xb6\xfc\xe9\xcd\x73\xa9\x8a\x3f\x3d\x8b\x3d\xcc\x7f\xd7\x98\x18\x97\x7f\x75\x0b\x1e\x16\xed\xe7\xfc\x73\x61\xfa\xe4\xaa\x83\x34\xcd\x5b\xd3\x5c\xe6\xad\xf9\xc0\x0a\x93\x35\xef\x99\xc9\xdc\x78\x63\xf2\x1c\x0b\x3d\xf6\x4a\xf9\xb3\xaf\x8f\xef\x01\x2e\xf3\xf9\x55\x7f\xb0\x97\x55\xc2\xb3\x82\xee\x55\xb2\xcd\xbd\x6b\x26\xbe\xd5\x8d\x88\xd3\x7d\x22\x36\xd8\x77\x31\x8b\xb8\xce\x8f\xd7\x98\x45\xd2\x2f\xef\xa8\xf8\x33\xfe\xfe\xa0\x63\xde\x51\x69\x8c\x98\x95\x84\x25\xd5\x56\xa5\x0c\xcb\x49\xb4\xc4\xd6\xc4\x13\x2b\x79\xa9\xe4\x01\x35\xb4\x5c\x2d\xa4\x32\xcc\x1a\x9b\x7a\x69\x8c\x8c\x1a\x3d\x1c\xf3\xf5\xab\xd9\x3a\x5f\x3a\xda\xb9\xc7\x01\x99\x4c\x2d\xc4\x1c\x73\x0c\x0c\xf5\x00\x94\x4a\x99\xa8\x65\x2f\x3d\x51\x94\x01\x1e\xa9\x34\x91\x9a\x46\x55\xc4\x14\xd4\x46\xa3\xd2\xb2\x52\xea\xb9\x0b\xb8\x7b\x2f\x9c\x63\xf6\x64\x36\x80\x90\xfe\x0b\x00\x00\xff\xff\x81\x61\x8f\x4d\x42\x0f\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xc1\x6e\xe3\x38\x0c\xfd\x17\x9d\x7d\x5a\xec\x16\x8b\xdc\xd2\x62\x77\x4e\xc5\x00\xd3\xde\x8a\xa2\xa0\x6d\xa6\x10\x20\x53\x86\x44\x39\x35\x8a\xfe\xfb\x20\xa9\x63\x3b\x1d\x29\x56\x12\x8f\xed\xb9\x15\x28\xa9\xf0\x91\x8f\x4f\xa4\xfc\xf4\x2e\x32\x4d\x96\x81\x58\xac\xd8\x38\x4c\x84\xa4\xd2\xb1\x15\xab\xa7\xe7\x44\x10\x14\x28\x56\x82\x80\x65\x85\xdf\x90\x1f\x35\x83\x7a\x70\x65\xa9\x6a\x91\x08\xed\xb8\x31\x7d\x3f\x58\x8a\x44\x70\x5d\xee\xfe\x72\x92\xf8\xaf\x7f\x6e\xc4\xc7\x73\x22\x4a\xa8\x21\x55\x28\x56\x1b\x50\x16\x13\x61\x19\x18\xef\x1d\x43\x2a\x95\xe4\x5a\xac\x44\x25\x71\xdb\xf9\x6e\x1c\x65\x2c\x35\x89\x8f\x24\x32\xbe\x02\x87\xe2\xb1\x6c\x24\xbd\x46\x86\x53\x3a\x83\x83\xe1\x34\xde\x6d\x3c\xed\x8f\xbe\x18\xcc\x24\x56\x68\xba\x23\x20\xcf\x0d\x5a\xbb\x3f\xe1\x60\x05\x85\x76\xc4\xfe\x8c\x35\x36\x50\x96\x46\x57\x01\x6c\xd6\x65\xd9\xee\xcc\xf6\x80\x54\x6b\x15\x09\x90\x34\x1d\x8c\xce\xcc\x7a\xfb\xf3\x3b\x48\x1e\x80\x1e\xd6\xdc\x82\x02\xca\x06\x2b\x34\x25\x63\x78\x56\x22\x87\x99\x93\x69\x62\x03\x19\xaf\xfd\xc9\xed\xb1\x87\x70\x7b\x0f\x96\xbd\x24\xeb\x70\x5a\xe4\xbb\xe6\xc8\xd6\xba\x43\x3b\x36\x55\xc6\xc0\xc5\xfa\xea\xae\x61\x03\x64\x37\x68\xfe\x37\xba\x38\xa0\x9f\xb5\x85\xc2\x79\xd9\x18\x5d\x4c\x9a\x8f\x85\xe6\x21\x9e\x1f\x76\xd7\xb4\x72\x98\xf6\x0f\x9d\xdd\xef\x23\x7c\x50\x5f\x72\xcc\x64\x01\xca\xc6\x88\xcb\xbf\x63\x5e\x4a\x21\xb5\x8e\x4e\x70\x06\x4a\x0d\x64\xb7\x15\xf6\x3b\x4d\xd6\x15\xe5\x2e\x8c\xb5\x52\x7a\x3b\x93\xca\x07\x69\x15\xb8\xa2\x3a\xb0\x11\xcd\xf3\x09\xf6\xc1\xa5\x91\xb7\xd8\xc4\x9d\x13\x5d\xd7\x62\xf8\xb2\x68\xa0\x4e\x7a\x65\x84\xf8\xfa\xa2\xb7\x34\x10\x6e\xfa\x59\x90\xef\x1b\x7f\x49\xd2\xb6\x5e\x93\xcd\x17\xd1\x7a\xd6\x81\x78\x3d\x99\x6d\x0f\xbf\xfa\x67\xfc\x39\xfd\xb3\xce\x73\x5f\xff\x4c\xa6\xc7\xb6\x2e\x52\xad\xa6\xdf\x11\x2e\x94\x63\xbf\xd6\x2e\x94\x25\x63\x8e\x28\x4b\xda\x74\x3c\x45\xf8\xef\x0d\x33\xc7\x7a\x8e\xf4\x8f\xc7\x24\xef\x64\xd4\xcb\x75\x70\xbe\xea\xf5\xfd\xab\x41\xcc\x2f\xaa\xc7\x64\x0b\x52\x70\x90\xe9\xdb\x18\xcc\xa5\x8f\x99\xc9\xd1\x32\xaf\x2b\x34\xf5\x0f\x60\xdf\x65\xd2\xb3\xc4\xb7\x52\x1a\xd8\xc3\x39\xb2\xbb\xf9\xdb\xb3\xd3\xf7\x66\xa7\x79\x24\x11\x17\xc3\xe5\xd0\x43\xd3\xad\x33\xb4\x67\xd9\xb2\x9e\x0d\x66\x0b\xeb\xfa\x21\xf0\xba\xe6\xfe\x3a\x26\xce\xb1\x62\x0d\x0f\x88\xfd\x5d\xb1\x44\xca\x07\xa6\x48\x38\xbd\xb8\x18\x2c\x40\xd2\x6e\x2a\x58\x76\x65\x23\xd4\x2e\x42\xec\xa2\xb5\x2e\x4e\xea\x9a\xd9\x6f\x56\xc1\x1b\xf5\xea\xe8\xa0\x65\x0b\x5f\x7d\xcf\x40\x3b\xd4\xef\xfb\xff\x3f\xea\x5b\x9c\xb7\xdf\xcf\x59\xa9\x16\x3b\xe2\x00\x69\xaa\x0b\xed\xac\xaf\x74\x92\x72\x7c\xc3\xfc\x90\x83\x68\x09\x08\xf8\x9d\x50\x84\xd6\xa3\x09\x22\x42\x21\x02\x2e\xc3\x8a\x11\x70\x8c\x53\x10\xaf\x76\x34\xd6\x58\x21\xf1\x19\x59\xfd\x82\x35\x3e\xad\xc7\x8e\x51\x0f\x90\xc7\xb7\xe3\x62\x03\x0e\x3b\x0d\x89\xc2\xda\x23\x0a\x17\xc2\xbc\x94\xed\xc7\x01\x6b\x95\x07\xbf\x87\x84\xbd\xe2\xbe\xa2\xf8\x9e\xc4\xc6\x00\x7b\xe2\xf9\x3f\xe0\x10\x5a\xb5\x03\xf0\x5e\x2a\x50\x2e\xf0\x04\xd6\x98\x3c\x76\x9b\xf7\x28\x90\x4e\x8c\x65\x01\x8f\xf0\x94\x76\x15\xb0\x4f\xe9\x00\xf5\x0b\xb0\xe7\x9f\x01\x00\x00\xff\xff\xe0\xe9\x25\x82\xf5\x1e\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x09\x96\x24\xab\x0a\xdd\x12\x83\x20\x2e\xc7\x71\xff\x4b\xf8\xc7\x50\x33\x63\xca\xa1\xea\xf5\x7f\xfd\xaa\x4e\x77\x65\x72\x0c\x84\x0b\x5e\x41\x43\xa1\xff\x3a\x10\x52\x00\xc7\x8a\xa0\x08\xe8\x51\xbc\x72\x9b\x3f\x0a\x15\x14\x80\x20\x2a\x00\xb0\x80\x43\x55\x06\x97\xb1\x36\x87\x86\xe8\xb6\x67\x54\xbc\x81\x32\x68\x2b\xa5\x02\x0f\x69\x48\x53\x1a\xa4\x46\x9f\x86\x94\x48\x86\x14\x31\xe4\x5c\x65\x4a\x65\x8e\x45\x43\x85\x52\xca\x90\xfa\x38\xa5\xad\xa6\x14\xb5\x0d\xa9\x95\x21\x25\x24\x8d\x11\xc2\x90\x26\x37\xa5\x9c\xcc\xd3\xd2\x50\xf2\x94\x7a\x42\x97\xdd\xd0\xc0\x30\xc7\x32\x72\xae\xa2\x7e\x48\x29\x4c\x29\x45\x17\xbd\xca\x90\x0a\x0d\xa9\x28\x65\x46\xb2\x21\xf5\x7e\x48\x35\x19\xa3\x8f\x53\x6f\x98\x1a\x3c\x44\x30\xe2\x81\x0e\xa7\x3a\xa4\x96\x63\x8d\xa6\x3a\xa4\x65\x7a\x11\xb8\x52\xe6\x36\x70\x70\x68\x53\x2a\xc5\x42\x72\x43\x83\xe3\x89\x43\x48\x2e\x61\xca\x34\xa4\x6e\x6a\x88\x01\x24\xe4\x94\x86\x54\xa7\xc7\x31\x27\x97\x09\xea\x90\xda\xb4\x21\x51\xa9\xe2\x70\x8e\x8d\x38\xa5\xaa\x5a\x21\x0d\x1c\x5c\x9d\xe8\x64\x76\x19\xac\x0e\x1c\x04\xa7\xde\xec\x0a\xe7\x1c\xe3\x31\xf2\xc5\x02\xb2\xe4\x81\xba\x50\x9b\xd2\x58\x1c\x65\x19\x7a\xc5\x4d\x24\x4b\x51\xaa\x85\x87\x65\xb2\xec\xad\x68\x84\x69\x66\x89\x84\x69\x59\x95\x26\x52\xeb\xb0\x57\xf2\xc4\xb7\xfa\xd0\xd8\x97\x81\x83\xd4\xe9\x5b\xab\x1e\x20\xb4\x21\x55\x24\xf1\x92\x7a\xd6\x1a\xb4\x22\x89\x1d\x4a\xb7\xd8\x7a\x7e\x3f\xa4\x9b\x24\xf4\xf1\x8c\xa2\x7d\xbc\x03\xc1\x00\x86\x7d\x55\x10\x00\x0e\x89\x41\xe8\xf1\x85\xc6\x4f\x4d\x51\xcf\x9a\x62\xdd\x34\xe9\x53\x53\xd7\x61\x60\x24\x64\x9b\x56\x40\x63\xeb\x36\xe0\x73\x86\x80\x02\xb6\xcd\x3a\xbf\xf7\x27\xd8\xb8\xeb\x96\xd4\xc7\x23\x8c\x19\xeb\x96\x07\x46\xd0\x9f\xe7\xed\xef\xb2\x12\x01\x0b\xf5\x79\x05\xc6\x6f\xd8\xfe\xf5\x19\xbb\x5e\x6c\xa8\x36\xb4\x10\xfa\xa9\x85\x6d\xb3\xb0\xdb\xb4\x69\xe9\x14\x80\x00\x10\x81\x31\xa0\x1e\x2d\xec\x9a\x03\x0d\xdd\x2f\x31\x21\x86\x13\x26\xe4\xfa\x77\x54\x88\x93\x47\x80\x37\xb6\x11\x54\x05\x72\xdc\x9f\x52\xef\xf7\xd8\xa3\xa0\x7c\x81\x3f\xe9\x05\x7f\x0b\x2f\xe7\x42\xd0\xba\x45\x78\x3d\x6d\x72\x9f\x07\xd5\xef\x47\x05\x3b\xfb\x93\xe8\x7e\x0e\x43\xd4\x2d\x82\x6b\x3e\xef\x6a\xd7\xd4\x63\xb8\xb4\xa5\xf6\x2d\x3a\x27\x6d\xe0\x06\x52\x16\xd2\xde\xba\xea\xff\xa1\xbe\xd0\xff\x3c\xf4\x31\x5c\xec\xfb\xda\xdb\x10\xf7\x96\x31\xbb\x93\x26\xe6\xac\x08\x89\xf2\x7e\x6d\xb4\x16\x20\xe0\x3e\xd3\x5e\x46\x9b\xa5\x7c\x1b\xed\x8b\x6d\x89\xf7\x91\x67\xa3\x5f\xe4\xe8\x49\x47\x3c\xfb\xf7\x3d\x52\x89\xc3\x5e\x53\xe7\xb4\x1f\x64\x71\xe2\xb2\x7f\xba\x9e\xf3\x93\x5b\x7e\xf7\x74\x3a\x70\xd3\x71\xdc\xd7\xb1\x70\xc4\xdf\x7a\x7f\x40\x70\xef\xb7\x73\x97\xf5\xb7\xb1\x67\x86\xb6\x1f\x25\x3f\xf3\xef\xb8\xc6\x9d\xff\x7a\x7d\xec\xec\xcc\x02\x7b\x1d\xe1\x1c\x9f\x6e\xc1\x63\xbf\x58\xa3\x62\x3e\x8d\x72\x19\xde\xd8\x99\xf5\x7d\x1c\x08\xb5\xef\x19\x9d\x09\xb7\x1d\x64\x32\xbd\x7b\x30\xfa\x7d\x5c\xea\x6f\xd7\xef\xe0\x03\xd0\xfe\xbf\x6f\xa7\x1f\x05\x7b\xda\x5d\x77\x5e\x0b\x9d\xf1\x1d\xd8\x54\xde\x73\x81\xf4\xea\xe5\x86\x69\xab\xed\xb9\x47\xdc\x79\x7d\xff\xc8\xf6\x0d\x29\x84\x9a\x0f\x33\x5f\xe2\xff\x3d\x67\xd4\xb2\xcf\x02\x09\xe7\xf8\xfe\x69\x64\x6b\xdb\xaf\x0e\x29\x67\x7e\xf9\xde\xf2\x06\x07\xcb\xdb\x39\x7f\x3f\xae\xd5\x89\x65\x33\xda\xe9\x51\x3c\xc7\xe7\x6d\x86\x77\x00\x47\x86\x43\xaf\x44\x74\x7b\x42\xb9\x2a\x22\x37\x58\xb9\x6f\xb3\xd6\x9a\x5c\xd3\xed\xda\xf8\xc7\x37\x51\x15\x71\x6a\xda\x3c\xc1\x2f\x7e\x9e\xab\x66\xd4\x41\xd3\x96\x83\xb5\xdc\x2b\x2b\xdd\x7c\x7a\x54\x63\xeb\x93\xdb\x6a\x30\x82\xe0\xcc\xf7\xca\xc9\x9c\x50\x70\x9d\x21\x85\x7a\xed\x44\x60\x12\x40\xa4\xaf\xd5\x80\x01\x7c\xb3\x2c\xa9\x62\x95\x9a\x6a\xf6\x45\x52\x41\xd7\x3c\x3a\xf2\x05\xab\xb9\xc6\xa5\xf4\xbe\x28\x43\xf3\x89\x28\x60\x95\x44\x00\x31\x5b\xf6\x99\x53\x20\x09\x43\xe3\x9b\xda\x33\xb2\x6c\x88\xf7\x19\xb7\x3a\x6c\xab\xf6\x76\x08\xf7\x0e\xed\x12\x93\x7d\xbf\xa6\x1b\x32\xab\x2e\x5d\x9c\xd2\x6b\xd1\x67\xc7\xd7\x11\x59\x3d\x1f\xd0\xb0\x05\x1c\x6c\x4f\x2c\x7b\x8c\x81\x6d\xd3\x66\xde\x80\xd3\xcc\x18\x4f\x17\xfe\xc9\x2a\x11\xb8\xe1\x1a\xe1\x0e\xf5\xe1\xb1\x9a\x94\x51\x67\x7e\xf4\x66\x75\x41\xe6\x5e\xf9\xb3\xeb\x5a\x1f\x7e\x59\x77\x7f\xf9\x73\xb3\xef\x75\x2f\x1f\x15\xf5\x97\xfe\xc6\xcb\xfe\x72\xf6\x37\xd9\x67\x7f\x99\xaf\x16\x8d\x55\x6d\x84\xa3\x5b\xf4\xe5\xc0\x3f\xf7\xb8\xac\x5e\xd4\x5c\x47\xe6\x25\x0e\xf2\x12\x07\x32\xde\xe3\x30\x50\xa1\x07\x2a\x6e\x43\x05\x3e\xa1\x62\x7c\xa9\xaf\x4e\xa8\x74\xd2\xbb\xa0\x62\x17\x7b\x50\x7d\x63\x69\x59\xaa\xb8\xa8\xbe\x26\xa2\x66\xc8\x85\x31\x83\x69\x50\xc5\x2c\xe6\xa8\x73\x25\x79\x64\x57\xa4\xa9\x33\x22\xcf\x90\x90\x7c\x31\x57\xb3\xd1\x13\x8b\x3b\x6f\xed\xe9\xe7\xdb\x5d\x36\xce\xce\xe7\xcb\xcc\x94\xbf\x9c\x99\xd6\x2e\xf5\xe9\x29\x06\x9d\xbc\xde\x65\x26\xc8\x8d\x87\xd7\x4c\xed\xf9\xb9\x34\x52\x3d\xcd\x19\x38\xf4\x5c\x34\xa7\x88\xe8\x9f\x7c\x85\x81\xc3\x11\xcf\x83\xce\xce\xb6\x83\x97\x9f\x5c\x78\xe1\x65\x36\x45\x35\x16\x0a\x9d\xe1\xa9\x8f\x24\x10\x67\x14\x60\x76\xcb\xc1\x1f\xfb\xc3\xeb\x2c\xf2\xc5\x2c\x7e\x3f\x4b\xef\xe5\xc5\x19\x07\xe8\xb1\x11\xb9\xf7\xd1\x2e\xb9\xf6\x0a\x39\x03\x45\x88\xbd\xf2\x91\x4f\x19\xc5\x7f\x39\xa3\xe2\x65\xff\x3f\x67\x54\x3c\xc6\xff\x9f\x64\x94\x3c\x66\xbd\xd4\xff\x51\xd1\xa8\x57\x11\x79\xab\x1e\xd7\x38\xfd\x82\x1f\xd7\x69\xd4\x3a\x5b\x79\x83\x9f\xbe\xc4\x8f\x67\x6e\x3e\x38\x72\x54\xeb\x4f\x9e\x1c\xe7\x17\x9d\x2d\x17\xc2\xfa\x1d\x6f\xc6\x7c\x5e\x3f\x17\x84\x4b\xbb\x22\xec\x1b\x48\xd5\x12\xa8\x64\x74\x64\xd8\x42\xcc\xd5\x2c\x14\x52\x72\x0e\x73\xce\x39\x55\x57\x0b\x2a\xa9\x62\x4d\x21\x57\x71\xcd\x11\x6a\xa1\x58\xa3\x97\xce\x91\xf4\x47\x38\x12\x9f\x2b\x1a\xe9\xb9\x8b\x1f\xeb\x95\x4f\x1c\xba\xce\x85\xff\x7a\xc6\xa7\x70\x3e\x5f\x3a\xc7\x23\x1d\xf7\xff\x4b\xc6\x9f\x59\xee\xbf\xbe\xc6\xaf\x1e\x67\xf4\x1f\x2b\x76\xb7\x2a\x76\x71\xce\x5c\xfb\x4d\xb5\xfe\xa6\x62\x87\xad\x23\x2f\xcc\xb7\xfb\xc8\x2e\xb3\x86\xdd\xfd\x7b\xd8\x3a\xf3\xad\x3a\xfc\x9e\x85\x4b\x6f\x17\x3f\xb2\xb0\xfe\xe5\x08\xe5\x7a\x39\x5f\x3d\xe5\x64\x6e\xf8\xc7\x59\xb8\x60\x3a\xcd\x5a\xc8\x99\x5c\x58\xb8\x5c\xea\xff\xc2\xb6\x45\xed\x31\xae\xcb\x1c\x7d\xe6\xea\x75\x1b\x60\xba\x7e\xdf\xe0\x6c\x2f\x71\x96\xce\xe4\x3b\xb6\xee\xc8\xbb\xc9\xd6\x6e\x55\xb5\xc6\x80\x1b\x8f\x4f\xb6\x9e\x31\xb9\x74\xeb\x2b\x6a\xf6\x88\x5a\xfc\x8e\xd9\x4b\x3a\xe3\x77\x8e\x5a\xc9\xf9\xa6\x22\xbe\x89\xca\x56\x59\x5e\xaa\x64\xca\x96\x4a\xf2\x2e\x68\xa3\x84\xc1\x2b\x41\x51\x00\x73\x31\x67\x97\xc4\x42\x40\x0a\xd1\xf5\x49\x42\xf3\x16\x31\xa4\x1a\x29\x35\xa2\x4a\x4a\x91\x4c\xfa\xef\x3c\x7f\xa7\x5e\xef\x6c\xab\x71\x8f\xcb\x05\x8d\xed\x6c\x63\xab\x93\x0e\xe8\x41\xff\x74\xda\x17\x78\xdd\x49\x7c\x62\xc2\x75\x67\xf5\x2f\xf7\xa9\x2f\xed\x59\x77\x5d\xff\xae\x3d\xaf\x2b\xe3\xd0\x57\xc5\xc7\x9a\x75\xe4\xb8\xd1\xac\x4e\xb0\xd7\xad\xe2\x02\xec\x6f\x87\x3e\x45\x62\xdd\x81\x8e\x5e\xf2\x07\x9c\xf7\x0f\xbb\xcb\x8f\x58\x35\x3d\xdf\xdf\x9d\xd7\x52\xf3\xf4\x96\x01\x5d\xe0\xef\x30\x58\x77\xa5\x47\x04\xdc\x1f\x67\xfd\xb1\xab\xbe\xf6\xb8\x9c\xcf\x4f\x2f\x1e\xd7\xf4\x9e\xf3\x47\xdc\x16\xff\x8f\xbb\xc1\x3b\xce\xbf\xeb\x5c\x56\x7f\x87\x80\xf5\x07\x35\xb6\x33\x5e\x8c\xf2\x5f\xa9\xb0\x11\xfc\x87\xf3\xa9\xad\x2d\xbe\xa9\xb0\x4b\xe2\x9c\x2b\xb9\x4a\x48\xa4\x41\xd8\x2a\x49\x14\x57\x02\xc5\x58\x05\x52\x31\xab\xe0\x13\x27\x0a\x51\x31\x16\x96\xca\x92\x1c\x16\xcb\x8c\x55\x8c\xdf\x9c\x43\x6c\xfe\xda\xd1\x53\x38\x79\xfa\x1d\xcf\xe2\x31\xab\xed\x3f\x9d\xd7\x88\xee\x43\x7d\x8d\x28\xef\xeb\xeb\x53\x5e\xcf\xda\x6f\x57\x03\x8e\xb3\xdd\xae\x48\x11\x49\x45\xfc\x3d\x22\xeb\xdd\x8e\x9e\xb5\x7f\x88\xed\x66\x24\x61\xab\x2e\x06\x26\x3f\x63\x3a\xc4\xf2\x11\x9f\xfa\x01\x1f\x81\x35\xb2\x7d\xd1\x1f\xaf\x37\x51\x46\x7f\xfc\xff\xf0\xf9\xe3\x0a\xed\xfd\xd2\x7b\x9f\x49\x6f\xea\xdb\x3e\x12\x49\xeb\xf1\x64\xa0\x7f\xde\xde\xd3\xb9\x61\x35\xe5\x0c\xb5\x42\xb2\x78\x8c\xb9\x81\x04\x84\xae\x2d\x70\xef\x07\x24\x48\x5a\x3b\x2c\x36\x0c\xfd\xff\xee\x5d\x5f\xb1\x80\xbb\x53\x7a\x0a\x4f\xec\xdd\xe7\xaa\xc0\xe0\xae\x3f\xb9\x63\xe4\x75\x17\x60\xbc\xfb\xbc\x32\x9f\x6c\xdc\x67\xd3\xef\xdf\x2a\x41\x46\x79\xfd\x56\x09\x52\x2b\xdf\xbc\x55\x82\x3c\xde\xee\xf9\xd5\x5b\x25\xee\x59\x95\x7c\x91\x23\xac\x1f\xce\x97\x91\xfd\xcd\xf9\xf2\xfd\xb9\xdc\x5d\x8d\xed\x5b\x29\x8d\x84\x62\xc1\x54\x29\x5b\x48\x1a\x32\x25\x50\x6b\x99\xbd\x95\x18\x83\x50\x8a\xbe\x61\xaf\x10\x23\xa2\x92\x35\x91\xe8\x4a\x13\xe2\xc4\xb5\xad\xf5\xf3\xfe\x2e\xe7\xc8\xd5\x97\xf3\xc9\xbe\xf7\x4e\x7f\xd6\xb9\x4f\x47\xac\x7f\xaf\x71\xeb\x70\x89\xd3\xec\xe7\x36\x96\x7b\xe0\x39\x76\xf9\x4d\xf3\x62\x99\x53\xcf\xbe\xd9\xd5\x2b\x42\x80\x88\x2a\x4a\x3e\xfa\xe8\x89\x41\x7a\xf8\x91\x8a\x37\xcf\xd5\x37\x2b\x25\xaa\x78\x80\xa6\x35\x49\xd2\x9c\xb8\xd7\x85\x0e\x59\x3d\x06\x88\x25\x54\x9f\x30\x33\xb7\x12\x2a\xb9\xe6\x43\xc9\x0d\x80\xc2\xff\x02\x00\x00\xff\xff\x2e\xfc\x40\xe6\x5c\x28\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\xf4\x40\x0c\x86\xff\x4b\xce\x73\xda\x8f\xcf\x43\xef\xe2\xc9\x93\xc7\xa5\x48\xda\x66\x65\xb0\x9b\x29\x4d\x52\x77\x58\xfa\xdf\x45\xb7\xed\x80\xcc\x32\x22\xb2\x78\x2c\x7d\x27\x79\xf2\xf0\xee\xcf\xd0\x06\x16\x45\x56\xa8\x0e\xd8\x0b\x39\xf0\x3c\x98\x0a\x54\xfb\x33\x30\x1e\x09\x2a\x78\x7e\xa5\x08\x0e\x34\x0e\x1f\x5f\x4d\x54\x92\x7f\x3b\x98\x5d\x0a\x4c\xd8\x1b\xa5\x88\x79\xd6\xdd\xff\x3b\x98\x6b\xb7\x46\x84\x14\x1c\x04\xd3\x65\x78\xed\x60\xc0\x88\x4d\x4f\xdb\x62\x51\x54\x7a\x34\xc5\xc6\xf7\x5e\x23\x54\xc0\x81\xd7\xd0\x36\xfb\x60\xdc\xaa\x0f\xfc\xb9\x3f\xc1\xeb\x68\x59\xf6\x3c\x7a\xe2\x62\x54\x3f\xd1\xc3\x17\xba\xed\x79\xfe\xa6\x32\xf9\xe4\xe9\xed\xc7\xcc\x57\x7c\x27\xe8\x97\xbf\x80\x9b\x71\x78\x7f\xa2\xd6\x34\x8c\x25\x38\xec\xba\x91\x44\x7e\x13\xee\x6a\x79\x4b\xdd\x2d\x57\xf7\x72\xde\xd3\x6d\x0b\x9c\xd6\xd3\xad\xa5\x22\x07\x8e\xc7\x60\x92\xb3\xea\xb9\xa3\x13\x75\x2b\x6f\x49\xf2\x16\x5f\x26\x7d\x5b\xfa\x45\xf7\xf2\x9f\x26\x62\x85\xb9\x7e\x0f\x00\x00\xff\xff\xd3\x6a\xf5\x71\xaf\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x61\xae\xeb\x2a\x0c\x84\xb7\x34\xb6\xb1\xb1\x97\x03\x04\xf6\xbf\x84\x27\x43\xd3\xbe\xd3\x5b\x9d\xde\x5f\xb7\x91\x2a\x65\x84\x61\xe6\xb3\x89\x21\x9f\x02\x65\x03\x8a\x18\xc1\x08\xd0\xa9\xd5\x64\x3d\x7e\x86\x09\x03\x18\xcd\x00\x88\xa2\x90\x99\x70\x95\x55\xa2\xc0\x89\x4a\xd6\x98\x68\x75\x98\x70\x6b\xab\x0f\xad\x47\xad\xf3\xa8\x3e\x5b\xb3\x36\x70\xd4\x66\x47\x6d\xa3\x97\xc1\x98\x47\xcd\xaa\x54\xbb\xc8\xb8\x7c\xb6\xa3\xce\x7e\xd4\x21\x65\xc0\xa7\x6e\x95\x50\xb4\x6a\x4f\x3f\x8e\x75\x69\x97\x42\xba\x5d\xa4\xf3\xa7\xba\x1d\x8c\x9d\x4c\x0d\x9c\xff\x04\xa2\xaa\xa6\x1d\x78\x55\x79\xbc\x57\x45\x79\x54\x11\x58\x28\xd7\x6f\x4a\x14\x70\x4a\x56\x0c\xd0\x51\x1c\x41\x90\xc0\x92\xd7\x7e\x9d\x7e\xdd\x6f\x9f\x7f\xaf\x1d\xf5\x7d\xed\x58\xb9\xaa\xf9\xeb\x54\xdb\xa7\xb5\x47\x17\xf2\xb4\x20\xb2\xbf\x71\xb2\xec\x2b\x0f\x6e\xd7\xff\xfc\x10\xd6\x67\x3f\x7d\x53\x10\xbc\x7b\xc9\x59\xb8\xfb\x98\x75\xb7\xe3\xf4\x95\xfe\xb6\x33\x7a\x4d\x13\xd9\x6b\x9e\xc0\x27\x03\x0a\x76\xc5\x9d\xc3\x05\xe2\xb4\x5d\x54\x87\x74\xd2\xe3\x4d\xaf\x37\x6f\x3c\x4c\x1b\x64\xd1\xbd\xe2\x67\xff\x15\xf9\xdc\xbb\x66\xf7\xf4\x83\x7f\x91\x3f\x35\x2a\xf7\x8e\xf1\xa3\x3f\x9f\xf3\xdf\x13\xeb\xe2\x72\xe7\x7f\xde\x99\x67\x72\xdf\x58\xee\xc4\x9e\x7b\x73\x20\x78\x77\xb1\x38\x3f\x78\x6d\x16\xf8\xca\x62\xca\x37\x16\xab\xfc\x64\xe1\x12\xa4\xa8\x8b\x7d\x0a\x17\x5b\x49\x44\x97\x0e\x9a\x57\x78\xed\x24\x32\x17\x2f\x0a\x29\x12\x9d\xb5\x8d\xde\xac\xe9\xb4\x58\x4c\x31\x3d\x6c\x8d\xb8\xa8\x46\x52\x74\xfe\x76\x1f\x1a\x6f\xfa\x96\x27\xa7\x8b\xc0\x99\x67\xe0\x33\xc3\xfb\xbb\x91\x04\x3f\x4f\xd1\x47\xa6\xe5\x0f\xa6\x94\xb7\xe3\x30\xfd\xab\xa9\x62\xf7\x2f\x24\x39\xe2\xd7\xa9\x92\x38\x59\x9f\x09\xe3\x91\x5b\xbf\x64\xfe\x47\xf7\x86\xd7\xfb\xf7\xed\x3d\xa1\xa0\xfd\x9a\x90\xf2\x3d\x53\x01\x8d\x4c\x8d\x6b\xab\xad\xb2\x40\x9d\x11\xeb\x6a\xa8\x52\x87\x10\x5d\xd3\xed\x02\xa1\x93\x0f\xe1\x35\xbb\x77\x82\xcd\x4e\xa1\x57\xb8\x3a\xcc\xd7\x70\xbe\xba\x74\x35\xe5\x5e\x16\x4d\x80\xe3\xbf\x00\x00\x00\xff\xff\x12\xed\x04\x61\x88\x06\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

