// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x41\x6f\x83\x30\x0c\x85\xff\x8b\xcf\x39\x6d\x37\x6e\xfb\x01\xbb\xec\x5a\x21\x14\x88\xa9\x22\x81\x8d\x62\x87\x81\xaa\xfe\xf7\xa9\x15\x10\x3a\xb1\x76\x9d\xd6\x49\xbb\xb6\xf6\x7b\xdf\x7b\x49\xd8\x1d\xa0\x62\x12\xb5\xa4\x90\xd5\xb6\x11\x34\xe0\xa9\x8b\x2a\x90\xed\x0e\x40\xb6\x45\xc8\xa0\x10\xbf\x27\x0c\x60\x40\xc7\xee\xf4\x83\x75\x2e\xa0\x08\x1c\x73\x33\xcf\x04\x6c\xb9\x47\x30\xc0\x51\xa7\xfd\xdc\x40\x67\x47\x5b\x36\xb8\x68\x8b\x5a\xc5\xd7\xa8\xb6\xf4\x8d\xd7\x11\x32\x20\xa6\x79\x68\x91\xaf\x23\x55\xea\x99\xe0\x68\xd6\x7c\x1a\xe2\x1a\x2f\x79\xd7\x3e\x88\x5e\x58\x2f\xe8\xdb\xcc\xb7\xb1\x7a\x8f\xef\xf7\x02\xdd\xd5\x17\xe1\xf0\xdf\x90\xf7\xf8\x05\x71\xe3\x45\xd1\xa5\xdd\x92\xb9\x39\xfb\x4e\xff\x23\x39\x0e\xc2\x5b\xea\x69\xc8\x3b\x24\x3d\x25\x49\x32\xa3\xa2\x3c\x3f\xad\x87\x6c\xa5\xbe\xc7\xcf\x4e\x0f\xab\x27\x65\xc7\x01\xab\xa8\xe7\x08\x7f\x7d\x64\x3f\x78\x96\xa9\xb0\xe2\x5b\xdd\x17\x57\xca\x4f\x1d\x58\xe7\x1e\xf0\xbe\x2d\x31\x8d\x2d\x47\xd9\x4a\xea\xc9\xe1\x80\x6e\x3e\x98\x09\xe4\x5a\xee\x65\x63\x12\xbb\x7d\xbb\x52\xc0\x17\xb7\xba\xc4\xd8\x23\xe9\xaf\x13\x26\xb3\xb7\xf9\x83\x79\xe9\x97\x7f\x04\x00\x00\xff\xff\xc0\x4e\x73\x3a\x93\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x0b\x6e\xe3\x3c\x0f\xbc\xd2\xf0\x29\xea\x38\x7a\xde\xff\x08\x3f\x68\xd7\x49\x36\x69\x93\x2e\xf0\xe3\xdb\x1a\x0d\x12\x7a\x44\x73\x86\x23\x5a\x8e\xbc\x14\xc6\x0e\xa8\x38\xc1\x09\xb0\x65\xc5\x65\x7f\xfd\x39\x16\x1c\x60\x34\x07\x20\x06\x25\x77\xe1\x8a\xca\x13\x2b\x88\x34\xd7\xb8\x58\x09\xb8\xc8\xdc\x3a\xe7\xd6\x33\x1a\x7a\x46\x5b\x2f\xb2\x84\xfc\x8c\xf6\x2f\xec\xe0\x3e\x78\xed\x71\x46\x27\x7f\x45\x45\x07\x62\xd9\x11\x25\x2e\x67\x74\x0e\xa0\x6a\x8f\x33\x2a\xcd\x8a\xf5\xac\x27\xb0\xa7\x75\x51\xb2\xa3\x8a\xac\xfc\x16\x3d\x2a\x48\x66\xe4\x68\x5f\x1c\x20\x07\x53\x23\xcf\x3c\xce\xe6\xd6\x81\x7b\x86\xd8\xcf\x19\x6a\x71\x02\xf7\x9a\xc8\x43\x2b\x7a\xce\x58\x51\x89\x3c\x28\x55\xe4\xe3\x5e\xa2\x02\x95\xf2\xde\x96\x7b\xf6\xfe\x52\x5f\x2d\x6f\xea\x13\x46\x3e\xf5\x5a\x3d\xe7\xf3\xea\xfd\x52\xcb\xe3\xea\xfa\x50\x73\x15\x32\xb2\x50\x7b\xd1\x23\x1b\x49\x9e\x95\x87\xe2\xe0\xa0\x88\xe3\x7b\xa5\x64\x66\x5c\x91\x6b\xd3\x29\x21\x27\x22\x90\x77\x40\xf5\x7b\x9e\x24\xfc\xad\x8a\x2a\xfc\xc0\x87\xd4\x7e\xdb\xad\x20\xf2\x0a\x07\x9f\xdc\xa0\x2a\x99\x41\x4b\x3b\x18\x66\x27\xdb\x3d\xff\x73\x0e\x72\x91\xd7\x18\x69\xa4\xdb\x69\x87\x15\x83\xe0\x15\xe1\x02\x9e\xa1\x8e\x7e\xd4\x85\xab\xfb\xd9\xe3\x53\xa7\xfc\x75\xdb\x1d\xb7\x1d\x13\x9a\xa0\xd3\x0f\xdf\x39\x25\x39\x05\x9f\x39\x58\x71\x64\xbc\x3c\x13\x02\x09\x3a\x54\x29\x01\xe9\x87\xf2\x04\x9a\xfd\x49\x2b\x1e\x6e\x0d\xb2\xe9\x42\xac\xf1\x88\x30\xe4\x75\x65\xb5\xec\x14\xc8\xec\xca\xc7\x90\x47\xf4\xf7\xec\xb9\xd7\xe8\x70\xfb\xe7\xec\xd9\xda\x07\xf6\xec\xfd\x33\xfb\x13\x19\x78\x44\xc6\x37\xcc\xcb\xee\xab\x8c\xd2\x86\xb0\xc6\xdc\x6a\x41\x83\xe1\x2d\xb4\xb5\x2e\xa3\xeb\x2a\xd3\x98\xba\x49\x8d\xae\xdc\x3d\xa8\x58\xd9\x25\x9a\xb5\x32\x95\x68\x5d\xea\x3c\xce\x81\xc6\x86\x2f\x77\xfe\xe0\xb6\x4d\x28\x58\x63\xfd\xa4\x76\xd0\x5d\xe5\xd4\xf1\xd2\xfe\xa6\xf6\xef\xd4\xcc\x3d\xfc\x5e\x4d\x21\x7e\xab\x26\xe5\xef\xfa\x81\x4d\x9b\xd2\xa6\xaf\x19\xf2\x8f\xdd\x23\xa5\x7e\xe2\x1b\xed\x2d\x5f\xa9\x7c\xc6\x2e\xc6\x87\x6b\x10\x3f\x30\x5f\x2b\x47\x54\x20\xfc\x91\x79\xfc\xdf\x99\xc7\x47\xe6\xdb\x3f\x30\x57\x94\xf7\xfb\xe6\xec\xd8\xfb\xef\x86\x2a\x4f\xff\x74\xfb\x7c\xeb\x11\xde\xc3\xa1\xc7\x5b\xec\xbf\x75\xbc\x06\xff\xfd\xfb\xe2\xd2\xac\xfd\x99\xed\x09\x19\x89\xb5\x00\x59\xcd\xf7\x8b\x0e\xca\xf7\xcb\x0b\x8a\x13\x95\x13\x39\x91\x07\x6e\x24\x2e\x70\x46\xaf\x67\xcd\xf2\x79\x4e\x83\xbb\xfb\x70\x0a\xcd\xeb\xaf\x76\x9b\xff\xe8\x39\x49\x3f\xde\x3d\x77\x9c\x05\xce\x73\xc2\xcd\x85\xaa\x41\xf7\x53\x82\xc3\x7f\xd7\x0d\xd3\x4f\xf3\xc7\xec\xfd\xfc\xb9\x4f\x73\xf3\x3f\xf4\x79\x3d\x3f\xe4\x34\xaf\x7b\x97\x66\xa4\xa2\x75\xcc\xa1\x7d\x7b\xab\x6a\xbd\xcc\xa9\x51\xc5\x28\xfa\xa0\x60\x0c\x9e\x6d\x38\xd7\xbe\xdd\xa7\xb8\x45\x9f\x82\x86\x51\xe2\x4b\xc1\x8a\x9f\xce\x78\xed\x36\x1f\x80\x46\x6e\xce\xa5\x95\x56\x58\x60\xc1\xc0\x8a\xa9\x2b\x62\x8c\xe1\xab\xf4\xde\x07\x84\x5a\xd8\xe2\xd0\x2a\xcc\x58\xd5\xa5\x83\x1b\x61\x70\x20\xa2\x47\xdb\x3a\xd5\x8c\x7c\x75\x9a\x00\xd7\xff\x05\x00\x00\xff\xff\x5b\xe5\x03\x10\xaa\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6b\x83\x50\x0c\x85\xff\x4b\x9e\xef\xd3\xf6\xe6\x7b\x1f\xf7\x0b\x4a\x19\xa9\x37\x4a\xc0\x26\x72\x93\xeb\x2a\xa5\xff\x7d\xd4\x51\x5b\x66\x51\xca\x64\x6c\x8f\x92\x13\xfc\xce\xc9\xd1\xed\x09\x4a\x15\x73\x14\x87\xa2\xc2\xc6\x28\x00\x4b\x9b\xdd\xa0\xd8\x9e\x40\xf0\x40\x50\x80\x71\x2d\x94\x20\x80\xf7\xed\xe5\x19\x63\x4c\x64\x06\xe7\x30\x4a\x48\xa2\x26\xd3\x79\x11\x47\x12\x67\xef\x6f\xa2\x7d\xef\x64\xaf\x2f\x70\xde\x85\xab\x48\xd0\xb9\xa3\x77\x8c\x11\x02\x68\xf6\xef\x30\x77\xcb\xaa\xcd\xb0\xd9\x62\x8f\xfb\x86\x46\x07\xe6\xe8\xf4\x96\x1d\xf7\xdc\x5c\x5e\x57\x80\xa8\x5c\x45\xe3\x7a\x95\xa5\x74\x56\x19\x08\x6f\x29\x78\xca\xcf\x85\x30\x41\x67\xdb\x0c\x69\xd0\x9a\x0e\x3a\xa6\x8f\x45\xf6\xe7\x2f\x38\x81\x4f\x74\xd0\x8e\xfe\x44\xf4\x13\xb6\x9a\x7c\x73\xa4\x32\xfb\xd0\xb3\x59\xc0\x7b\x83\x2b\x85\xfb\xf3\x62\x08\x1d\xfd\x5f\x82\xd7\xb4\xc8\xfd\xd5\x88\x30\xe7\xe8\xd1\x70\xfc\x01\x3c\x1c\xae\xfc\x79\x2c\xf5\xab\xe2\x64\xbf\x74\xa0\xdd\x67\x00\x00\x00\xff\xff\x6b\x47\xa3\x3a\x7a\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\xcf\xd3\x30\x0c\xfd\x2f\x3e\xf7\x84\x04\x42\xbd\xc1\x81\x1b\xe2\x00\xb7\x4f\x13\x72\x5b\x17\x45\x4a\xed\x28\x71\x3a\xaa\x69\xff\x1d\xad\x4b\xdb\x09\x9a\x75\xb0\xa1\x6f\xa7\x4d\xca\xb3\xf3\xde\xf3\x8b\xfb\x72\x80\x5a\x38\x28\xb2\x42\xa9\x3e\x52\x01\x86\x5d\xd4\x00\xe5\xcb\xae\x00\xc6\x8e\xa0\x3c\xff\x14\x20\x51\xd3\xd1\x61\x3a\x81\x02\x74\x70\xa7\x7f\x41\xbd\xe1\x1f\x70\xdc\x15\xe0\x70\xc0\xca\x12\x94\x2d\xda\x40\x05\x04\x45\xa5\xcf\x51\xb1\x32\xd6\xe8\x00\x25\xb8\xe8\x69\x29\x6d\x23\xd7\x6a\x84\xe1\x58\x5c\xd2\x49\xd5\x33\x9f\xf9\xd2\xef\x9e\x6a\x43\x3d\xf9\xa5\x05\x36\x8d\xa7\x10\xc6\x0e\x13\x0a\x3b\x89\xac\x0b\x26\x1a\xd6\x37\x6f\xdf\x8d\x14\x13\x06\x9d\xf3\xd2\x67\xb4\x85\x58\xd7\xa7\x9e\x73\x83\x4a\xc4\xde\x28\x90\x85\x27\xd0\x96\xcc\xac\xeb\x2a\x8a\xf6\x6b\x74\xce\x0e\x5b\xe6\x5f\x4a\xdb\x26\xd7\x1b\xda\xdf\xe1\x7e\xeb\xa5\xbb\xee\xbc\xca\xdd\x93\x51\x8f\x1c\x5a\xf2\x9f\xce\x97\x3d\xe1\x78\x1a\xaa\x4d\x87\x36\xdc\x32\x9b\xf7\x8f\x7c\x17\xbf\x31\x5a\x6c\x95\x3d\xaf\xbe\x89\x85\x73\x85\x16\xb9\xa6\x2f\xed\x3a\xe9\x74\xfc\x5f\x73\x95\xf5\x33\x0c\x5d\x25\xf6\x99\xd6\xcc\x03\x63\xfc\x9c\x11\x1e\x37\xcc\xc7\xe8\x99\x9a\x57\xd8\x30\x7f\x9d\xe3\x0b\xeb\x83\x23\x6e\x36\xc2\x8e\xd6\xca\x3e\xe5\x79\x45\x9b\xa7\x0e\x0d\x9f\xc2\xf4\x78\x91\xc8\xc2\x43\x27\x31\xac\xc5\xcb\x70\x43\x3f\xa9\x99\x0c\xd8\x5e\xab\x99\x82\x5c\x3c\x67\x78\xba\x7a\xc2\xf7\x68\x63\xe6\x6d\x27\xc8\xb7\x25\xad\x09\x44\x3d\xb1\xfe\xb3\xa4\x2b\x83\xcc\x54\xe4\xe7\x7a\x97\xb0\x0f\xe3\x77\x1e\xed\x1f\xc2\x76\xbf\x02\x00\x00\xff\xff\x05\xca\x0d\xc9\x01\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x09\x92\xea\x38\x0c\xbd\x92\x76\x4b\xc7\xb1\xe3\xf8\xfe\x47\x98\x92\x9d\x34\x10\x68\x60\xba\x6a\x86\x14\xff\xa7\x15\x47\xcb\xd3\xd3\x82\x41\x5e\x02\x4a\x06\x20\x6c\x08\x86\x00\x5e\xb5\x18\x8f\xe3\x63\xb0\x83\x01\x10\x54\x03\x00\x56\x10\x34\x63\xb0\xd1\xfb\x0e\xec\x88\x32\xdf\x19\x5a\x1c\x8c\x21\x74\xaf\xa5\xf1\x94\x22\xc6\x92\xa2\xa3\x41\xef\x7d\x49\xe5\x38\x4b\xdc\xbc\xd0\x29\x2d\xb2\xa4\x8c\xbc\xed\x6a\x65\x49\x63\x5b\xd2\x02\x15\x9c\x78\x59\xc3\x4d\x97\x34\xb4\x7b\x34\x39\xa4\xfb\xa1\xa1\x06\x68\x6c\xad\x2d\xe9\x28\x4b\xda\x3d\x90\x75\x5b\xd6\xe8\xf4\xac\x77\xa3\xbd\xf3\xbe\xa4\xb4\x69\xd1\x96\x71\x3a\x8c\xae\x8d\x05\x35\xa3\x8b\x44\xe4\x47\x9a\x92\x4a\x79\x5e\x51\x2d\xcf\x0b\x28\x1a\x10\x38\x38\x29\x39\x06\x38\x02\x3a\x3b\x3a\x6a\x7e\x29\x9f\x02\x06\x2a\x38\x28\x06\x1c\x7f\xe7\x1b\xec\x9c\xba\xb5\xe5\x79\x84\x65\xb1\xef\xe9\x9f\x13\xe4\xfb\x3c\xff\x3f\x74\xe4\xd3\xcd\xd2\xae\xc2\xba\x62\x7e\xd3\x62\xea\xc5\x81\xe6\x4b\x0b\x42\x3b\xb4\xb0\x4f\x0f\xd3\xa7\xa9\x85\xe7\x53\x80\x0a\x8c\x81\xf6\xe8\x61\x6a\x0e\x5a\xba\x57\x6c\x0e\x81\xc0\x01\x83\x7f\x30\x41\x92\x0b\x26\xc8\x89\x1c\x1a\xd4\x83\x2f\xc0\x93\x55\x8a\x66\x40\xc2\xf9\x16\x05\xdd\x10\x8b\x0c\x4e\x6f\xb6\x7f\xb7\xa5\x57\xfc\xd1\x26\xfe\x63\xbb\xd7\xf6\x8d\xa6\x32\xbe\xf5\xda\x11\x6d\xe6\xe9\x88\x40\x56\x04\x6c\x9c\x36\x4f\x7d\xb5\x5c\xf5\xd5\x91\xa7\x76\xb9\x67\xc6\x18\x01\x81\xf7\x38\xff\xee\x61\x87\x17\xb1\xfe\x86\x6b\x5a\x8a\x7b\x7f\xf6\x6b\x7c\x8b\xa9\x62\x74\x77\x8a\x80\xfe\x90\x3b\xa9\xf7\x91\xd3\x73\xfe\x67\x4e\xa4\xc1\xfd\x29\x7e\xc2\xe7\xb7\x68\x2e\x78\x23\xc8\xf0\x89\x61\xd6\x59\x18\x42\xa9\xf5\xc4\xd4\x8f\x7c\x1f\x38\xa6\xc6\x89\x6d\x19\x6a\xa6\x2a\xe6\x36\x0a\xc1\x1f\x3e\xb3\x8a\x67\xb5\xad\xaa\x5a\x16\x1f\xfd\xe5\xac\x53\x9b\x51\xfd\xd4\xf6\x79\x27\xb3\xa2\x09\x42\xbc\x64\x1d\xba\x28\x85\x64\xf6\x95\xb2\x12\x09\x5c\x03\x54\x03\x82\x02\x03\xca\xf0\x4d\xdb\x8e\xbb\xee\x6d\xdf\x4a\xd7\xd6\x51\x46\x41\xa1\xd2\x71\x77\x19\xdc\x3b\x30\xca\x06\xa3\x34\xa2\xc0\x5d\x1b\x01\xd4\xcd\xb7\xb2\x71\x0b\xd2\x58\x1a\xdf\xf0\xbf\x72\xd6\x31\x60\x5a\x9c\x55\xbd\x62\x02\x86\x6b\x64\xb3\xb3\x97\xc0\xe1\xd2\x6d\xa2\x71\x76\x36\x38\xa2\xcb\x6e\x76\x9b\x0d\x89\xc2\x39\x1d\x80\x96\x7d\x10\x98\x6f\x9c\x3e\x38\xe7\x94\x98\x68\x15\x07\x6e\x59\xf3\xc9\x5b\xb9\xf2\x87\x36\xd3\x0a\x3c\xf0\x3c\xa1\x7a\x7f\xe2\xb1\x1f\xe9\xea\x54\xb7\x0c\xe5\xe4\xe2\x02\x2e\x79\x19\x82\xd2\xec\xcd\xa7\xae\xb2\x6b\x99\x28\xcc\x73\xbd\xbf\xca\xab\x83\xeb\xca\xeb\x0d\xcb\xa7\xbc\xf2\xcc\x2b\x2b\x45\x32\x84\x08\x54\x9c\x02\x8e\xbe\xcd\x75\x3c\xfa\xfc\xc2\x86\x7c\x61\xc3\x1e\x6d\xf8\x61\x25\xb3\xa9\x9a\x3a\xb5\x05\x9f\x3d\x7a\xc5\x82\x14\x1f\x32\xbb\xd5\xad\x57\x0f\x5c\xf3\xe6\x55\x6e\xef\x66\xfd\x4f\x8e\xd3\xdf\x9f\xdc\x3e\xe8\x5c\x3d\x2d\x33\xfe\x33\x9f\xbe\xcb\xbd\xc8\xb5\xff\x5c\x73\x2f\xca\x6f\x73\xff\x18\x7b\xf6\xb7\xfa\xb1\x43\xc8\xd9\x21\x54\xc4\x65\xfc\xa5\x3b\xbc\xe9\x10\x07\xaf\x98\x1f\xf9\xf7\x7b\x36\x90\x6a\x21\xc6\xff\xbb\xce\xae\x39\x44\xa7\xcf\x7c\x0c\x08\x41\xcb\xdd\x26\x7b\x56\xf6\xb2\xe4\xfd\x2d\xf6\xec\x6c\x88\xd3\x9e\x61\xd5\xf2\x3a\x62\x19\x2e\xac\x7b\x75\x75\xf9\x57\x0c\xd4\x37\x0c\xa4\x83\x81\x7c\x32\xf0\xe4\xa2\x7c\x87\x8f\xba\x7f\xe0\xa2\x46\xbc\xe5\x22\x28\x9c\x27\x1b\x3e\x77\x99\xd7\x58\xd4\xbe\x7b\x2f\x54\x27\x5b\xfe\x93\xc8\xe1\x53\xe4\x06\xfa\x21\x72\x43\x7b\x8e\x7c\x9e\x34\xca\xad\x15\xa1\x94\xbe\xba\x6c\xde\xe7\xf6\xec\x4f\x9e\xce\xce\x03\xfb\x0e\xcd\x2f\x99\x77\xd0\x98\xbf\x38\x4c\x3c\x71\xd3\xd0\x76\x72\x0f\x07\x46\xfe\x9b\xd1\xe5\xde\x04\x78\x37\xd9\x66\xe5\x1d\x3a\xe4\x73\x95\x64\xcf\x7d\xe1\xd5\x93\xe4\x36\x3f\x73\x13\xff\xb9\x3f\x76\x75\x27\x47\xe0\xb9\xdf\xff\x7d\xaf\xb7\xad\xbe\xd9\xeb\xad\xd1\x57\x7b\xbd\xad\xdf\x34\x7f\xda\xeb\xe5\xd4\x7e\xf0\xf4\x3d\x47\x0a\x5e\xf7\xb7\x2b\x47\x0a\xf9\x2b\x8e\xbc\xe2\xc1\xab\x2c\x94\xd1\xfb\x20\xa5\xda\xb1\xed\xb4\x79\x34\x8b\x8d\x1a\x98\x8f\x8d\x8b\xf7\x5a\x43\xa9\xd5\x32\xd0\x78\x93\x8a\x68\xe4\x43\xb5\x4a\x1f\x4a\xdc\x78\x1f\x67\xfd\x7c\xb1\xff\x5c\x26\x66\xfa\xfc\x34\x9f\x19\xed\x8c\xec\xac\xfb\xc4\x6e\x4e\x97\xb9\xd3\x3b\x71\x8b\x03\x3d\x47\xbc\x21\x3b\x3b\xc1\xd2\x7c\x76\x9d\xcb\x04\x9a\x1e\x66\xd7\x04\xa8\x68\x6a\x54\x6a\xc9\x21\x00\x9a\xa9\x24\x16\xaf\xd6\x7a\x17\x2b\xde\x44\xd5\x1b\xb6\x91\x1b\x09\xed\xdc\x87\x14\xdb\xd5\x0b\x36\xe1\xd8\x55\x91\xb1\x4a\x83\x5a\x00\x5d\x28\x0a\x03\x50\xfc\x13\x00\x00\xff\xff\x17\x1b\xba\xee\xd0\x0f\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\x03\x31\x10\x85\xff\xcb\x3b\xe7\x24\xe8\x21\xc7\xde\x3d\xe9\xad\x2c\x32\xbb\x99\x4a\x20\x9d\x09\x9b\x99\xca\x52\xfa\xdf\xa5\xd2\x6d\x51\x16\x5a\xa4\xa0\xb7\x04\xde\x23\xdf\x47\xde\x7a\x8f\x41\xa5\x19\x89\x21\xda\xe8\x1c\x90\xa5\xba\x35\xc4\x75\x17\x20\xb4\x65\x44\x08\x59\xde\xf1\xdb\x3b\xdb\xab\x1a\x95\x17\xaf\xb5\x4c\x08\x50\xb7\x53\x76\x3f\x47\x11\x60\x53\x3d\x9e\x3c\x8b\x3d\x3c\x3e\xe1\xd0\x05\x54\x9a\xa8\x2f\x8c\xb8\xa1\xd2\x38\xa0\x19\x19\x3f\xbb\x51\x9f\x4b\xb6\x09\x11\xbb\xcc\x1f\x97\xee\xc6\x65\xb0\xac\x82\x43\xf8\x0d\xe0\xca\x47\xe1\xf4\x07\x80\xa7\xf6\x99\xf0\xfc\x2a\xa5\x34\x5e\xda\xc7\x1b\xb7\xf6\x55\x9e\x03\x5b\x75\xb1\x65\xb8\xef\x92\xcd\xfb\x15\x15\x92\x81\xaf\x09\xf6\xaa\xe5\x46\x3b\x51\x99\x43\xff\xc1\x91\x52\x5a\x72\xbc\xb7\xca\x8f\x3d\x5d\x33\x59\xda\xdb\x8d\x5f\x71\x9f\xad\x75\x9f\x01\x00\x00\xff\xff\xb9\x70\x8c\x04\xaf\x03\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x0b\x92\xe2\x30\x0c\x44\xaf\xd4\xfa\x5a\x3a\x8e\xed\x58\xf7\x3f\xc2\x96\x13\x32\xcc\x0c\xbb\xb0\xa4\x8a\x2a\xda\xd6\xa3\xbb\x05\x8e\xfd\x28\x8c\x1d\x50\x71\x82\x13\x20\x87\x35\x97\x7a\xbc\x1c\x0b\x0e\x30\xba\x03\x10\x83\x92\xbb\x70\x93\xd2\x54\x04\x91\xee\x19\x65\x6b\x01\x97\x58\xbd\x7b\x9f\xb8\x54\x3b\x2e\x75\x8a\x4e\xc4\xb2\x4b\x0d\xb3\x66\x63\xd3\x02\x75\xd8\x10\x25\x3b\x19\xfb\x7b\xbf\xd4\x73\x7e\x9c\xbe\xcc\xc1\xfb\x9d\x80\xa1\xe6\x36\xf6\xc9\x3d\xe5\xf1\x7b\xaa\xc9\x63\x8a\x40\xcd\xf6\xfd\x33\x23\x25\x82\x76\x52\x06\xe8\x52\x02\x49\x90\x44\xc9\x93\x97\xf8\xcd\xcb\xd8\xa4\xe5\x4f\x92\x9f\x84\xfe\xe8\x65\x13\x92\xc8\xdf\xd1\x4f\xef\xf3\x3b\xe7\x27\x81\x5c\xe4\x55\x23\x25\xbb\x5c\x1d\xe3\xbb\x2b\xc1\xeb\x5d\x17\xd6\xf4\x9e\xd2\x43\x42\x6e\x9f\x5f\xbb\xfb\xda\x67\x6c\x99\x2f\xaf\xd0\x20\x50\x72\x22\xf9\xf4\xae\xc1\x38\x4f\x54\x37\x1f\xb8\x93\x84\x40\xe2\x54\xa2\x05\x64\x3c\x7c\x11\xb7\x5f\x6d\xf1\x74\xeb\x90\xa2\xfb\x86\xfc\xd8\x8f\x21\x24\xc9\xd0\x8a\x63\x09\xab\x57\xc0\xc8\xca\x26\xad\x23\xa3\x0d\x12\x59\xc5\x45\x29\x2a\x39\xd8\xfa\x1c\xdd\xbb\x2d\xcf\x62\xca\x15\xe9\x35\xf3\xa0\x96\x09\x43\xf0\xa7\xcd\x76\x36\x18\x1e\x8d\xe3\xef\xbd\x8d\x83\x0c\x6b\xf5\xdd\xda\x9d\xf8\x62\x19\xbf\xe9\x51\x5f\x7a\xa4\xfd\x3b\xb8\x7a\xc4\x49\xf8\xd4\xde\xf4\x4f\xed\x1d\xed\x67\x7b\xfb\xb9\xa9\x46\x29\x79\xe5\xfb\x90\x90\x6b\x3a\xb4\xe8\x5f\xf9\x82\x9e\xb9\xc8\x9f\x69\x9f\xf9\xfe\x2b\x0f\xf3\xfa\x90\x87\xa5\xde\xe6\xa1\xfd\x39\x61\x0e\x74\x72\x73\x6e\xbd\xf5\xc6\x02\x0b\x86\xf1\xc2\xb2\x1a\xea\xdd\x2c\x8e\x82\xb6\x70\x49\x30\x2d\x99\x56\x69\xbd\x54\x1a\xe5\x90\xea\x93\xf7\xff\x4c\xaa\x55\xe4\x18\x01\xab\xa3\x01\x9c\x7f\x02\x00\x00\xff\xff\x88\x9a\xa7\x59\xf2\x04\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x40\x10\x44\xff\xa5\xcf\x73\x5a\xd1\x43\xee\x1e\xfd\x82\x25\x48\x27\xdb\x2b\x83\x63\x4f\x48\x57\x47\x87\x65\xff\x5d\x36\x98\x49\x44\x21\xe8\x71\x98\x6a\xde\xab\x3a\x5e\xa8\xcf\x6a\x60\x05\x35\x67\x4e\x26\x81\xa2\x0e\x0e\xa3\xe6\x78\x21\xe5\x37\xa1\x86\x5e\xa5\x50\x20\x94\xe1\xf6\xe8\x0a\xc4\xee\x0e\x74\x0d\xf5\x7f\xe2\xe4\xb2\x26\x3c\x2a\x0e\xf7\x0f\x74\x6d\xc3\x92\x50\x46\x9c\xe4\xd9\x04\x14\x28\x3b\xbe\x08\x6d\xa0\x81\x0b\x77\x49\x2a\xdd\xc0\x90\x27\x07\x77\x31\x45\x94\xdb\x6d\xd6\x25\x54\x11\x67\xd7\x1e\x31\xeb\x6c\xb1\x36\xc0\xe8\xdb\x02\x3f\xf8\x2f\x82\xc7\x0f\xe9\x1d\x79\xfc\xe6\x51\x9b\xac\x04\x3e\x9d\x46\x31\x9b\x4b\xec\x3b\x4e\x51\xde\xff\x6a\xb7\x33\xef\x6f\xf2\x7b\xd2\xdb\xe5\xff\x2f\xdd\x7e\x06\x00\x00\xff\xff\x31\x85\x28\xfa\x16\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x07\x0d\x03\x41\x0c\x04\x40\x4a\xfb\xae\x67\x38\xae\xfc\x21\x44\xd1\x18\xfe\x04\x4a\x06\xe0\xe1\x06\xc8\xcf\xd4\xc8\xd3\xd3\x89\xa1\x8f\x70\xde\x12\xd5\xd9\x01\x92\x63\x50\x3d\x53\xdb\xf3\x53\x5f\xa1\x97\xf8\xba\x69\x3a\x76\x2a\x26\x56\xb2\x9c\xb7\x85\x95\xaf\x6e\x12\xa0\xf8\x05\x00\x00\xff\xff\x0d\x33\xc8\xde\x6a\x00\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\x41\x6f\xdb\x30\x0c\x85\xff\x0b\xcf\x3a\x0d\xd8\x0e\xbe\x0d\xc5\x8e\x5d\x87\x64\x3b\x15\xc1\xa0\x58\xcc\x20\xc0\x26\x0d\x91\x4a\x67\x14\xfd\xef\x43\x96\xc4\xb1\x1b\x39\x73\x3c\x3b\xed\x39\x4f\xd2\xf7\xe4\x27\x92\x79\x7c\x86\x9c\x49\xd4\x92\x42\xa6\x21\xa2\x01\x4f\x55\x54\x81\xec\x71\x65\x80\x6c\x89\x90\x41\x15\x58\x59\xeb\x0a\x7f\xe6\x31\x04\x24\x5d\x56\x4c\xc2\x01\x0c\x70\xd4\x83\xfc\xf9\xa8\x06\x03\x3b\x2d\x64\x60\x9d\x0b\x28\x02\x2f\x2b\x03\x95\xad\xed\xba\x40\xc8\x36\xb6\x10\x34\x20\x6a\x15\xef\xa3\xda\xb5\x2f\xbc\xd6\x90\xc1\xd6\xe3\xd3\x69\xed\x26\x52\xae\x9e\x09\x5e\x4c\x9b\xf1\xb0\xba\x81\x6c\x4e\x95\x06\x29\x71\xf8\x99\x0f\xc1\x02\xf3\xcb\x36\xf6\x12\x74\xa7\x1d\xd7\xcc\xc5\x40\x2f\xc4\x74\x14\x8d\x76\x64\x4b\x8e\xa4\xa7\xf5\xd1\x93\x7e\xf8\xf8\x29\x6d\x48\x83\x25\xd9\x60\xf8\x42\x18\x7e\xd5\xff\xfa\x30\xf3\x38\x79\x95\x9f\xe6\xdc\x28\x38\xf4\xbb\x78\xf9\xb1\x17\x4f\x85\xff\x7f\xa1\xba\x82\xdc\x3a\xd7\x8f\x6e\x9d\x7b\xc3\x20\xe5\x01\x9d\x4f\x05\xc9\x34\x92\x80\x39\x6f\x31\xd4\x0b\xab\x38\x30\x71\x82\xba\x33\xfc\xad\xb0\xd4\x31\x3d\x73\xaa\x52\x28\x38\x28\xf4\x6d\x37\x73\x07\x87\xf0\xe9\xde\x8a\x0e\x4e\x8f\xa0\x36\xfa\xf9\xae\xb2\x17\xb7\x46\x79\x08\x5f\x39\x91\xd0\x73\xd2\x61\xa5\xff\xb6\x15\xe6\xba\xe2\xef\x65\x60\xff\x9a\xba\xce\x4c\x50\x20\x77\xd2\xbb\xe3\x7b\x4e\xc0\x07\x2c\xad\x27\x74\x77\x7d\x6f\x7e\x36\x37\x29\xda\xf2\x3c\xd3\x0d\x69\x79\xe1\x7d\xdc\x8e\x30\xa6\x4a\xd8\xb4\x95\xf3\x1d\x35\xa9\x80\x25\x6f\xb1\xbf\x4f\xed\x7f\x7f\xbb\x4e\xa5\x9c\x30\x62\xa6\x98\x88\xbe\xf3\x2d\x2b\x96\x25\xa6\xba\xe4\x28\x29\xaf\x9e\x1c\xfe\x46\x77\x8c\xe7\xc8\x8e\xb1\x6c\x75\x8c\x83\x1e\xb7\x48\x3a\xf6\xfc\x9e\x14\x99\x96\xfe\xb0\xd5\x69\xa6\x79\x08\x8b\xbf\x81\x19\xd2\x37\x3e\x3b\xb7\x68\xa7\x6f\x24\x73\x97\xe1\xd2\xfb\xec\x59\x32\x62\xd2\x59\x76\x26\x9d\x29\x2e\xbb\xbf\x5f\xf5\x83\x5f\xd1\xa3\x97\xaf\xb7\x9f\x09\x36\x7d\x59\xdd\x7f\x56\x5d\x82\xd5\x9f\x00\x00\x00\xff\xff\x5e\x97\x04\x19\x71\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

