// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x4f\x83\x40\x10\x85\xff\xcb\x9c\xf7\xa4\xc6\x03\x37\x13\xaf\xfe\x82\x86\x34\x0b\x3b\x8d\x9b\xd0\x19\xc2\xcc\xd4\x62\xd3\xff\x6e\x68\x16\x16\x4c\x15\x8d\x26\xbd\x41\xe6\x0d\xef\xe3\xbd\xdd\xcd\x09\x6a\x26\x51\x4f\x0a\x85\x76\x86\x0e\x22\xb5\xa6\x02\xc5\xa6\x74\x40\x7e\x8f\x50\x40\xcd\x46\x0a\x0e\xd8\x34\xcd\x4e\xe3\x08\x1c\x68\xdf\x0e\x4f\x16\x49\x1f\x1f\xe0\x5c\x3a\x68\x7d\xef\xab\x06\xa1\xd8\xf9\x46\xd0\x81\xa8\x57\x7c\x31\xf5\x55\x6c\xa2\xf6\x50\xc0\x21\xe2\x5b\x5e\xdd\x19\xd5\x1a\x99\xe0\xec\xe6\x3c\x69\x7b\x02\x9a\x4c\xb7\x3e\x84\x2e\xaf\x0f\x6f\x28\x72\xb1\x4e\x8a\x80\xde\xf4\x95\xbb\xf8\x8e\x0b\xee\x1f\xc1\x11\xd3\x28\x5a\x43\xfc\x14\xd9\x2f\x08\x07\x5b\x93\xeb\xa1\x36\x51\x14\x43\x5e\xaf\x98\x9b\x8b\x71\x9a\xc7\x80\xa4\x03\x6b\x56\xf4\x8a\x72\x7f\x37\x17\x2d\x9b\x19\x66\x37\x6c\x26\x63\x6d\xbf\x81\xcf\xe9\xdc\xa4\xbd\x6c\x8f\x47\xac\x4d\xb9\x5b\x3b\xf3\xf3\x5e\xff\x14\xad\x27\xa6\x7e\xcf\x26\xd7\xb2\x8d\x14\xf0\x88\x61\xe4\x1d\x23\xfa\x32\xe9\x49\x9f\x3e\xb5\x7e\x6a\xf2\x9f\x3f\xcd\x82\x4f\x2a\x3c\x20\xe9\x3f\x53\x66\xc3\xe7\xc5\x4d\x5d\x5a\x96\x1f\x01\x00\x00\xff\xff\xa5\x93\xf4\xe2\x9f\x04\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x0d\x6e\xe3\xbc\x0e\xbc\xd2\xf0\x57\xe4\x71\x24\x59\xba\xff\x11\x1e\x64\xc7\x6d\xe2\x6c\xe3\x2d\xf0\x3e\x60\x6d\xa0\xb0\x58\x6a\x48\x0e\x87\x52\x1c\xeb\x55\x18\x3b\xa0\xe2\x04\x27\xc0\xc4\x8a\xcb\x7c\x3c\x8e\x01\x07\x18\xd5\x01\x88\x41\xc9\x5d\xe0\xee\x54\xdb\x16\x44\xba\xef\x09\x2b\x01\x17\x2e\x3d\xcb\xac\x76\x58\xe3\x61\x75\xb5\x16\x8d\xda\x61\xad\x79\x58\xd3\x73\x90\x55\x39\xac\x53\x0f\x6b\x17\xed\x88\x71\x20\x10\xb9\x15\x6b\x2b\x72\x60\x6e\xd6\x44\xc9\x96\xb7\xaf\x1c\xbf\xac\xbb\x65\xfd\x25\x35\xf3\xe5\xaf\x30\xf2\x32\x2f\x4f\x22\x89\x3c\x68\xd5\xcb\x00\x1d\x7e\x81\x24\x48\x62\xca\x37\x7e\xbe\xe1\xd7\xb5\x26\x47\x7d\xb0\x01\xd9\x39\x33\xf2\x15\xb7\xc9\x8a\x0b\x7c\x23\x34\xbd\x22\xf4\xf8\x80\xc0\xb3\x7c\x67\x9e\x4c\x46\x16\x72\xe4\x19\x02\x4a\x5a\xb9\x1b\x7f\xf7\x85\x7c\xf9\xc6\xeb\x7f\xe1\x58\x5f\xa0\xfc\xa1\xae\x39\x7f\x51\x17\x58\x65\xed\x92\xd8\x56\x6e\x0f\x0c\x62\xba\x60\x10\xa7\x13\x0c\xf4\xc4\xfd\x05\xf3\x9e\xf9\x85\xb8\x77\x70\x2e\x2c\xc3\x81\xf5\x8a\xb2\x2b\xcf\xb8\x09\x94\x77\xff\x47\xac\x85\xb8\x90\x77\x4c\x7a\xe5\xe8\x54\x2f\xf8\x88\x0e\xc5\xbe\xe3\xcc\x20\x04\x12\xb4\xd7\x53\x02\xd2\x16\xf3\x2b\x8f\xbc\xf6\x8f\xbb\x5b\x85\x4c\x3a\x3d\xaa\x3d\x7b\x18\xd6\x7b\xa2\x1a\x25\xad\x75\x1e\x75\x2c\x85\xb4\xcf\x75\xd5\xde\xb4\x33\xc6\x7f\x5c\x17\x03\x37\x75\x31\xd1\xc7\xba\xf6\xd5\x35\x7f\x91\x77\x1b\xe9\x89\x28\xf5\x1a\x53\xf9\x86\x8d\x36\x4a\xf5\x32\xe3\xc7\x3e\x3f\x9d\x4b\x5f\xbc\x84\x2e\xa7\x07\x1f\x7f\xd0\xdf\x62\x29\xf8\xc0\xe0\xbf\xe4\x2b\xe3\x8e\xaf\x75\x9e\x7d\xe6\xeb\xf4\x6c\xe3\xd9\x33\xfe\xc0\x63\x99\x25\xc7\x36\x24\x24\xfb\x56\x6a\xd9\xa2\x6d\xa5\x8c\x2c\xc3\x7a\xec\x62\x9a\x43\x67\xf1\xbe\xb5\x36\x6a\x15\x57\x57\x1f\x1c\x35\x3c\xad\x96\x08\x3d\xd9\x79\x9e\xaf\xca\x5f\x4c\x63\x8f\xba\x26\x4d\xa0\x9f\x7b\x50\xb4\xb7\xda\xdd\xc2\x9e\x7b\xe0\xff\xf7\x1e\xf8\x5d\x0f\xc4\xde\xf4\x73\xe9\x81\x78\xfb\xdc\x83\x43\x3b\x6f\xdf\x9c\x25\x29\xdd\x90\x6b\xde\x91\x7c\xec\x7c\xcc\xac\xa4\xfd\x13\x33\x2b\xdb\x6d\xfd\xe3\xa6\xfe\x5f\xcf\xac\xd2\xeb\xf9\x77\xf1\x0c\x26\x27\x0b\x90\xe5\xd2\x92\x72\xb3\x62\x88\x5d\xe9\x76\xe6\xad\xe2\x97\xbc\x55\xc6\x67\x46\x9d\x19\xa5\x31\x85\x84\xfc\x6a\xf2\xed\x83\xea\xf8\xa1\x3a\x39\x55\x77\xea\x4f\xff\x8e\x7f\xcd\x3b\xfe\xb5\xde\xf2\x7f\x7a\xf6\x97\xf3\x37\xde\x6e\xca\x75\x06\xc4\xfa\x15\xd5\x6a\x0f\x8b\x16\x53\x36\x8f\x61\x56\xaa\x6c\x5d\x6c\x64\x00\x5a\x82\x6d\xab\xb3\x93\x57\x96\x4c\x75\x6c\x89\x16\xdd\xd0\xa7\x48\x3c\x98\x4a\xfc\x74\xe3\x56\xfe\xd2\xf9\x71\x1a\x18\xfe\x8d\xfb\xe9\x72\xef\xca\x7e\x83\x02\x95\xdc\x9c\x4b\x2d\xb5\xb0\xc0\x82\x11\xde\x59\x88\x66\x95\x40\xd7\xac\x2c\x54\x62\x70\x1d\x34\x83\x66\x54\xea\xd1\x3c\x88\x5c\x0c\x93\x88\xbb\xd5\x41\x8d\x63\xeb\x54\x24\xbc\x03\x9c\xff\x0b\x00\x00\xff\xff\xfa\x0c\xf3\xba\x00\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4b\xc4\x40\x10\x85\xff\xcb\xd4\x5b\xa9\x58\x6c\x27\x22\x56\x36\x5a\x1e\x29\x26\xd9\x39\x58\xc8\xcd\x86\xec\x9b\x68\x38\xee\xbf\x4b\x8e\x24\x77\x86\x83\x04\x1b\xed\x76\x99\xf7\x98\xf7\xbd\xd9\x1d\xa9\x4a\x9a\xc1\x0a\xf2\x68\x4d\x1c\x45\x6d\x0c\x99\xfc\xae\x70\xa4\x7c\x10\xf2\xa4\x8c\xd8\xc9\x73\x32\x05\x39\x4a\x86\x51\x71\x9c\x04\xe4\x08\x7d\x33\xbc\x2c\x2a\x1e\x1f\xe8\x54\x38\x6a\xb8\xe7\xb2\x16\xf2\x7b\xae\xb3\x38\xca\x60\xc8\x9b\x81\xcb\x58\x47\xf4\xe4\xa9\x8b\xf2\x79\xb1\xee\x4d\x2b\xc4\xa4\x74\x72\xd7\xa9\x46\xf7\x1c\x6b\x5e\xca\x21\xb4\x17\xf7\xf0\x93\x9c\xcf\xe6\x51\x10\x83\x28\x86\x4d\xb3\xa8\xec\x21\xf9\xfe\xee\x1c\xef\x07\xdb\x53\x08\x6b\x64\x65\x4a\xf5\x46\x2e\x4d\x3a\x89\xd6\xe8\x16\x9d\xaf\xc1\x2d\x73\x7f\x80\x61\x79\x5b\x74\x77\x6b\x32\x15\x72\x6b\x38\xdc\x72\x2c\xeb\x8f\x6e\xb9\xc4\x7d\x97\x43\xea\xe4\x5f\x5c\x6a\x19\xed\x55\xf0\xf2\x25\x95\x21\xb5\x6b\xf9\xae\xf1\x7e\x5f\x6c\xf1\x1d\x00\x00\xff\xff\x61\x27\x59\xf2\xbc\x03\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xc1\x4e\x1b\x31\x10\xfd\x17\x9f\xf7\x54\xb5\xa8\xca\x2d\x20\xb5\x27\x54\x89\x70\x43\x08\x4d\xec\x09\x75\xe5\xf5\xac\xec\x71\xc2\x0a\xf1\xef\x55\x92\x4d\xbc\x5b\xd6\xeb\x2d\x84\x90\x9c\x40\xf2\x8c\x77\xde\xf3\xf8\xbd\x89\xef\x9e\x85\x24\xeb\x19\x2c\x8b\x09\xbb\x80\x85\xd0\xb6\x0a\xec\xc5\xe4\xee\xbe\x10\x16\x4a\x14\x93\xed\x9f\x42\x50\xe0\x66\xe9\x79\xb7\x22\x0a\xc1\x75\xb5\xfe\xcf\xb3\xd3\xf6\x51\xbc\xdc\x17\xa2\x82\x1a\xe6\x06\xc5\x64\x01\xc6\x63\x21\x3c\x03\xe3\x75\x60\x98\x6b\xa3\xb9\x16\x13\x51\x05\x87\x31\x75\x11\xac\x64\x4d\x56\xbc\x14\xed\x72\x9a\xec\x7d\x3d\xfb\x8f\x3e\x38\x94\x1a\x97\xe8\xe2\x16\xa0\x94\x43\xef\x37\x3b\xec\xa2\xa0\xa4\x60\x39\xc6\x04\x6d\xf9\xcb\xb7\x8b\x4d\x89\x4d\x0c\x54\x95\xa3\x65\x02\x9b\x0f\x52\xae\xf7\xdc\x6f\x30\x27\x32\x23\x01\x5a\xb2\xbb\xa0\x1c\xcc\x24\xeb\x4c\x0c\x66\x16\xaa\xca\xd4\x39\xf2\xdb\xd0\xf2\xc5\x2d\x35\xae\xde\xc1\xbe\x24\xcb\x0e\x24\x4f\x95\xca\x9c\x80\xc5\xd5\x35\x78\xee\x3d\xa8\x88\xd3\x23\x5f\x35\x5b\xee\xa3\x23\xda\x43\xd3\x7d\x08\x5c\x4c\xef\xee\x3c\x76\x60\xfd\x02\xdd\x0f\x47\xe5\x0e\xfd\xa7\xb6\x61\x9a\x97\x85\xa3\xf2\xa8\x7c\x9c\x28\x0f\xe3\xfb\xc3\xaf\x2f\xad\xce\xb7\xfd\x2c\xc6\x7d\x5c\xc3\x27\xf5\x45\xa1\xd4\x25\x18\x3f\x46\x5c\xbe\x1f\x45\xd8\x1d\x30\x0e\xeb\xb5\xfa\x13\x3c\xff\x74\xb4\xe2\xdf\x37\xdb\xe0\xa3\x11\x17\x8f\x97\x56\x36\x73\xb6\x73\x30\x60\x25\xfe\x5a\xf4\x73\xdb\x2c\x7f\xa8\x7e\x27\xab\xcf\xb4\x71\x04\xf1\x38\xa8\xcb\x3d\x8d\xd2\xde\xe3\x63\x50\xb4\x6e\x4f\x5d\xce\xc9\x9c\xd2\x50\x72\x40\x11\x3c\x7b\x01\x94\x60\x4c\x6e\x3c\x93\x0e\x95\xee\xe3\xa3\xe8\x0c\x7a\xb4\x44\x57\xdf\xf4\x0b\x43\x2b\x12\x9f\x2a\xed\x60\x03\xa7\x13\x77\xf1\xb5\x67\xde\xbb\x22\xeb\x43\x59\x35\xd1\x9f\x20\xbd\xf8\x84\x32\x30\x9d\xd4\x8d\xda\x8c\x9b\x97\xc1\x59\x54\xe7\x34\x6e\xb6\x0e\xf7\xd1\x21\xde\xd2\x25\x7e\x86\xad\xe6\xdd\xa1\x3d\x1f\x54\x68\x55\xc6\x42\xc0\x18\x5a\x35\x2e\xd1\x73\x18\x0e\x4b\xd0\x76\x2d\x6e\xa7\x68\x22\x63\xa4\x20\x42\x95\xf1\x3a\x4e\x87\x51\x9f\x24\xd8\x8e\x63\xf6\xf6\x5e\x4b\xc2\x93\x83\x61\xa4\x6c\xd3\xc7\xea\x4d\x32\x3f\x80\x13\x2c\xd9\xba\xa4\xe0\xfb\xee\x9a\xb6\x0a\x9f\x50\xed\x97\xc6\xce\x63\xd3\xd7\xf3\x58\x13\x8c\x4b\xb4\xfc\x1f\x1f\xde\x92\x1f\x1b\x22\xd3\x5d\x89\xbc\x01\xdb\x49\x40\x1c\x72\xa1\x14\x2b\x59\x53\x4a\x24\x8e\xf3\xa8\x69\x9f\x47\xbd\x91\xd5\x7f\xb0\x8e\xa7\xb5\x9b\x38\xea\xf7\xcc\xac\xd3\xfc\x67\x50\xf0\xb4\xc7\x2f\x8e\xdc\xbd\xdd\xaa\xc9\xa8\xe4\x73\x49\x3a\x6b\xdc\x23\xcb\xac\x67\x98\x3f\x04\xd8\x81\xd7\x81\x44\x42\x6a\x4e\x4e\xc0\x7b\x58\x82\x09\xc3\x2a\x74\x1b\xc7\xe6\x83\x40\x1a\x70\xf0\x44\x46\xda\xd0\xdf\x05\x6c\x2b\x05\x60\x5e\x01\xbb\xff\x1b\x00\x00\xff\xff\x9f\x87\x20\x1b\xb8\x15\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x0b\x96\xe3\x2a\x8c\xdd\x92\xfe\x88\xe5\xf0\xdd\xff\x12\xe6\x00\x76\xc5\xb1\x93\x38\xaf\x5e\xcf\xf4\x9b\xca\x49\xb5\x9b\xc2\x42\xba\x12\x57\x12\xb6\xc1\xf8\x08\x28\x19\x80\xb0\x21\x18\x02\x74\xd7\x60\xdc\xb7\x1f\x83\x06\x06\x40\x90\x0c\x00\x58\x41\xd0\x8c\xc1\x7a\xad\x0d\xd8\x11\x65\xde\x53\x35\x38\x18\x43\xd4\x96\x42\xe6\x39\x8a\x1e\xd6\x28\x3a\x1a\xd4\x5a\xd7\x68\xde\xe6\x62\x6f\x39\x27\xeb\x6b\xb4\xd1\x1a\x25\x24\x4b\x09\xe2\x1c\x25\x88\xdb\x28\x67\x0f\xb4\x49\x20\xc6\x6d\x34\x10\x4a\x91\x25\x81\x74\x9b\xcb\xc8\xa5\xa9\x85\x35\x1a\xda\x1a\x15\xa4\x52\x7a\xdf\xe6\xa6\x4d\xb3\x00\x09\x9c\x78\x59\x41\xbb\x66\x5e\x52\x4b\x6e\xb6\x46\x6b\x59\xa3\x51\xab\xc7\x2c\x6b\x2e\xe3\x26\x21\x45\xd0\x58\x72\x5e\xa3\x94\xd6\x68\x36\xb3\x06\x79\xe9\xc0\xb2\x49\x28\x2c\x05\xbc\xe9\x1a\x75\x59\xa3\xd5\x23\xb2\x96\x65\x1b\xc7\x4d\x6e\x4d\x31\x54\x4a\x69\x8d\xa6\x4d\x6e\xad\x46\xad\x72\x5b\xa3\x65\xb3\xb8\x69\x57\x6d\x6d\xd3\xa1\x6d\x16\xf7\x16\x00\x62\xa7\x39\x2a\xc8\x1a\x34\x0f\x1f\xfa\xf0\x56\x66\x41\x1d\xb8\xc3\xf0\xf6\xcf\xe8\x18\x99\x51\x20\x6a\x6a\x63\xbe\x80\xa2\x01\x81\x83\x93\x92\x63\x04\x1f\x9e\x65\x47\x47\x1d\x5f\x1a\x7f\x05\x8c\xa8\xe0\xa0\x18\x61\xfb\xff\xb8\x83\x9d\x87\x6c\xcd\x63\x3e\xc2\x5a\x71\xa1\xe1\x04\xe3\x7e\x9e\xff\x6e\x32\xc6\x5f\x79\xac\x9c\x15\xd6\x27\xce\xef\x58\x71\xc8\xc5\x8e\xe6\x9b\x94\x10\x37\x29\xec\x53\xc3\xa1\xd3\x94\xc2\xd3\x2a\x80\x04\x8c\x11\xed\x59\xc3\x21\x39\xd2\x92\xbd\x6c\x73\x88\x03\x75\xe8\xfc\xc0\x24\xd2\x19\x93\x14\xc7\x0a\x06\x69\xdb\x0b\xc0\x73\xc7\x28\x9a\x01\x09\x8f\xbb\x24\x86\x07\x62\x71\x18\xa7\x8f\xb5\xdf\xaf\x55\x2e\xf8\xd7\x81\xbf\x0e\x33\x1f\xd2\xbe\x91\xd4\xea\x49\x12\x41\x78\xad\xb5\x23\xda\xf4\xd3\xb2\x00\x41\xad\x8f\xd5\x86\xa7\x36\x69\x84\xf2\x2d\x06\x27\x69\x20\x0b\x0f\x2b\x69\xc8\xdc\xe5\x71\xf9\x97\xf2\x42\x88\x47\x79\x76\xd6\xef\x7b\x6b\x43\xc3\xa3\x24\x8f\x67\x49\x71\x44\x62\x0c\x70\xdc\x01\xbd\x47\x88\x78\x8c\xa7\xb7\x9e\xa0\x7c\x8e\x9f\xa5\xdb\xb2\x23\x06\x3d\xae\xfe\xd2\xff\xef\x62\x0d\x21\x45\x3e\xde\xdd\xc2\x79\xa5\x9e\x3f\xdc\x9d\x91\x8f\x36\x3d\xcf\xfb\xda\x3e\xa6\xcb\xfe\x98\x9c\x91\xc3\x51\x37\x66\xfd\xc5\x2e\xca\x59\x8e\x32\xf4\x62\xdf\x97\x5e\x5e\x51\x03\x36\x7e\x87\x7e\xfa\x31\xf0\x1f\x44\x9e\xa2\x94\xbd\xbf\xc0\x13\xa1\xa6\xa3\xcf\x38\x5d\xec\x9f\x7b\xb6\xf6\x27\xdd\xf3\xd9\xfe\xb7\xba\x4f\x4d\x9a\x3c\xa1\x57\x2f\xfb\xef\x5d\x5c\x5c\xe2\xbb\xe7\x27\x9b\xfa\x39\xbe\xff\x81\xa4\x76\xd4\x49\xb0\x9d\x24\x09\xd3\x7b\x8b\x06\x05\x7c\x8c\x36\x42\x1b\x39\x65\x30\xe5\xcc\x30\x5b\x26\x90\x1f\xc6\x7f\x8e\xbe\x99\x95\x9a\x21\xb2\xfb\x2e\xd7\x37\x76\xdc\xa2\x75\x68\x33\x23\x38\x74\x35\x53\x15\x73\xeb\x81\xe0\x17\x3f\x0f\x8d\x56\x0e\x5a\x2b\x3e\xdb\xc0\x23\xab\xd9\x44\xe4\x27\x13\xee\x57\x32\xf3\x1f\x41\x14\x0f\x23\x6b\xb9\x28\x45\x19\x7b\x4c\x69\xe4\x2d\x02\xd7\x08\xaa\x03\x87\x88\x11\x42\xf7\xa2\xb9\x61\xd3\x96\x5b\x09\x55\x73\x45\xe9\x01\x85\x42\xc5\xe6\xd2\xb9\x56\x60\x94\x02\x3d\x64\xa2\x88\x4d\x33\x01\xa4\xe2\x25\x14\xce\x91\x34\x2e\x89\x1f\xb2\x45\x62\x9d\x9e\x1f\x2b\xce\x1c\xb8\x6c\x5a\xf9\x26\x0f\x8f\x75\x7b\x65\xe7\xac\xf8\xa4\x60\xeb\x82\x73\xfe\x4f\x55\xb0\x7b\x6c\x54\x02\x8f\x9a\x71\x60\xb2\x57\x8d\x40\x4b\x1b\x10\x98\x77\xec\x1a\x39\x8f\xea\x71\x62\x17\x1c\x38\xcf\x28\x40\x50\x85\xf3\xae\x29\xa6\x09\xb8\xe3\x3e\xc3\xf0\x38\xe3\x39\x97\xeb\xca\xf2\x0f\x7f\x4d\xdb\x42\xfc\x6c\x5b\xcc\x92\x31\x17\x72\x79\x67\xdd\xa1\x0a\xfe\xb1\xd2\x07\x18\xbb\x75\x2f\x98\x74\xd8\xfc\x53\xdd\x7c\x69\x7d\xb9\xf0\xcf\xd9\xfa\x06\xf7\xd6\x33\x5f\x35\x5a\x7b\xdb\x09\x57\x55\x6b\x70\xe6\x17\x83\xf2\x19\x25\xcb\xce\x18\x52\x77\x19\x38\xbd\x45\x45\xdf\xa2\x42\xce\x47\x54\x16\x46\xf4\x83\x91\x4c\x8c\xe0\x0e\x23\x7b\xf6\xff\x0b\x8c\x2c\xd0\x15\x23\xbf\xe8\x83\x16\x3a\x6b\x2f\xda\x54\x92\x85\x96\x89\xba\x23\x57\xc6\x02\x6e\xd1\x0c\x8b\xba\x90\x56\x51\x0a\xc8\x52\xb5\x9b\x38\x51\x60\xc8\x48\xa1\xba\xb4\xe2\xf4\xc0\xe2\x95\xb5\xfe\xb0\xf3\x23\xbf\xa5\xad\x26\x3d\x44\xad\x55\xf9\x32\x6a\xf5\x2f\x47\x6d\x18\x5d\xcf\x47\x8f\x04\xce\x1f\xa3\x16\xf4\x92\x91\xd0\xae\x51\x3c\x62\x77\x97\x78\xa9\xff\x82\xcd\xc8\xf4\x85\x5a\x5a\x5d\xc4\x64\x3b\x8e\xcf\xe8\x3e\xc9\x1c\xcc\xbc\x38\xfc\xc1\x9b\x17\x0e\x67\x37\x34\x67\xa5\x38\xb2\x01\x8d\x99\x04\x2a\x4e\x11\xb6\xae\x26\xa4\xe7\xfa\xf6\xba\x8a\x7e\xb1\x4a\x38\xae\x32\x7a\x2e\x15\xe7\x08\xc3\x37\xaa\xaf\x6d\xf4\x4b\xe4\xbd\x43\xce\x47\x54\xb9\x27\x0d\x3a\xaf\xe0\xdb\xf8\xe2\xbf\x1c\x5f\xae\x77\xf1\xe5\xf6\xc7\xe2\x4b\x7f\x56\x8d\xe7\xfa\xcd\x63\x73\x1a\xf5\x87\xe6\x81\xd9\x3e\x2f\x9d\xeb\x2b\xcf\xf8\x19\xd9\x9a\xaa\xd0\xe8\x82\xf9\x19\xdb\x17\x68\xda\x5b\x34\x79\x8b\xdb\x1f\x36\x5d\x15\xd5\x83\x51\x57\x0f\x3a\x78\x75\xc7\xdb\xbe\x63\xd8\x88\x97\xfe\xe5\x84\x77\x24\xbe\xe2\x1d\x3a\x68\xb3\x1a\xa9\x16\x14\x72\xec\x31\x95\xe6\x1e\x2b\x19\x89\x60\x29\xa5\xe4\x26\xad\xa2\x91\x19\xb6\x1c\x4b\x53\xe9\x42\x68\x95\x52\x4b\x41\x07\x9b\xd2\x1f\x61\xd3\x43\x75\x83\xb4\xd5\x02\xa3\xf3\xaa\x9f\xfd\x92\x4a\x96\x42\xd0\xfe\x97\x6b\x9c\x58\x6e\xf1\xad\x2f\xf0\xfd\x57\x7c\x19\xfb\xb9\xff\x4e\x77\xfb\x3f\x23\x73\xf5\xda\xfd\xdb\xdd\x2e\xd3\x0f\xb8\x6a\xdc\x7d\x77\xdf\x46\x5b\x92\x4b\xff\x7d\x42\x23\x3d\xef\xff\x3d\xda\xa4\x51\xcb\x2c\x19\x6a\xb4\x62\xd4\x08\x14\x85\x1b\x71\xd4\x1e\x80\x9a\x90\x04\xa6\x1e\x09\xc0\x73\x87\x0c\x94\x53\x97\x12\x98\xbd\xa4\x52\xdd\xf1\xee\x74\x65\xc6\xd1\x23\x23\xa7\x78\x13\x3f\x88\xb1\x94\xa6\xfc\xd7\x19\x33\x75\xbe\xc1\x34\x3f\xd7\x7f\x97\x08\x3b\xe7\xcc\xd9\xdf\xe3\x8d\xfd\xff\x99\x8c\x71\xb5\x3f\x87\x7c\xdb\x39\xca\xde\x39\xaa\x88\x4b\xff\x4d\xd7\xf8\xa1\x73\x9c\x08\x16\x64\x7e\x59\xa3\x1c\x3a\xb2\xd9\x85\x7c\x9f\xd1\x4b\xe0\x2d\xa3\xe7\xf6\xad\x7f\xec\x2f\xfb\xa7\xc8\x5d\x7c\x16\xfd\x1c\x9f\xbf\xc9\xe8\x25\x9c\xcf\x2f\x8a\x07\xd7\x4b\x46\x2f\x97\xf3\xdf\x12\xf3\xf4\xd9\xcf\xbc\x31\x96\xce\xf5\x41\x49\x37\xf8\x37\x74\xc2\x9c\xd9\x6d\xff\x7c\x40\xdd\xdf\xa2\xae\xa3\x2a\x38\x64\xfe\xe1\x07\xd9\x32\xbf\xec\xbd\x94\xf3\x91\x8b\x6d\xf7\xd0\xe5\x2c\x6c\xf7\xa1\xff\xf8\x30\x7d\xc7\xdb\x95\x2e\xe7\x5b\x27\x1f\x56\xb6\x17\x7d\xd8\x0b\x1f\xcd\x0e\xe6\xd2\x9b\x51\xf1\x5c\x73\x90\x68\x9d\x32\xc6\x60\x04\xd5\x00\x5c\x52\x29\x92\xd5\x63\x44\x8a\x49\x4a\xd1\x10\x7b\xf0\x84\x31\xb7\x44\xb9\x13\x35\x32\x4a\xe4\x3a\x3e\x1b\xc7\xd3\xa8\xab\xe7\xce\x3c\xe2\x72\x41\x63\x9e\x1c\xce\x7a\xfc\x09\x3d\x18\x57\xa7\x1a\x83\xf7\x67\x14\x4f\x1c\x59\x53\xff\x4f\xd4\x18\xe7\x73\x94\x4d\xbb\xde\x3e\x6b\x57\xa4\x72\x29\x29\xfd\xdf\x6b\x37\xb9\xac\xc9\x8d\x7e\x99\x6a\x53\xc1\xfc\x7c\x52\x23\x7f\x9c\xc1\x56\x7e\x78\xab\x7f\x4b\x77\xfc\xd5\xf2\x0d\x7f\x2d\x5c\x77\x2e\x1b\xec\xbf\x9e\xa0\xa1\x6e\x4f\xb8\x5a\x0b\x83\xd7\x5f\x71\xda\xab\xb3\x8c\x03\xcf\xb5\x7e\xe6\xaf\xd6\xd3\x97\x1d\x89\xec\xd9\xe7\x3f\xd5\x91\x74\xcd\x37\x78\x77\x2b\xaf\x6a\xc4\x46\x9e\x4a\x4c\x91\x1c\x5b\x0c\xd1\x46\x7b\x62\xd4\x53\x94\x44\xd2\x47\x3e\x50\x8c\x9d\x3a\x53\xa2\xd4\x23\x08\x31\x09\x6b\x31\xf4\x52\xaa\xf5\xd5\xa1\xfd\xb1\x8e\xe4\xe5\x09\x44\x1c\x59\xe1\xf6\x6c\x60\x71\xbc\xd3\x86\x2b\x2a\x11\xa8\x3c\x55\x17\xfd\x2e\xff\x33\x25\x49\xc1\x74\xf3\xf2\xf7\x15\xc0\xbf\x3c\xd3\xbb\xe3\x03\x04\xb9\xf1\x2f\x82\xbe\xf0\xef\x61\x3f\x49\xe4\x33\x1b\x0f\x46\x41\x08\xe1\xff\x03\xa3\x20\x94\x73\x7f\x76\x41\xa0\xd6\xdf\x30\xca\xf6\x35\xcd\x7c\xa8\x45\x1d\x11\xa7\x54\xec\x43\x2a\x22\xde\x9d\xff\xab\x51\x61\x24\x77\xf9\x87\xd5\xfd\xfb\xd8\xd9\xd8\x01\x66\xad\xb2\x90\xfa\x87\x71\x83\x76\x79\x3e\x78\x42\x0d\x83\xdf\xd5\x91\xfb\x4c\x3f\x3d\x3f\x47\x8c\x7a\x53\x4f\x73\xa3\xc2\x9d\x8f\x2c\xf1\x67\x11\xb8\x63\x46\xc4\x76\x7e\x7e\x7c\x41\xe0\xf9\xf9\xdf\xb6\x47\x86\x7d\x04\xf6\x7c\x9e\x35\xae\xa1\x6b\x78\x75\xa6\x68\x5c\xa0\x35\xc8\x9e\x9e\x23\xc0\x41\x23\x8e\x9d\x46\x94\x47\xbe\xd2\xa8\x79\x67\x2f\xec\x18\xc7\xef\x61\xdd\xe0\x4a\xc0\x43\x97\x4d\xf1\xe1\x09\xb9\xaf\x2a\x1c\x5e\xf5\x45\x2f\x72\xe3\x4f\x2f\xef\x7c\xb8\xde\x77\x07\x39\x02\xcf\x37\x59\x7e\xfd\x06\x0b\x52\xaa\xef\xdf\x60\x41\x8a\xfa\xcd\x1b\x2c\x48\x35\xfd\xfa\x0d\x16\x79\xd4\x9e\x5f\xc4\x08\xf5\x9b\xf3\x53\x64\x78\x71\x7e\xfa\xfa\x6c\xf9\x55\xfd\x1e\x7a\xad\x9d\x94\x52\xc5\xdc\xa8\x78\xcc\x16\x0b\x65\x30\xef\x85\x83\xd7\x94\xa2\x52\x4e\xa1\xe3\xa8\x30\x13\xa2\x91\x77\xd5\x24\xb5\x2b\x71\xe6\xd6\xf7\xfd\xf3\xf9\xd9\xe5\x89\xdd\xcf\x67\xec\xa3\x0a\xda\xec\x09\x1b\x2f\x0c\xc4\x66\xdf\x4f\xb3\xb3\x26\xce\x5b\xe7\x38\x19\xf0\x07\xcf\xc9\x03\x4b\xf2\xce\x39\xa7\xb3\x81\xa9\xd7\xe0\x4f\x80\x84\xa6\x46\x21\x85\x14\x88\x41\x9d\x20\x61\x81\x1e\x2b\xd6\x9a\xbc\x28\x37\xe5\xd6\x46\xf5\x50\x35\x72\x28\xa9\xc5\x14\xb4\x51\x6a\xa2\x39\xba\x64\xd3\x8a\x5c\x08\x8d\x92\x09\xd9\x30\x87\xe2\xff\x04\x00\x00\xff\xff\x6e\x8d\x37\x2f\x8c\x27\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x3d\x0f\xda\x30\x10\xfd\x2f\x37\x7b\xaa\x5a\x86\x6c\x50\x55\x4c\x2c\xd0\x0d\x31\x5c\x92\xa3\x75\xe5\xd8\x96\x7d\x0e\x44\x88\xff\x5e\x91\x42\x0d\xc8\x41\x16\x4d\x0b\xdd\x40\x79\x67\xbf\x77\xef\x3e\xbc\x3e\x40\x65\xb4\x67\xd4\x0c\x05\xbb\x40\x02\xa4\xb6\x81\x3d\x14\xeb\x8d\x00\x8d\x0d\x41\x01\x1a\x59\xb6\x34\x27\xfe\x6a\x18\xd5\x2a\x58\xab\x3a\x10\x60\x02\x9f\xa1\x87\x0b\x12\x04\x70\x67\x4f\xbf\x82\xd4\xfc\xe1\xd3\x04\x8e\x1b\x01\x16\x3b\x2c\x15\x41\xb1\x45\xe5\x49\x80\x67\x64\x5a\x04\xc6\x52\x2a\xc9\x1d\x14\xd0\x4a\xda\xc5\xd8\x6d\xd0\x15\x4b\xa3\xe1\x28\x1e\xf0\xfb\x7d\x29\xd6\xb5\x8b\xc1\xa7\x7f\xe4\x7d\x7f\xf1\x3d\xff\x19\x2a\xd4\x15\xbd\x11\xf7\xca\x68\x76\x58\xf1\x34\xad\x41\x44\x20\x2a\x45\x99\x32\x3f\x1b\xed\x43\x63\x4f\x34\xa6\x4a\x99\xdd\x8b\x34\x9f\xa3\xb3\x0d\x8b\x62\xb1\x31\x41\x73\x9a\xdc\x8d\xd8\x55\x28\x33\x3d\x2d\x8d\x51\x99\xe2\xb4\xd1\x17\xd0\xd3\x12\xb3\x7d\x6d\xd0\x73\x96\xaf\xab\xde\xd7\xfe\xd0\xc5\x25\x26\x2a\xfe\x67\xc2\xc6\xf3\x6e\x5a\xd7\x29\xef\xc6\x56\xf2\x64\xe7\xa5\xdb\x6a\x28\xfd\x89\x82\xbb\x3e\xe9\xef\x0c\x91\x04\xc5\x2f\x7b\xaa\x02\x9b\x57\x90\x1b\xac\x18\x87\x4c\x59\xe5\xf0\x23\x78\x9e\x3b\xb3\xe3\xef\xcb\x5f\x21\xff\x43\x51\xf4\xdb\x50\x0e\x95\x83\x8f\x5f\x1f\x74\xcc\x37\x47\x54\x3f\x35\xaa\x46\x2a\x9b\x7e\xaf\xcf\x82\xd3\x3d\x8d\xb7\xd9\x13\xd9\x43\xf4\xcf\xd2\x7c\x3f\x66\x93\x96\xbe\xdf\xe6\x18\x7c\x11\x5c\x41\x1c\xd5\x32\x35\x8b\x23\xc4\x51\x65\x5a\x72\xdd\x32\xdd\xa5\x11\x48\x7b\x2b\x1d\xf6\x4a\x6e\x60\x93\x8f\x89\x5e\xb6\xd6\x99\x96\xae\xde\x21\x63\xe7\x72\xf3\x33\x00\x00\xff\xff\x02\xc7\x39\xfb\xba\x0a\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x6b\x6e\x7a\x3b\x0c\xc4\xb7\x34\x7e\xc6\x59\x4e\x9e\xfb\x5f\xc2\x95\x73\x38\xa5\xa5\x15\xdc\x8f\x7f\x22\x81\x62\xe2\x71\xe6\x67\xc7\x91\x4b\x61\xec\x80\x8a\x13\x9c\x00\x99\x56\x5c\xf6\xe3\xe3\x58\x70\x80\xd1\x1c\x80\x18\x94\xdc\x85\x8b\x6c\xad\x8a\x20\xd2\xcc\x51\xb6\x12\x70\x89\xd5\x9a\xb7\x81\x2b\x6a\xf3\x8a\x0e\xd1\x81\x58\x76\x45\xc3\xac\x58\x4f\xb5\xc0\x9e\xd6\x45\xc9\x8e\x46\xd6\xfd\x8a\x9e\xfc\x7e\xee\x65\x0e\xce\x6f\x02\xba\x9a\x5b\xcf\x7f\xee\x2c\x8f\xd7\xac\x22\x8f\x2c\x02\xcd\x91\xe7\x8f\x47\xaa\x08\x4a\xa7\x0c\xd0\x15\x09\x54\x82\x54\x6c\x79\xea\x55\xbc\xea\xd5\x70\x02\x9b\x3e\x95\xfc\x28\xb4\x07\x97\x54\xa8\x44\xfe\x4e\xfd\xdc\x7d\xa4\xce\xe0\x4b\xe7\xa7\x42\x32\x6d\xa3\xeb\x60\xac\xac\x7e\xd7\x49\xb5\x54\x3d\x7a\xf4\xec\x0a\xf9\xb3\x2f\xe0\xab\x32\x14\x27\xe3\xae\x1e\x02\x09\x3a\x5e\x4a\x40\x3a\xd9\x71\x48\xa0\x17\x87\x3c\xdc\x1a\x64\xd3\x7d\x82\xf8\xfb\x09\x43\xae\x5b\x35\x39\xe6\xee\xf5\xfe\x22\xbf\x63\xa4\xb7\xa2\xf4\x97\x9a\x74\xc6\xed\x0d\x8d\x2e\x32\x66\xac\x16\x12\x72\xd3\xf8\x9a\xc4\x2f\x0e\x71\x20\xdd\xfe\x83\x40\x95\x2b\x2a\x9f\x4e\x68\xf0\x83\xde\x21\x83\x8f\x64\x62\x7d\x22\x53\xf7\x4f\x32\x21\x95\x0c\x65\x73\x2c\x61\xf5\x9d\x7c\x6c\xdb\xa0\x35\x6b\x94\x4e\x22\x6b\xf3\xa6\x2a\x2a\xb5\xb3\xb5\xd1\x9b\x37\x5b\x5e\x37\x53\x5d\x51\x7d\x8f\x3a\xa9\xd4\x64\x1a\xfc\x69\x4e\x1b\x9f\x5e\x5c\xc4\xf2\xad\xd2\xf2\xf7\x14\xb9\xb5\xdd\x87\x95\x64\xf8\xf7\x54\xfd\x49\x55\x7f\x51\xa5\x9c\xf1\x8b\xea\xff\x9a\x32\x16\xfd\xc0\x92\xd5\xde\x4e\x99\xd4\xcb\xed\x77\xbf\x6c\xeb\x9f\x78\x43\xdc\xe4\x93\xbb\xae\x6f\xdd\x51\xee\xeb\xf1\x26\xe7\x17\x68\xe4\xe6\x5c\x5a\x69\x85\x05\x16\x0c\x88\x6c\xcc\x18\x73\xed\xe5\x6b\x29\xb0\xe6\x68\x33\xb6\x4f\x6f\x63\xb8\xb2\xcf\xd8\x7b\xb5\x60\x9a\x4d\x46\xdb\xbb\x18\xcb\x2c\x5b\xb7\xae\x2c\xcf\xf5\xbf\x00\x00\x00\xff\xff\xaf\xf6\xb2\xbc\xe4\x05\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4b\xc4\x40\x10\x85\xff\xcb\xab\xb7\x3a\xd1\x62\x7b\xb1\xb2\xb2\x3c\xae\x98\xe4\xe6\x60\x71\x9d\x0d\xd9\x37\xd1\xe5\xb8\xff\x2e\x8a\x67\x30\x04\x4d\x61\x39\xbc\xf9\xe0\x7b\x6f\x7f\x46\x5f\xac\x52\x8c\x88\x1c\x5d\x03\x92\x0d\xce\x8a\xb8\x3f\xc3\xe4\x45\x11\xf1\xac\x0d\x01\x6c\xc3\xc7\xd1\x35\x6a\xbd\xd9\xe1\x72\x08\xd7\xdc\x84\x69\xd2\x07\x25\x02\x8a\x73\x89\xcf\xac\x27\xe3\xee\xf6\xee\x93\x1d\xa4\x49\x97\x15\xf1\x24\xb9\x6a\x40\xa5\x50\x1f\x9d\xd2\xa5\x9c\xd8\x10\x31\x25\x7d\x9d\xd9\x93\x5b\xcf\x54\x0c\x97\xf0\x8b\xf3\x8a\xd4\xfd\x9b\xf6\xce\x32\xfe\x25\x27\xc7\xe3\xa8\xb5\xfe\xa7\xdc\x17\xbd\x75\xd1\xf0\x9d\x4f\x92\x5d\xd7\x77\xfb\x51\xef\x69\xb1\xf9\x26\x75\x2b\x76\x7d\x5a\x29\x70\x78\x0f\x00\x00\xff\xff\x2e\xcb\x7f\x71\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

