// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x31\x6f\xf2\x40\x0c\xfd\x2f\x9e\x33\x7d\xdf\x96\xad\x43\xdb\xa9\x1d\xba\x22\x84\x9c\x9c\x41\x27\x05\x1b\x9d\x7d\x29\x11\xe2\xbf\x57\x50\x20\x25\x24\x10\x0a\x08\x3a\x46\x77\xb6\xdf\x7b\x7e\x2f\x37\x58\x40\x2e\xac\x86\x6c\x90\x5a\x88\x94\x80\xe7\x59\x34\x85\x74\xb0\x00\xc6\x29\x41\x0a\xea\x27\x4c\x01\x12\xb0\x6a\xb6\xfa\x46\xe7\x02\xa9\xc2\x72\x98\x6c\xaf\x30\x9a\x2f\xe9\x9d\xe6\x06\x09\x48\xb4\x66\x8b\xf6\xe2\x19\x56\x98\x15\x04\xe9\x18\x0b\xa5\x04\xd4\xd0\xe8\x2d\x1a\x66\xbe\xf0\x56\x41\x0a\xa5\xa7\xcf\xba\x76\x1c\x39\x37\x2f\x0c\xcb\xe4\x27\xee\x4d\xf5\x21\xf0\x51\x0f\xe4\x81\xa6\x52\xd2\x1e\xea\x5e\xc8\x58\x78\x7b\xe9\x14\xbe\x86\xae\xf5\xec\xb1\x0f\x7a\x0f\xc1\x2e\x5e\xf4\x2b\x9d\x84\x9d\x89\x14\xeb\xb1\xdd\x84\xda\x0e\xb3\xca\x48\xff\xff\xeb\x38\x5c\xf7\xbc\x99\x0e\x4d\x96\x2f\x0f\xb6\x9e\x3e\x76\xe6\x07\x8b\x60\x6f\x4b\x7d\x1c\xe6\xf0\x32\x07\x5c\x23\xa0\x3b\xb7\x3f\xcf\x29\x8f\x26\xe1\x8f\xb9\x61\xd2\x95\xd3\xc2\xab\x91\xeb\x4e\x2b\xb1\x93\xa0\xd2\xd6\xbd\xbe\xe4\x1d\xb1\xad\x98\x1c\x4b\x2f\xe6\x2b\x09\xef\x90\x61\xba\xdf\xca\x7e\xf1\x20\xd5\x82\x8d\x7a\x69\x3f\x3a\x22\x7e\xad\x01\x3a\x77\xd3\x97\xed\xfc\xd8\x5f\xcf\x62\xcd\x94\x3e\x35\xb8\xde\xf8\xef\x81\x2c\x5c\x4d\x25\x6a\x9b\x0a\x9e\x1d\xcd\xc9\x6d\xdd\xd9\x43\x94\x5d\xc5\xa6\xd9\x39\xfc\xbf\x99\x6f\xce\xa9\x24\xb6\xab\x23\xac\x87\xed\xfe\xd3\xfb\xf3\x86\x5f\x01\x00\x00\xff\xff\x50\xf1\x9b\x48\x4a\x0a\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x09\x6e\xf5\x2c\x0c\xbc\xd2\x78\xc5\x1c\x87\x25\xdc\xff\x08\xbf\x08\x2f\xaf\x69\xfa\xb6\x4a\xdf\xaf\x36\x6a\x95\x4e\x8c\x61\xc6\x0b\x76\xcc\x47\x61\xec\x80\x8a\x13\x9c\x80\x02\x4b\x2e\xe3\xf6\xe3\xd8\xe0\x00\xa3\x38\x00\x31\x28\xb9\x0b\x3b\x36\xcf\x9c\x83\x48\xf7\x35\x66\x29\xe0\xc2\x19\x99\x3b\xb6\x85\x6e\x58\xa8\xf4\xa1\xbd\x0f\xdd\x51\x02\x2d\xd4\x14\xa3\xe7\x92\x16\x4a\xba\xd0\x24\x8d\xa8\xf7\xe5\x81\x3c\x2f\xb4\xd4\x24\x9b\x90\x2f\x34\xb5\x03\xdd\x52\xf1\x34\x16\x9a\xeb\x0d\x6d\x55\x1b\xe3\xe2\xa1\x71\x6d\xbc\x8d\xb6\xd0\xb6\xdd\x50\xd1\x86\xd8\x6c\xa1\x5b\x5f\x68\x6f\x40\xd6\x1a\x3b\xca\xb8\xb1\xd8\x06\x73\xaa\x92\x17\xca\x61\xc9\xea\xd4\x24\x30\xba\x55\x51\xb2\xc9\xb9\x4e\xf5\xee\xe8\x44\x9a\x3a\x40\x8e\x72\xd3\x11\xb2\xab\x6d\xe4\xd3\x8f\xc1\x7c\xfa\x51\x18\x5d\xed\x32\x32\x91\x07\xcd\xf8\xf0\xfe\x6d\x5a\x05\x32\xcd\x6f\x43\xbe\x76\xdd\xea\x75\xd7\x19\xb9\x17\xbb\xfa\xdc\x15\xb8\x7b\x20\xb4\x07\xe7\x26\x48\xb4\x69\x79\x58\xd1\xb8\x58\x91\xc8\x8b\x7d\x64\xc8\x17\xbb\x2c\x64\x64\xa1\x7b\xb6\x5d\x79\x32\xf9\xe4\x18\x8a\x9d\xad\x22\xf6\xf7\x4c\x53\x03\xe3\x8c\xb9\x76\x66\x6b\xc8\xb2\x08\xcc\x2f\xa0\xfc\x58\x11\x4a\xfa\x90\x8f\x02\x67\x3e\x91\x7e\x15\x2d\x85\x9d\x57\x17\xbf\xaa\x51\xcb\xa7\xb1\x5e\x8c\x3e\x88\x2d\xf5\xfc\x2b\xcd\x35\x6d\xe7\x33\x8e\x78\xa8\x83\x51\x3a\x59\x31\x3e\xce\x9f\x20\xf2\x0c\x07\xaf\xfd\xa0\x2a\xd3\x83\xd9\x38\xfb\x13\xf9\x54\x99\x27\xfe\xbc\xef\x99\x63\xd3\x1a\x79\xc5\x0c\x57\x0f\xb3\x13\x1d\xd5\x3e\xed\x8e\x2a\x9a\x7a\xae\x2c\x32\x0a\xfa\xea\x65\xd3\xff\xd1\xcd\xc0\x4b\x7b\x28\xf6\x15\x87\xfe\x21\x90\xa0\xfd\xec\x29\x20\x75\xcf\x3b\x02\xe7\x6b\x7d\x70\x73\x2b\x90\x41\x87\x45\xe9\x67\x0b\xc3\x7c\x0e\xaf\x33\xde\xf6\xe0\xfc\x3f\x23\x39\x7b\xdc\xe1\xb1\x7f\xcb\xaf\x27\xfc\x6f\x3d\x30\xf8\x99\x02\xa7\x0e\x7e\x57\x22\x74\x1a\xdd\x14\x78\xd0\x73\xa6\x2e\xc1\xcb\x07\x7f\xa6\x90\x70\x7f\xa3\x90\xc8\xf6\x4e\xa1\xc3\xd2\xbe\xe5\x4f\x3c\x60\x9e\x46\xdd\x52\x4b\xa5\x09\x6b\xf4\xa1\x16\xd4\x18\x5e\x42\x4b\xa9\xd2\xaa\x6e\xa9\x1b\x53\x35\xc9\x51\x95\xab\x07\x25\x4b\x23\x45\xb1\x92\xba\x12\x6d\x87\x3a\xe7\xba\x2b\xf7\x1a\x05\x1e\xeb\x7d\xdc\x4f\xff\x73\xbe\x49\xbf\xf6\xaf\x1f\x6a\x6e\xf6\x52\x4d\x9a\xff\xe7\x3b\x9b\x5d\xc3\xd9\x35\x29\x8b\xad\xbf\xb7\x2f\xf9\x0d\xe3\xfb\x5d\x2f\x7f\x9c\x61\x6a\xdb\x1b\x4d\xd4\xc7\x4b\x4d\x24\xf3\xc2\xae\xaa\x3c\x66\x7e\x4c\x28\xe1\x67\xe6\xf1\xcf\x99\xc7\x5b\xe6\xfd\xda\x9f\x7f\x30\xdf\xda\xeb\xda\x5a\x11\x7b\xfd\x6e\xd8\x73\xe3\xfc\xfb\x23\x5b\xfe\xb4\x0b\x5f\xaa\xe2\x4f\xcf\x62\xc5\xde\xc4\xc4\xaa\xff\xe3\x1b\xc1\xfa\xf7\xf9\xeb\x62\x19\xd3\xd6\x02\x64\x79\x4e\xf2\x36\xdc\x92\x21\xf6\xae\x6a\xc7\xb9\x7d\xce\xdf\xef\x34\x3c\x66\xdd\xd0\xf9\xfc\xaa\xee\xfd\x69\xf6\xcb\xac\x8c\xaf\xec\xdf\x67\xbb\x35\xf7\xdd\xeb\x41\x35\xe8\x6b\xea\x73\xf8\x67\xb1\x70\x7f\x57\x1f\x9e\xde\xd4\xc7\xfd\xee\xf1\xfc\x4d\x9f\xf8\xc1\x63\xde\x3d\x79\x8c\x54\x8c\x54\x34\xb7\xde\xb4\x0e\x2f\x59\xad\xa6\xde\x35\xb2\x18\x45\x6d\x14\x8c\xc6\xbd\x34\xe7\x5c\x87\x7b\x17\xb7\xa8\x5d\x50\xd0\x52\xf0\x31\x05\x3e\x9b\x00\xcb\xa5\x53\x9d\x7b\x17\x50\xc8\xcd\x39\x95\x54\x12\x0b\x2c\x18\x9c\x21\x2c\xad\x31\xd7\x4c\x18\x84\x16\xa5\x67\x56\x2f\xdd\x87\xf8\xa8\xe6\x34\x88\x66\x8a\x38\xd9\xa8\x14\xad\x6b\x63\x62\x0e\x86\x93\x00\x9c\xff\x0b\x00\x00\xff\xff\x56\x5a\x9c\x6f\x10\x0e\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xc1\x6e\xe3\x38\x0c\xfd\x17\x9d\x7d\x5a\xec\x16\x8b\xdc\xd2\x62\xb7\xa7\x62\x80\xb6\xb7\xa2\x28\x68\x9b\xe9\x68\x20\x4b\x86\x44\x39\x35\x8a\xfe\xfb\x20\x89\x63\x3b\x1d\xc9\x52\x1a\xd7\xf6\xad\x40\x29\x85\x8f\x7c\x7c\xa4\xe8\xa7\x77\x96\x29\x69\x08\x24\xb1\x15\x69\x8b\x09\xe3\xb2\xb4\x64\xd8\xea\xe9\x39\x61\x12\x0a\x64\x2b\x26\x81\x78\x85\xb7\x48\x8f\x8a\x40\x3c\xd8\xb2\x14\x35\x4b\x98\xb2\xd4\x98\xbe\x1f\x2d\x59\xc2\xa8\x2e\x77\x7f\x59\x2e\xe9\xaf\x7f\xae\xd8\xc7\x73\xc2\x4a\xa8\x21\x15\xc8\x56\x1b\x10\x06\x13\x66\x08\x08\xef\x2c\x41\xca\x05\xa7\x9a\xad\x58\xc5\x71\xdb\x9d\xdd\x58\x99\x11\x57\x92\x7d\x24\x91\xfe\x15\x18\xf2\xc7\x90\xe6\xf2\x35\xd2\x9d\xd2\x6a\x0c\xba\xd3\x9c\x6e\xfd\x69\x7f\xf4\x45\x63\xc6\xb1\x42\xdd\x5d\x01\x79\xae\xd1\x98\xfd\x0d\x47\x2b\x28\x94\x95\xe4\x8e\x58\x63\x03\x65\xa9\x55\xe5\xc1\x66\x6c\x96\xed\xee\x6c\x2f\x48\x95\x12\x91\x00\xa5\x92\x47\xa3\x33\xa3\xde\xfe\xfc\x0e\x92\x03\xa0\x83\x35\xd7\x20\x40\x66\xc1\x0c\x4d\xc9\x18\x9a\x95\xc8\x7e\xe6\x64\x4a\x92\x86\x8c\xd6\xee\xe0\xf6\xd8\x23\x71\x7b\x07\x86\x9c\x24\xeb\x70\x1a\xa4\x9b\xe6\xca\xd6\xba\x43\x3b\x36\x55\xc6\xc0\x45\xea\xe2\xaa\x21\x0d\xd2\x6c\x50\xff\xaf\x55\x71\x44\x3f\x6b\x09\xf9\xe3\xb2\xd1\xaa\x98\x34\x1e\x0b\x8d\x43\x3c\x3f\xcc\xae\x68\x79\x98\xf6\x0f\x9d\xdd\xf7\x11\xde\xab\x2f\x39\x66\xbc\x00\x61\x62\xc4\xe5\xdf\x31\x9b\x92\x4f\xad\xa3\x03\x9c\x81\x10\x81\xe8\xb6\xc2\x7e\xa3\xa4\xb1\x45\xb9\x73\x63\x2d\x84\xda\xce\xa4\xf2\x5e\x5a\x69\x20\x1c\xee\xaf\xf9\x2f\x6b\xe8\x56\xab\x2d\xfd\xbc\x3f\x18\xcf\xa0\x8e\x9e\x4e\xda\xe5\x24\xa2\xc6\x0f\x39\x79\xb0\x69\x64\xb3\x9d\xb8\xc0\xa3\xe9\x57\x84\x7b\x5a\x03\x75\xd2\xce\xe6\x2b\xab\x17\xb5\x95\x01\x77\xd3\x43\x42\x7e\x6c\xdc\x29\x49\xdb\x7c\x4d\x36\x06\x45\xcb\x6e\x07\xe2\x75\x30\xda\x0e\x7e\xf5\xef\xf8\xee\x32\x1f\xaf\x7e\xd6\x79\xee\xaa\x9f\xc9\xda\x86\xa9\x8b\x54\x89\xe9\x9f\x32\x5f\xec\x1a\xee\x96\xb0\x50\x96\x8c\x39\x49\x2d\xe9\x41\xe6\x48\xc2\x7f\x6f\x98\x59\x52\x8b\x0a\x7f\xb0\x17\x1f\x2b\x70\xc2\x8e\x3c\x1e\xed\x9d\xd3\x66\x8f\x18\xde\x99\xb5\x27\x52\xaf\x1a\x31\xff\x12\x79\x26\x7b\x74\x7a\x87\xc3\xbe\x8d\xc6\x9c\xbb\xca\x28\x39\x59\x90\xa8\x0a\x75\x7d\xef\x26\x45\xcf\x12\xdf\x4a\xae\x61\x0f\xe7\xc4\xee\xea\x6f\xc7\x9e\xa4\x37\x8f\xce\xa3\xdf\x38\x5f\xe1\x45\x2e\xef\xae\xad\x96\x7b\x96\x2d\x6b\x15\x33\x9b\x5b\x97\x4f\xac\x97\x15\xf7\xe7\x99\x76\x8e\x67\x6b\x78\x9a\xed\xbf\xbf\x4b\x94\x79\x60\xe4\x85\xe1\xc7\xa0\xc6\x02\xb8\xdc\x8d\x30\xcb\xce\x6c\x84\xda\x45\x88\x5d\xb4\xd6\xc5\x49\x5d\xd3\x26\x67\x15\xbc\x51\x5b\x47\x07\x2d\x5b\xf8\x3a\xe1\x0c\xb4\xa1\x7a\xdf\xff\xff\x51\x5d\xe3\xbc\xf5\x7e\xce\xfb\x6f\xb1\x23\x0e\x48\x25\xeb\x42\x59\xe3\x4a\x1d\x97\x39\xbe\x61\xde\xfe\x2b\x76\x1a\x75\xcc\xa1\x8d\x31\x56\x28\xe9\x8c\x1f\x3e\x04\x3f\x5a\x7b\x3c\xe7\x06\xa4\xc8\x03\x71\x48\x9a\x7c\x51\x09\x4a\x95\xe7\x60\x9c\x74\x39\x45\xeb\x8b\x51\xfd\x84\x35\x3e\xac\xa7\x07\xa3\xb6\xc9\xa7\x6d\x79\xb1\x0e\xfb\x0f\x85\xd4\x68\xed\x50\xa3\x89\xd9\x7e\xea\xb0\x12\xb9\xf7\xe3\x96\xff\x54\xdc\x27\x31\xd7\xe2\x70\x0c\xb0\x03\xdf\x72\x3c\x07\x7c\x0b\x09\x0f\xbc\x97\x0a\x84\x1d\x56\xad\xc7\x6e\x3f\x31\x0a\xa4\x81\x79\xd0\x73\xc2\x3f\x1e\x5e\x04\xec\x20\x1d\x20\xfe\x00\xf6\xfc\x3b\x00\x00\xff\xff\x5d\x0e\xe8\x72\xc2\x20\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x09\x96\xe3\x28\x0f\xbe\x92\x56\x10\xc7\x61\xbd\xff\x11\xfe\x87\x31\x89\xb7\xc4\xae\x9a\xfe\xa7\xa7\xf2\xba\x3a\xa5\x87\x85\xf4\x49\x68\xc3\x0e\xfa\x47\x40\xc9\x01\x08\x3b\x04\x87\x80\xe6\xd5\x3b\x6e\xeb\x8f\x83\x0a\x0e\x80\x20\x3a\x00\x60\x05\x41\xe7\x18\x24\x63\x6d\x82\x86\x28\xcb\x33\x59\xbd\x81\x63\x70\xad\x94\x0a\x3c\xa8\x09\x57\x6a\xd0\x1a\x7d\x1a\x54\xe2\x34\xa8\x88\x21\xe7\xaa\x2b\xd5\xaf\x6b\xd1\xd0\x41\x29\x65\x50\x03\xac\xd4\x56\x53\x8a\xae\x0d\x6a\xe4\x41\x25\x24\x17\x23\x84\x41\xcd\x71\xa5\x72\x32\x4f\x93\x43\xa3\x95\xea\x09\x25\xcb\xe0\xc0\xb8\xae\x65\xe4\x5c\xd5\xf9\x41\xe5\xb6\x52\x29\x4a\xf4\x4e\x07\xd5\xd9\xa0\x0a\x52\xce\xad\xad\x1c\xac\x0c\xaa\x3a\xca\x8c\x64\x83\x3a\x25\x73\xc9\x18\x7d\x5c\xd7\x66\x1d\x54\x0f\x11\x8c\x78\x60\xc6\x75\x95\xc1\x72\xac\xd1\x9c\x5b\xa8\x02\x61\x50\x03\x57\xca\xdc\x06\x3a\x22\xb2\x52\xb5\x58\x48\x32\x38\x88\x73\x2b\x35\x49\xc2\x94\x69\x50\xfd\xca\x21\x06\xd0\x90\x53\x1a\xd4\xb0\x6a\x11\x73\x92\x4c\x50\x07\x35\xad\x32\x24\x64\x2e\x56\x86\xbc\x92\x57\xdd\x12\x95\xaa\x82\x2b\x87\xba\xea\x96\x9c\x73\x15\xd2\xc0\x4c\x69\x95\x21\xb3\x64\xb0\x3a\x30\x53\xad\x2b\x55\x0a\xe7\x1c\xe3\xde\x4b\x8a\x05\x64\xcd\xc3\x42\x3a\x2d\x5f\x62\x11\xca\xba\xf2\xb5\x55\xe3\x52\x1c\xd5\xc2\x43\x5e\x8d\x2b\xdf\x8a\x46\x98\x56\x8f\xd2\xb2\x4a\x56\xb5\xa9\xd6\x3a\xe4\x75\xb0\xfa\x59\xf5\xa1\xb1\x2f\x03\x1d\xc7\xab\x47\xb5\xea\x01\x42\x5b\xa9\x2a\xea\x35\x75\x0f\x37\x68\x45\x13\x0b\x6a\x97\x38\xf4\xb3\xf0\xa2\x2e\x94\xd6\xd7\x7b\x56\xd7\xd7\x0b\x28\x06\x30\xec\x27\x88\x00\x70\x50\x0c\x02\x02\x07\x68\xfc\xe6\x94\xf2\x91\x53\x5e\x76\xf6\xf6\xe6\xd4\x79\x18\x18\x29\xd9\xc2\x15\xd0\xd8\xd0\x50\xf1\xbd\x43\x40\x05\x5b\x76\x5d\xff\xee\x4f\xb0\x71\xe7\xad\xa9\xaf\x47\x58\x76\x24\x58\x34\x35\x82\xfe\x3c\x2f\xff\x4f\x29\x11\xb0\x2e\xfb\x2a\x8c\x4f\x58\xfe\xf5\x1d\x3b\x5f\x6c\xe8\x6c\xe5\x42\x65\xe5\xc2\xb6\x48\xd8\x65\x5a\xb8\xf4\x70\x81\x00\x10\x81\x31\xa0\xdb\x4b\xd8\x39\x07\x1a\xbc\x3f\x62\x42\xe2\x0e\x98\x90\x16\xb7\xa0\x18\xd7\x98\x03\xbc\x44\x26\x45\xe7\x80\x84\xfb\x53\x2e\x85\x2d\xf6\xa8\xa8\x0f\xf0\x27\x7f\xc2\x3f\xb4\x8f\x7b\x21\x78\x5a\x2c\x3c\x9f\x0e\xe9\xd2\x0f\x3c\x85\xed\xaa\xee\x9d\x7b\x7d\xb2\x5d\xef\x61\x88\x6e\xb1\xe0\x6b\xbf\x00\x9d\x53\xb7\xe1\xe4\x56\xf4\x29\x3a\x07\x6e\x20\x03\x29\x2b\x65\x2b\x5d\x2b\xff\x90\x5f\x30\xdd\xf0\x63\x3a\xc9\xf7\x58\xdb\x50\xb7\x92\xb1\xc4\x03\x27\x56\x72\x08\xc9\xd5\xed\xd9\x68\x2d\x40\xc0\xad\xa7\x7d\xb4\x36\x7b\x7e\x6a\xed\x93\x6c\xc9\x6f\x2d\xcf\x3d\x6e\x5e\x68\x39\x10\x49\x3e\x6d\xd7\x9e\xed\xff\xc0\x9f\x0f\xfb\x15\xf8\x35\xaa\xd9\x76\xd2\xb4\xa3\x7d\xbe\x7b\x7c\xb6\xb6\x79\x5a\x50\x0e\x4f\x0b\x7d\x90\x63\x79\xba\xc0\x2e\x8e\xed\xd7\x3d\xb6\x9b\x48\x7b\xaa\xfd\x06\xc1\xbd\xde\xd2\xf3\xc9\x45\xa4\x2d\x0e\xb7\xab\xec\x67\xfa\xed\xe3\x81\xc4\xa3\x7f\x3d\xb1\x74\x89\xb4\xe5\x91\x8f\xf6\xe9\x12\xbc\x72\xcb\x5c\x55\xbe\xf9\x5f\x49\xb6\x5d\x5b\x8f\xfe\xa7\x40\xdf\x6c\x96\xd2\x57\x9b\x11\xba\x9e\x8b\x7a\x84\x5d\x32\xd3\x9a\x41\xe4\x95\x29\x2e\x6d\xa8\x7c\xc4\xff\xa9\x07\x8f\x38\x03\xae\xff\xf6\xed\xf0\xe3\xc0\x5e\x72\xe7\x2d\x42\xea\xc2\x25\x8e\x6d\x44\xd4\xb9\xea\x32\xfe\x23\xb4\xb2\x45\x50\xed\xb1\xff\x5d\xc9\xbe\x20\x85\x3d\xf5\x6e\x79\xa6\xa3\x7c\x8f\x63\x51\x77\xab\x2d\xa7\xf2\xdb\xfc\xf2\x10\xd9\xee\x42\x9b\xfd\x1c\x1e\xf3\xf3\x0f\x24\xd7\xad\xe4\x8e\x8f\xf9\xf3\xf6\x5c\x4f\x2c\x8b\xdf\xf2\xd1\xa3\x7d\xbe\x7a\x38\x92\xd0\xf0\x70\x80\xe1\x0d\x9d\x87\x81\x43\x54\xd1\xe9\xfb\xb6\xd6\x70\x6b\x5c\xea\xfc\x96\x58\xe5\x9b\x3a\xa7\x2a\xce\x5c\xf3\x04\xbf\xf8\x79\x9f\x9a\x51\x5f\xad\xb2\xec\xa4\xe5\x5e\xb1\xb9\x45\xa7\x57\x95\x37\xbf\xc9\x52\xdb\x11\x04\x31\xdf\x2b\x32\x13\xa5\x20\x3d\x9a\x2a\xf5\x9a\x8c\xc0\x34\x80\x6a\x3f\xab\x01\x03\xf8\x66\x59\x53\xc5\xaa\x35\xd5\xec\x8b\xa6\x82\xd2\x3c\x0a\xf9\x82\xd5\xa4\x71\x29\xbd\x37\xcb\xd0\x7c\x22\x0a\x58\x35\x11\x40\xcc\x96\x7d\xe6\x14\x48\xc3\xe0\xf8\xa5\xa6\x8d\xdc\x2b\x3a\xc0\xbe\xe3\x52\xdf\x2d\x55\xe4\x06\xe1\xde\x25\xc2\x51\xcb\x6d\xcf\xe8\x16\x64\x66\xbd\x3b\x63\x4a\xaf\x71\xdf\x5d\x67\x47\x64\xf6\x9d\x40\x43\x16\x10\x58\x9e\x98\xf2\x18\x03\xdb\xc2\xcd\xbc\x01\xa7\xe1\x31\xe0\x4f\xf1\x9f\xb2\xd3\x08\xdc\x70\xae\x30\xda\xae\xd8\x57\xa9\x3a\xea\xd7\x5b\x6d\x66\xcf\x65\xf2\x49\x9f\x4d\xe7\xfc\xd2\xcb\xba\xfa\x53\x9f\x8b\x1c\xd9\xb5\x7c\x55\xea\x0f\xf5\xad\xc7\xf8\x72\xd2\xb7\xc5\x7b\x7d\x99\xcf\x12\x8d\x53\x6d\x84\xa3\x37\x35\xdc\xc5\x9f\x6b\x5c\x66\xe7\x6b\xd2\x91\xf9\x88\x83\x7e\xc4\x81\x8c\xb7\x38\x0c\x54\xe8\x85\x8a\x2c\xa8\xc0\x1d\x2a\xe6\x8f\xf9\xfd\x88\x8a\x99\x9e\x51\xb1\x93\x3c\xe8\x7c\x63\x6d\x59\xab\x4a\x74\xbe\x26\xa2\x66\xc8\x85\x31\x83\xb9\xe0\x1c\x66\x35\x21\x2d\xa2\xe4\x91\xa5\x68\x73\x62\x44\x9e\x21\x21\xf9\x62\x52\xb3\xd1\x1b\x8b\x2b\x6d\xed\xad\xe7\xd7\x2c\x1b\xd7\x8e\xea\xa1\x67\xea\x5f\xf6\xcc\xc0\xa7\xfe\xee\x60\x83\x20\xfe\xab\x67\x82\x5e\x68\x78\xf6\xd4\xee\x9f\x93\xa3\x3f\xd6\xcf\xc1\xa7\xee\x8b\x26\x3d\x1f\x64\x7d\xc5\x2b\x0c\x1c\xf6\x78\xee\x78\xf6\x68\x3b\xe2\xf2\x3b\x16\x9e\xe2\x32\x9b\x43\x67\xac\x14\x7a\x84\xa7\xbe\x92\x40\xc5\x28\xc0\xda\x85\x87\xb4\xaf\xdf\xce\xbb\xe8\x83\x5d\xfc\x76\x17\xea\x19\x4b\x8c\x03\x74\xdb\xa8\x5e\xeb\x68\x27\x5f\xfb\x84\x5c\xcf\x87\x10\x7b\xe5\xa3\x77\x1e\xc5\x7f\xd9\xa3\xe2\x29\xff\x1f\x3d\x2a\xee\xed\xff\x4f\x3c\x4a\x5f\xbb\x86\x63\x7f\x1a\x23\x1b\xf5\x2a\x02\x97\xea\x71\xae\x8b\x0f\xe2\xe3\x9c\x72\xcd\x99\xcd\x17\xfc\xdc\x47\xfc\x78\xf5\xcd\x57\x8c\x1c\xd5\xfa\x3b\x4e\x8e\xb9\x48\x8f\x96\x13\x61\xf7\x2c\x6e\x26\x3c\xf7\x9f\x7b\x84\x13\xe1\x19\x61\xdf\x40\xab\x2b\x81\x4a\x46\x21\xc3\x16\x62\xae\x66\xa1\x90\x23\x11\xcc\x39\xe7\x54\xa5\x16\x74\xe4\x1c\xd6\x14\x72\x55\x69\x42\xe8\x0a\xc5\x1a\xbd\xf6\x18\x49\x7f\x24\x46\xe2\xfb\x44\x23\xbd\xb3\xf8\xb6\x5e\xb9\xb6\xcc\x9c\x8c\xfe\x9f\xeb\x93\x94\xef\xea\x93\x54\xbe\xd7\x27\x3f\x8f\x8a\xa9\xa5\x7b\xcf\x9c\x33\x60\x7b\x7a\xa6\x65\xc1\x1e\x47\x3d\x3a\xcf\xf0\xad\x87\x65\xb9\xd3\x3f\xeb\x85\xfe\xbe\x49\xa5\x9a\x58\x12\x94\xe0\xb2\xa3\x4a\xa0\x28\x5c\x89\x83\x36\x0f\x54\x85\xc4\x33\xb5\x40\x00\x96\x1a\x24\xa0\x14\x9b\x64\xcf\x6c\x39\xe6\x62\x86\x77\xf3\xda\xc5\x77\xe6\x54\xf4\x6b\x8e\x9d\x77\x17\x7f\x3d\x22\xe6\x7a\x9e\x0f\x1c\xd0\x6c\xe1\xab\x37\x1d\xb3\xe0\x7f\x3d\x07\x9c\x35\x2e\x2e\xdc\x76\x74\x32\x3b\x3a\x15\x31\x69\xbf\xe9\xe6\xbe\x74\x74\xb0\x4c\x77\x1a\xf3\x65\x9d\xb1\xeb\x94\xe6\x13\xdd\xe7\xb4\xff\xeb\xb9\x5a\x7e\x94\xab\xab\xd3\x07\xb9\xda\xfd\x65\x3b\x55\x3e\xcf\x87\xf7\x9e\x59\xf7\xf3\xff\x3f\x92\xab\xeb\xa9\xfe\xab\x3e\x98\x9e\x72\x75\x3d\xcd\xff\xaa\x95\xc5\x76\xaf\x75\x9d\xb6\xbf\xff\xb9\x46\x7c\xde\x45\x99\x9b\x9f\x2f\x38\xdb\x47\x9c\xb5\xe7\xfb\x4d\x4e\xef\xc8\xcb\x9a\xd3\x65\xf6\x3e\xc6\xdb\x88\xeb\xa6\x4d\x4e\x33\x9d\x69\x35\x7b\x59\x2d\x3e\x8b\xce\xed\x36\xff\xb7\xab\xfc\x6f\x17\x56\x59\xfa\x8f\x53\x2f\x45\xd9\x52\x49\x5e\x82\x6b\x94\x30\x78\x47\x50\x1c\x80\x49\xcc\x59\x92\x5a\x08\x48\x21\x4a\xce\xea\x43\xf3\x16\x31\xa4\x1a\x29\x35\xa2\x4a\x8e\x22\x99\xf6\xcf\x1a\xc9\xa9\x57\xc5\xcb\x99\xdc\xe2\x72\x42\x63\x99\x80\x2d\xd5\xf4\x0e\x3d\xe8\xdf\x0e\xd5\x03\xcf\x1b\xb1\xbb\x78\xf8\x2f\x55\x0b\xc7\x69\xc6\x47\x79\xe6\x4d\xeb\xbf\x2b\xcf\xe7\xfe\x29\xf4\x53\x71\xdb\xd9\x0c\x1f\x37\x5a\x6b\x58\xec\xdd\x8d\x4a\x80\xed\xdd\xe4\x9d\x25\xe6\x6d\xfd\x98\x38\xfc\x20\xe6\xfd\xc3\x19\xc4\x1d\x56\x08\xe9\xa6\xff\x45\xc8\xdf\xfb\x5f\x09\xfc\x0c\x83\x79\x53\xbf\x47\x40\xfe\x78\xd4\x1f\xb9\xf5\xa3\xc6\x48\x37\xfd\x19\xa2\xdc\xf4\x67\xc3\x6e\x33\xfe\x8f\x9b\xe9\xab\x98\x7f\xd5\xdf\xce\x7a\x17\x71\x7f\xff\x77\xd3\x89\x89\xf1\x8c\x28\xff\x95\x3e\x0c\xb1\xdc\xcc\xaf\x10\xeb\xc5\xfc\xca\xb7\x92\x38\xe7\x4a\x52\x09\x89\x5c\x50\xb6\x4a\x1a\x55\x4a\xa0\xde\x9f\x42\x2a\x66\x15\x7c\xe2\x44\x21\x3a\x8c\x85\xb5\xb2\x26\xc1\x62\x99\xb1\xaa\xf1\x97\x69\xd5\xa2\xaf\xed\x35\x85\x83\xa6\xcf\xe2\x2c\xee\xbd\xda\xfe\xdb\x7e\x7d\xbe\xff\x3f\x5a\x83\x62\xfe\x89\x5f\xaf\xb5\xdf\xa6\x06\x1c\x37\x00\x88\x0b\x37\x4e\x51\xfd\x35\x22\xf3\x7d\xa3\xee\xb5\x7f\x28\xda\xad\x96\x84\xa5\xba\x18\x98\xfc\x30\xd2\x31\xdd\xe1\xc3\x7c\x83\x8f\xc2\x5c\xa9\x78\x7f\x76\xe7\xdb\x51\x63\x8a\xf2\xff\xd0\xf9\xf6\x84\x72\xbc\xa9\x6f\x91\xd3\x45\x7d\xdb\x57\x22\xe7\xc3\xfc\xc8\x21\x2e\x25\xcf\x55\x54\x73\x9c\xa1\x56\x48\x16\xf7\x36\x37\xd0\x80\xd0\xb9\xf5\x8e\x48\x41\x83\xa6\x99\x61\xb1\x61\xe8\xbf\xbb\x76\xfd\xc4\x02\x6e\xfa\x5d\x0a\x6f\xec\xe5\xbe\x2a\x30\xb8\xea\x4f\xae\x22\xf2\xec\xaa\x8d\x37\xdf\xa7\xe7\x93\x21\xf0\xf2\x6e\xd3\xaf\xdf\x69\x42\x71\xf1\xf3\x3b\x4d\x28\x4a\x4f\xde\x69\x42\xe9\x55\xfd\x2f\xdf\x69\x92\x77\x55\xf2\xc0\x47\x24\x1d\xdf\x1f\x3b\xfa\x88\x64\xbb\xf2\x91\x2b\x3f\xb8\xaa\xb1\x7d\x2b\xa5\x91\x52\x2c\x98\x2a\x65\x0b\xc9\x85\x4c\x09\x9c\xb5\xcc\xde\x4a\x8c\x41\x29\x45\xdf\xb0\x57\x88\x11\xd1\x91\x35\xd5\x28\xa5\x29\x71\xe2\xda\xe6\xf9\xf9\x7e\xe3\xb7\x8f\xd5\xa7\x29\x76\xcf\xbd\x43\x1f\xe5\x35\x6f\x75\xc4\x96\xbf\x97\xb7\x4a\x8c\x38\xad\xfd\xdc\x12\xe5\x5e\x78\x8e\x2c\xbf\x70\x9e\x51\xe6\xd0\xb9\x2f\x72\xf5\x8a\x10\x20\xa2\x53\x47\x3e\xfa\xe8\x89\x41\x8d\xa0\x44\xef\xd9\x43\x72\xa2\xda\x01\x8e\x51\x18\xc0\x51\x90\x12\x03\x61\x6b\x81\x5d\x10\x0e\x55\xb1\x56\x2d\x29\x7a\xcb\x15\x50\x2c\x27\xd2\x64\x00\x40\xe1\x7f\x01\x00\x00\xff\xff\x87\x10\xeb\x23\x06\x2b\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\xf4\x40\x0c\x86\xff\x4b\xce\x73\xda\x8f\xcf\x43\xef\xe2\xc9\x93\xc7\xa5\x48\xda\x66\x65\xb0\x9b\x29\x4d\x52\x77\x58\xfa\xdf\x45\xb7\xed\x80\xcc\x32\x22\xb2\x78\x2c\x7d\x27\x79\xf2\xf0\xee\xcf\xd0\x06\x16\x45\x56\xa8\x0e\xd8\x0b\x39\xf0\x3c\x98\x0a\x54\xfb\x33\x30\x1e\x09\x2a\x78\x7e\xa5\x08\x0e\x34\x0e\x1f\x5f\x4d\x54\x92\x7f\x3b\x98\x5d\x0a\x4c\xd8\x1b\xa5\x88\x79\xd6\xdd\xff\x3b\x98\x6b\xb7\x46\x84\x14\x1c\x04\xd3\x65\x78\xed\x60\xc0\x88\x4d\x4f\xdb\x62\x51\x54\x7a\x34\xc5\xc6\xf7\x5e\x23\x54\xc0\x81\xd7\xd0\x36\xfb\x60\xdc\xaa\x0f\xfc\xb9\x3f\xc1\xeb\x68\x59\xf6\x3c\x7a\xe2\x62\x54\x3f\xd1\xc3\x17\xba\xed\x79\xfe\xa6\x32\xf9\xe4\xe9\xed\xc7\xcc\x57\x7c\x27\xe8\x97\xbf\x80\x9b\x71\x78\x7f\xa2\xd6\x34\x8c\x25\x38\xec\xba\x91\x44\x7e\x13\xee\x6a\x79\x4b\xdd\x2d\x57\xf7\x72\xde\xd3\x6d\x0b\x9c\xd6\xd3\xad\xa5\x22\x07\x8e\xc7\x60\x92\xb3\xea\xb9\xa3\x13\x75\x2b\x6f\x49\xf2\x16\x5f\x26\x7d\x5b\xfa\x45\xf7\xf2\x9f\x26\x62\x85\xb9\x7e\x0f\x00\x00\xff\xff\xd3\x6a\xf5\x71\xaf\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x61\xae\xeb\x2a\x0c\x84\xb7\x34\xb6\xb1\xb1\x97\x03\x04\xf6\xbf\x84\x27\x43\xd3\xbe\xd3\x5b\x9d\xde\x5f\xb7\x91\x2a\x65\x84\x61\xe6\xb3\x89\x21\x9f\x02\x65\x03\x8a\x18\xc1\x08\xd0\xa9\xd5\x64\x3d\x7e\x86\x09\x03\x18\xcd\x00\x88\xa2\x90\x99\x70\x95\x55\xa2\xc0\x89\x4a\xd6\x98\x68\x75\x98\x70\x6b\xab\x0f\xad\x47\xad\xf3\xa8\x3e\x5b\xb3\x36\x70\xd4\x66\x47\x6d\xa3\x97\xc1\x98\x47\xcd\xaa\x54\xbb\xc8\xb8\x7c\xb6\xa3\xce\x7e\xd4\x21\x65\xc0\xa7\x6e\x95\x50\xb4\x6a\x4f\x3f\x8e\x75\x69\x97\x42\xba\x5d\xa4\xf3\xa7\xba\x1d\x8c\x9d\x4c\x0d\x9c\xff\x04\xa2\xaa\xa6\x1d\x78\x55\x79\xbc\x57\x45\x79\x54\x11\x58\x28\xd7\x6f\x4a\x14\x70\x4a\x56\x0c\xd0\x51\x1c\x41\x90\xc0\x92\xd7\x7e\x9d\x7e\xdd\x6f\x9f\x7f\xaf\x1d\xf5\x7d\xed\x58\xb9\xaa\xf9\xeb\x54\xdb\xa7\xb5\x47\x17\xf2\xb4\x20\xb2\xbf\x71\xb2\xec\x2b\x0f\x6e\xd7\xff\xfc\x10\xd6\x67\x3f\x7d\x53\x10\xbc\x7b\xc9\x59\xb8\xfb\x98\x75\xb7\xe3\xf4\x95\xfe\xb6\x33\x7a\x4d\x13\xd9\x6b\x9e\xc0\x27\x03\x0a\x76\xc5\x9d\xc3\x05\xe2\xb4\x5d\x54\x87\x74\xd2\xe3\x4d\xaf\x37\x6f\x3c\x4c\x1b\x64\xd1\xbd\xe2\x67\xff\x15\xf9\xdc\xbb\x66\xf7\xf4\x83\x7f\x91\x3f\x35\x2a\xf7\x8e\xf1\xa3\x3f\x9f\xf3\xdf\x13\xeb\xe2\x72\xe7\x7f\xde\x99\x67\x72\xdf\x58\xee\xc4\x9e\x7b\x73\x20\x78\x77\xb1\x38\x3f\x78\x6d\x16\xf8\xca\x62\xca\x37\x16\xab\xfc\x64\xe1\x12\xa4\xa8\x8b\x7d\x0a\x17\x5b\x49\x44\x97\x0e\x9a\x57\x78\xed\x24\x32\x17\x2f\x0a\x29\x12\x9d\xb5\x8d\xde\xac\xe9\xb4\x58\x4c\x31\x3d\x6c\x8d\xb8\xa8\x46\x52\x74\xfe\x76\x1f\x1a\x6f\xfa\x96\x27\xa7\x8b\xc0\x99\x67\xe0\x33\xc3\xfb\xbb\x91\x04\x3f\x4f\xd1\x47\xa6\xe5\x0f\xa6\x94\xb7\xe3\x30\xfd\xab\xa9\x62\xf7\x2f\x24\x39\xe2\xd7\xa9\x92\x38\x59\x9f\x09\xe3\x91\x5b\xbf\x64\xfe\x47\xf7\x86\xd7\xfb\xf7\xed\x3d\xa1\xa0\xfd\x9a\x90\xf2\x3d\x53\x01\x8d\x4c\x8d\x6b\xab\xad\xb2\x40\x9d\x11\xeb\x6a\xa8\x52\x87\x10\x5d\xd3\xed\x02\xa1\x93\x0f\xe1\x35\xbb\x77\x82\xcd\x4e\xa1\x57\xb8\x3a\xcc\xd7\x70\xbe\xba\x74\x35\xe5\x5e\x16\x4d\x80\xe3\xbf\x00\x00\x00\xff\xff\x12\xed\x04\x61\x88\x06\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

