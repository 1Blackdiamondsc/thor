// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeInterface.abi
// compiled/PrototypeInterface.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// compiled/proto.abi
// compiled/proto.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x41\x6f\x83\x30\x0c\x85\xff\x8b\xcf\x39\x6d\x37\x6e\xfb\x01\xbb\xec\x5a\x21\x14\x88\xa9\x22\x81\x8d\x62\x87\x81\xaa\xfe\xf7\xa9\x15\x10\x3a\xb1\x76\x9d\xd6\x49\xbb\xb6\xf6\x7b\xdf\x7b\x49\xd8\x1d\xa0\x62\x12\xb5\xa4\x90\xd5\xb6\x11\x34\xe0\xa9\x8b\x2a\x90\xed\x0e\x40\xb6\x45\xc8\xa0\x10\xbf\x27\x0c\x60\x40\xc7\xee\xf4\x83\x75\x2e\xa0\x08\x1c\x73\x33\xcf\x04\x6c\xb9\x47\x30\xc0\x51\xa7\xfd\xdc\x40\x67\x47\x5b\x36\xb8\x68\x8b\x5a\xc5\xd7\xa8\xb6\xf4\x8d\xd7\x11\x32\x20\xa6\x79\x68\x91\xaf\x23\x55\xea\x99\xe0\x68\xd6\x7c\x1a\xe2\x1a\x2f\x79\xd7\x3e\x88\x5e\x58\x2f\xe8\xdb\xcc\xb7\xb1\x7a\x8f\xef\xf7\x02\xdd\xd5\x17\xe1\xf0\xdf\x90\xf7\xf8\x05\x71\xe3\x45\xd1\xa5\xdd\x92\xb9\x39\xfb\x4e\xff\x23\x39\x0e\xc2\x5b\xea\x69\xc8\x3b\x24\x3d\x25\x49\x32\xa3\xa2\x3c\x3f\xad\x87\x6c\xa5\xbe\xc7\xcf\x4e\x0f\xab\x27\x65\xc7\x01\xab\xa8\xe7\x08\x7f\x7d\x64\x3f\x78\x96\xa9\xb0\xe2\x5b\xdd\x17\x57\xca\x4f\x1d\x58\xe7\x1e\xf0\xbe\x2d\x31\x8d\x2d\x47\xd9\x4a\xea\xc9\xe1\x80\x6e\x3e\x98\x09\xe4\x5a\xee\x65\x63\x12\xbb\x7d\xbb\x52\xc0\x17\xb7\xba\xc4\xd8\x23\xe9\xaf\x13\x26\xb3\xb7\xf9\x83\x79\xe9\x97\x7f\x04\x00\x00\xff\xff\xc0\x4e\x73\x3a\x93\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x0b\x6e\xe3\x3c\x0f\xbc\xd2\xf0\x29\xea\x38\x7a\xde\xff\x08\x3f\x68\xd7\x49\x36\x69\x93\x2e\xf0\xe3\xdb\x1a\x0d\x12\x7a\x44\x73\x86\x23\x5a\x8e\xbc\x14\xc6\x0e\xa8\x38\xc1\x09\xb0\x65\xc5\x65\x7f\xfd\x39\x16\x1c\x60\x34\x07\x20\x06\x25\x77\xe1\x8a\xca\x13\x2b\x88\x34\xd7\xb8\x58\x09\xb8\xc8\xdc\x3a\xe7\xd6\x33\x1a\x7a\x46\x5b\x2f\xb2\x84\xfc\x8c\xf6\x2f\xec\xe0\x3e\x78\xed\x71\x46\x27\x7f\x45\x45\x07\x62\xd9\x11\x25\x2e\x67\x74\x0e\xa0\x6a\x8f\x33\x2a\xcd\x8a\xf5\xac\x27\xb0\xa7\x75\x51\xb2\xa3\x8a\xac\xfc\x16\x3d\x2a\x48\x66\xe4\x68\x5f\x1c\x20\x07\x53\x23\xcf\x3c\xce\xe6\xd6\x81\x7b\x86\xd8\xcf\x19\x6a\x71\x02\xf7\x9a\xc8\x43\x2b\x7a\xce\x58\x51\x89\x3c\x28\x55\xe4\xe3\x5e\xa2\x02\x95\xf2\xde\x96\x7b\xf6\xfe\x52\x5f\x2d\x6f\xea\x13\x46\x3e\xf5\x5a\x3d\xe7\xf3\xea\xfd\x52\xcb\xe3\xea\xfa\x50\x73\x15\x32\xb2\x50\x7b\xd1\x23\x1b\x49\x9e\x95\x87\xe2\xe0\xa0\x88\xe3\x7b\xa5\x64\x66\x5c\x91\x6b\xd3\x29\x21\x27\x22\x90\x77\x40\xf5\x7b\x9e\x24\xfc\xad\x8a\x2a\xfc\xc0\x87\xd4\x7e\xdb\xad\x20\xf2\x0a\x07\x9f\xdc\xa0\x2a\x99\x41\x4b\x3b\x18\x66\x27\xdb\x3d\xff\x73\x0e\x72\x91\xd7\x18\x69\xa4\xdb\x69\x87\x15\x83\xe0\x15\xe1\x02\x9e\xa1\x8e\x7e\xd4\x85\xab\xfb\xd9\xe3\x53\xa7\xfc\x75\xdb\x1d\xb7\x1d\x13\x9a\xa0\xd3\x0f\xdf\x39\x25\x39\x05\x9f\x39\x58\x71\x64\xbc\x3c\x13\x02\x09\x3a\x54\x29\x01\xe9\x87\xf2\x04\x9a\xfd\x49\x2b\x1e\x6e\x0d\xb2\xe9\x42\xac\xf1\x88\x30\xe4\x75\x65\xb5\xec\x14\xc8\xec\xca\xc7\x90\x47\xf4\xf7\xec\xb9\xd7\xe8\x70\xfb\xe7\xec\xd9\xda\x07\xf6\xec\xfd\x33\xfb\x13\x19\x78\x44\xc6\x37\xcc\xcb\xee\xab\x8c\xd2\x86\xb0\xc6\xdc\x6a\x41\x83\xe1\x2d\xb4\xb5\x2e\xa3\xeb\x2a\xd3\x98\xba\x49\x8d\xae\xdc\x3d\xa8\x58\xd9\x25\x9a\xb5\x32\x95\x68\x5d\xea\x3c\xce\x81\xc6\x86\x2f\x77\xfe\xe0\xb6\x4d\x28\x58\x63\xfd\xa4\x76\xd0\x5d\xe5\xd4\xf1\xd2\xfe\xa6\xf6\xef\xd4\xcc\x3d\xfc\x5e\x4d\x21\x7e\xab\x26\xe5\xef\xfa\x81\x4d\x9b\xd2\xa6\xaf\x19\xf2\x8f\xdd\x23\xa5\x7e\xe2\x1b\xed\x2d\x5f\xa9\x7c\xc6\x2e\xc6\x87\x6b\x10\x3f\x30\x5f\x2b\x47\x54\x20\xfc\x91\x79\xfc\xdf\x99\xc7\x47\xe6\xdb\x3f\x30\x57\x94\xf7\xfb\xe6\xec\xd8\xfb\xef\x86\x2a\x4f\xff\x74\xfb\x7c\xeb\x11\xde\xc3\xa1\xc7\x5b\xec\xbf\x75\xbc\x06\xff\xfd\xfb\xe2\xd2\xac\xfd\x99\xed\x09\x19\x89\xb5\x00\x59\xcd\xf7\x8b\x0e\xca\xf7\xcb\x0b\x8a\x13\x95\x13\x39\x91\x07\x6e\x24\x2e\x70\x46\xaf\x67\xcd\xf2\x79\x4e\x83\xbb\xfb\x70\x0a\xcd\xeb\xaf\x76\x9b\xff\xe8\x39\x49\x3f\xde\x3d\x77\x9c\x05\xce\x73\xc2\xcd\x85\xaa\x41\xf7\x53\x82\xc3\x7f\xd7\x0d\xd3\x4f\xf3\xc7\xec\xfd\xfc\xb9\x4f\x73\xf3\x3f\xf4\x79\x3d\x3f\xe4\x34\xaf\x7b\x97\x66\xa4\xa2\x75\xcc\xa1\x7d\x7b\xab\x6a\xbd\xcc\xa9\x51\xc5\x28\xfa\xa0\x60\x0c\x9e\x6d\x38\xd7\xbe\xdd\xa7\xb8\x45\x9f\x82\x86\x51\xe2\x4b\xc1\x8a\x9f\xce\x78\xed\x36\x1f\x80\x46\x6e\xce\xa5\x95\x56\x58\x60\xc1\x68\x13\xb4\x61\x68\xa1\x3e\xeb\x9a\x63\x96\x1a\xc5\x14\x61\xd3\xb6\xd7\x65\xa5\x2e\x2e\xab\x0d\x9d\xdb\x9c\x5a\x51\x16\x5f\x7b\x1e\xa3\x78\x11\xc0\xf5\x7f\x01\x00\x00\xff\xff\x1c\x7b\x45\x6c\xaa\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6b\x83\x50\x0c\x85\xff\x4b\x9e\xef\xd3\xf6\xe6\x7b\x1f\xf7\x0b\x4a\x19\xa9\x37\x4a\xc0\x26\x72\x93\xeb\x2a\xa5\xff\x7d\xd4\x51\x5b\x66\x51\xca\x64\x6c\x8f\x92\x13\xfc\xce\xc9\xd1\xed\x09\x4a\x15\x73\x14\x87\xa2\xc2\xc6\x28\x00\x4b\x9b\xdd\xa0\xd8\x9e\x40\xf0\x40\x50\x80\x71\x2d\x94\x20\x80\xf7\xed\xe5\x19\x63\x4c\x64\x06\xe7\x30\x4a\x48\xa2\x26\xd3\x79\x11\x47\x12\x67\xef\x6f\xa2\x7d\xef\x64\xaf\x2f\x70\xde\x85\xab\x48\xd0\xb9\xa3\x77\x8c\x11\x02\x68\xf6\xef\x30\x77\xcb\xaa\xcd\xb0\xd9\x62\x8f\xfb\x86\x46\x07\xe6\xe8\xf4\x96\x1d\xf7\xdc\x5c\x5e\x57\x80\xa8\x5c\x45\xe3\x7a\x95\xa5\x74\x56\x19\x08\x6f\x29\x78\xca\xcf\x85\x30\x41\x67\xdb\x0c\x69\xd0\x9a\x0e\x3a\xa6\x8f\x45\xf6\xe7\x2f\x38\x81\x4f\x74\xd0\x8e\xfe\x44\xf4\x13\xb6\x9a\x7c\x73\xa4\x32\xfb\xd0\xb3\x59\xc0\x7b\x83\x2b\x85\xfb\xf3\x62\x08\x1d\xfd\x5f\x82\xd7\xb4\xc8\xfd\xd5\x88\x30\xe7\xe8\xd1\x70\xfc\x01\x3c\x1c\xae\xfc\x79\x2c\xf5\xab\xe2\x64\xbf\x74\xa0\xdd\x67\x00\x00\x00\xff\xff\x6b\x47\xa3\x3a\x7a\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xcb\xaa\xd4\x40\x10\xfd\x97\x5a\xf7\x4a\x50\x24\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\x49\x2a\xd2\xd0\xa9\x6a\xba\xab\x33\x86\xcb\xfd\x77\x99\x4c\x5e\x68\x5e\x8e\x23\x77\x56\x33\x50\xaf\x73\x4e\x9d\x54\x3f\x3d\x43\x21\x1c\x15\x59\x21\xd3\x90\xc8\x80\x65\x9f\x34\x42\xf6\x74\x32\xc0\x58\x13\x64\xd7\x1f\x03\x92\xb4\x0f\x3d\x0f\x11\x30\xa0\xad\xbf\xfc\x8b\x1a\x2c\xff\x80\x97\x93\x01\x8f\x2d\xe6\x8e\x20\xab\xd0\x45\x32\x10\x15\x95\x3e\x27\xc5\xdc\x3a\xab\x2d\x64\xe0\x53\xa0\xa9\xb4\x4a\x5c\xa8\x15\x86\x17\x33\x87\xd3\x57\x8f\x78\xc6\xa1\xdf\xa3\x27\x2e\x29\x4c\x1d\xb0\x2c\x03\xc5\xd8\x35\x18\x92\x1a\x74\x69\x36\x24\x59\xd6\x37\x6f\xdf\x75\x00\xfb\x14\xf4\x3e\x48\xb3\xc2\x2c\xa6\xa2\xb8\xb4\x1c\x1b\xe4\x22\xee\x20\x3d\x16\x1e\x92\xf6\x48\xae\x6a\xae\xa2\xe8\xbe\x26\xef\x5d\xbb\x27\xfd\x9c\xda\x3e\xb8\xc6\xd2\xf9\x1f\xb4\xaf\x82\xd4\xdb\xc2\xab\x6c\xc7\xb1\x96\xc4\xba\xb9\x19\x0d\xc8\xb1\xa2\xf0\xe9\x3a\xec\x01\xd7\x53\x52\x61\x6b\x74\xf1\xc8\x6e\xde\xdf\xf3\xab\xf8\x0d\xd1\x24\xab\x9c\x79\xf1\x93\x98\x30\xe7\xe8\x90\x0b\xfa\x52\x2d\x83\xee\xc3\xff\xd5\x57\xab\x7a\xc6\xb6\xce\xc5\x3d\xd2\x91\xb9\xa3\x8d\x1f\xd3\xc2\xdd\x85\xf9\x98\x02\x53\xf9\x0a\x17\xe6\xaf\x7d\x6c\x8e\xdc\xff\xd9\x71\x77\x4e\xce\xbd\x9f\x17\xb8\x05\xaa\xd1\xf2\xc5\x4c\xf7\x27\x89\x2c\xdc\xd6\x92\xe2\x92\xbd\x2c\x97\xf4\x93\xca\x41\x80\xfd\xb3\xba\x52\xb0\x66\xcf\x31\xbd\x1f\x7d\xfc\x39\xfc\x36\xb9\xb5\x4f\xa2\x86\x58\x6f\xa6\xb4\xb1\xc8\x95\x8a\xcd\x77\xfd\x76\x62\x1f\xba\x77\x1e\xdd\x1f\xc4\x4e\xbf\x02\x00\x00\xff\xff\x89\x62\x8f\x19\xff\x08\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x09\x92\xc3\x38\x08\xfc\x12\x87\x40\xf0\x1c\x9d\xff\x7f\xc2\x16\x92\x9d\xc3\x99\x49\xb2\x53\xb5\x6b\x97\x6b\x26\x58\x02\xba\x1b\x90\x15\xe2\x4e\x20\xa4\x00\x89\x15\x41\x11\xc0\x8a\x64\xe5\x79\x5c\x0a\x03\x14\x80\xa0\x28\x00\xb0\x40\x42\x55\x06\x9d\xbd\x0f\x60\x43\x4c\x6b\xcf\x94\x6c\xa0\x0c\x2e\xa3\xe4\xca\xcb\x8a\xe8\xdb\x8a\x86\x0a\xbd\xf7\x6d\x4d\xc7\x5a\xe2\x6a\x99\x4e\x6b\x4e\xdb\xca\xc8\x6d\x88\xe6\x6d\xf5\xb6\xad\x19\x0a\x18\xf1\x8e\x86\x4d\xb6\xd5\xa5\x9b\xd7\x74\x58\xc7\xe1\xa1\x38\x88\xb7\x5a\xb7\x75\xe6\x6d\xed\xe6\xc8\xd2\x76\x34\x3a\x33\xeb\x5d\x69\x74\x1e\xdb\x4a\x4d\xb2\xd4\xc0\x69\x30\xbb\x54\x4e\x28\x81\xce\x83\x91\x9b\x35\x2c\x85\x62\xbd\xa0\x68\xac\x4f\x20\xa8\x40\x60\x60\x24\x64\xe8\x60\x08\x68\x6c\x68\x28\xf1\x50\xbc\x05\x74\x14\x30\x10\x74\x38\x7e\xc7\x0e\x36\x0e\xdf\x52\x63\x3d\xc2\x8e\xd8\x47\xe4\x67\x04\xb1\x9f\xd7\xdf\xc3\x47\xbc\x6d\x1a\x71\x05\xf6\xed\xeb\x89\x88\xe1\x17\x27\xaa\x6d\x2f\x08\xf5\xf0\xc2\xb6\x32\x8c\x9c\x96\x17\x5e\x6f\x01\x0a\x30\x3a\xea\x73\x86\xe1\xd9\x69\xfb\xde\xd8\x0c\x1c\x81\x1d\x26\xdf\x38\x41\x4a\x17\x4e\x90\x83\x39\x54\x28\x47\xbd\x00\xaf\xaa\x12\x54\x05\x4a\x1c\xbb\xc8\xe9\xce\x98\x07\x38\xb9\xc7\xfe\x3d\x96\x5c\xf9\x47\x5d\xfc\xcf\xf6\xe8\xed\x1b\x4f\x79\x7e\x9b\xb5\x21\xea\xd2\xe9\x40\x90\x36\x02\x56\x8e\x98\xa7\xbf\x92\xaf\xfe\xca\x8c\x55\x5d\x1e\x2b\x63\x4e\x07\xc7\x47\x9e\x7f\xcf\xb0\xc3\x0f\x58\x7f\xe3\x35\x22\x95\xc7\x7c\xc6\x15\xdf\xae\xd4\x24\x8f\x59\x13\xd0\x1f\xb4\x4b\x9e\x1e\x7d\xbc\xea\xbf\x34\x49\xe5\x31\x1f\xe2\x17\x7e\x7e\x43\x73\xe1\x1b\x21\xcd\x5d\x2b\xd1\x67\x1e\xa3\x49\x6e\x6a\xdb\xa1\xf7\xc1\x63\x78\x5c\xdc\xe6\x29\xaa\x22\x49\x4d\x67\x26\xf8\xc3\xb5\xba\x78\x75\xdb\xee\xaa\x1d\xf1\x39\x5f\x8e\x3e\xd5\x85\xea\xd6\xdb\xe7\x7f\x69\x75\x34\x81\x27\xcb\xd1\x87\x96\x84\x3c\x85\xfa\x42\xd1\x89\x04\x26\x0e\x22\x0e\x4e\x8e\x0e\x79\x5a\x93\x3a\x70\xc8\xa8\xa3\xe5\x2e\xb5\x63\x9a\x19\x13\xe5\x8e\xc3\xd2\xe4\xde\x81\x31\x35\x98\xb9\x12\x39\x0e\xa9\x04\x50\x9a\xb5\xdc\xb8\x3a\x89\x6f\x8f\x6f\xea\xbf\x70\xf4\x31\x60\x44\x5c\x5d\xbd\x31\x01\xc3\x15\xd9\x9a\xec\xd9\x71\x5a\xea\xba\xd8\x38\x27\x1b\x1c\xe8\x62\x9a\xdd\xcf\x86\x60\xe1\x3c\x1d\x80\x76\x7c\x48\xb0\x76\x9c\x39\x18\xc7\x29\xb1\xd8\xca\x06\x5c\xa3\xe7\xa3\x6e\xd3\xb5\x7e\xa8\xa9\x14\xe0\x89\xe7\x0a\x91\xc7\x15\xcf\xf3\x48\xf6\xa4\xfa\x45\xa1\xe0\x7d\x2b\x74\x67\xe5\x45\x21\x36\x45\x35\x16\xf2\xd0\x9a\x62\x25\x81\x24\x23\x87\x63\x0a\xb3\xeb\x53\x8e\xaf\x51\xe4\x8b\x28\xf9\x31\x4a\x9c\x11\x92\x8c\x1d\x42\x19\x59\x51\x5a\xb5\x14\xb7\x22\x08\xd6\x3d\xd9\x97\x5e\x7c\x4e\xe1\x8d\x11\xc9\x3f\x68\xd7\x4a\xeb\xc5\x1c\xf7\x89\xf2\x93\x7a\x0f\xa7\xf9\x4d\xc5\xe0\xea\xa6\xde\x93\xcf\x3d\xb5\x42\xd3\xdb\x09\xf4\x9d\xba\x89\xf9\x83\xba\xe9\x59\xff\x17\x75\x9f\xb1\xc7\x04\xab\x1f\x67\x40\x3a\x67\x80\xa4\x64\x69\xfe\xa5\xff\xdf\xcc\x00\x58\xd3\x0d\x99\x7f\xd4\xea\xab\xde\x42\x2a\x99\x18\xff\xef\xde\xba\xaa\x8a\x46\x9f\xeb\xd6\xc1\x13\x6a\x7c\xcf\xc4\x9c\x8a\xf9\x15\xdd\x71\x67\xc3\x10\x71\x45\x0b\x2a\xf2\xcf\x78\xd3\xb4\xc4\x32\x8a\xa5\x7f\x59\x91\xf2\xa6\x22\xe9\xa8\x48\x3e\x2b\xf2\xac\xcd\xf4\x1d\x3b\xf1\xc5\xf1\xbe\x36\xc5\xe9\x6d\x6d\x82\xc0\xb9\xf2\xf9\xfc\xff\x99\x85\xd2\x87\xf5\x4c\x65\x7f\xe9\xfd\x17\x98\xe1\x23\xe6\x59\x3f\x60\x56\x68\xaf\x98\xa5\x2e\x5f\x17\x44\x4b\xcb\x8b\x2d\xcf\xde\x27\x09\x95\x8e\x75\x50\x33\xaf\xea\x8d\x2a\xa8\xcd\xc6\xd9\x7a\x29\x2e\x54\x4b\x9e\xa8\xdc\x52\x41\x54\xb2\x29\x52\x52\x9f\x42\x5c\x79\xcc\x93\x9b\xf7\xe7\xd8\xbd\xc7\x4e\x9d\x2f\x33\x60\xed\x8e\x2a\x05\x28\xa8\xa2\x94\x4b\x8e\xa6\x03\xb1\xa8\x5f\xec\x8d\xcc\xb3\xa3\x41\xe3\xd1\x07\x60\x9b\x65\xc0\xec\xe6\x45\x50\xbb\x95\x41\x49\xb4\xcc\x56\xa8\x35\x29\xda\x87\x53\xab\x60\x5d\xd4\x2b\x00\xf9\x3f\x01\x00\x00\xff\xff\xc5\x05\xb6\x16\x34\x0d\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\x03\x31\x10\x85\xff\xcb\x3b\xe7\x24\xe8\x21\xc7\xde\x3d\xe9\xad\x2c\x32\xbb\x99\x4a\x20\x9d\x09\x9b\x99\xca\x52\xfa\xdf\xa5\xd2\x6d\x51\x16\x5a\xa4\xa0\xb7\x04\xde\x23\xdf\x47\xde\x7a\x8f\x41\xa5\x19\x89\x21\xda\xe8\x1c\x90\xa5\xba\x35\xc4\x75\x17\x20\xb4\x65\x44\x08\x59\xde\xf1\xdb\x3b\xdb\xab\x1a\x95\x17\xaf\xb5\x4c\x08\x50\xb7\x53\x76\x3f\x47\x11\x60\x53\x3d\x9e\x3c\x8b\x3d\x3c\x3e\xe1\xd0\x05\x54\x9a\xa8\x2f\x8c\xb8\xa1\xd2\x38\xa0\x19\x19\x3f\xbb\x51\x9f\x4b\xb6\x09\x11\xbb\xcc\x1f\x97\xee\xc6\x65\xb0\xac\x82\x43\xf8\x0d\xe0\xca\x47\xe1\xf4\x07\x80\xa7\xf6\x99\xf0\xfc\x2a\xa5\x34\x5e\xda\xc7\x1b\xb7\xf6\x55\x9e\x03\x5b\x75\xb1\x65\xb8\xef\x92\xcd\xfb\x15\x15\x92\x81\xaf\x09\xf6\xaa\xe5\x46\x3b\x51\x99\x43\xff\xc1\x91\x52\x5a\x72\xbc\xb7\xca\x8f\x3d\x5d\x33\x59\xda\xdb\x8d\x5f\x71\x9f\xad\x75\x9f\x01\x00\x00\xff\xff\xb9\x70\x8c\x04\xaf\x03\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcb\xc1\x11\xc0\x20\x08\x04\xc0\x96\x0e\x04\x0e\xca\x41\xd1\xfe\x4b\xc8\x64\xf6\xbd\x81\x9f\xc1\x35\x00\x24\xde\x00\x2d\xe1\xa1\x6c\x36\x75\xc1\x53\xb1\xfa\x1a\x9e\xd8\x5b\x77\xec\x50\x68\x5e\x2f\x5d\xcf\x14\x28\x58\xd7\x76\x7b\x48\xa5\xee\xb3\xfb\xf4\x9d\x80\xe5\xc8\xff\x8b\x4a\x40\xeb\x0b\x00\x00\xff\xff\xc2\x80\x3c\x6b\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xce\xb1\x8a\xc3\x30\x0c\xc6\xf1\x77\xf9\x66\x4f\x39\xee\x06\xcf\xb7\xdc\x70\x4f\x10\x42\x91\x83\x02\x26\x8e\x1c\x6a\x29\xc5\x84\xbc\x7b\x69\x69\x1b\xc8\xd4\xa9\xa3\x40\x3f\xe9\xdf\xae\xe8\xb3\x14\x25\x51\x78\x3d\x1b\x3b\x44\x99\x4d\x0b\x7c\xbb\x42\x68\x62\x78\x9c\x16\x4a\xc6\x70\xd0\x3a\xdf\xe6\x50\x95\x0b\xb6\xce\x3d\x17\x42\xa2\x91\x9b\xd0\x7c\xff\xc0\x21\x9b\x1e\x0f\x1c\xe8\x57\x73\xc7\x33\x55\x0a\x89\xe1\x07\x4a\x85\x1d\x8a\x92\xf2\xbf\x29\x85\x98\xa2\x56\x78\x2c\x91\x2f\xbb\x1d\x4c\x7a\x8d\x59\xb0\xb9\x77\xaa\xc5\xa6\xdd\x5a\x14\x7d\xbc\x7d\x35\xe7\x7e\xfc\xfb\xfd\x4c\x70\x77\x0d\x00\x00\xff\xff\xc1\x77\x26\x14\x68\x01\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x0b\xce\xdc\x3c\x08\xbc\xd2\x00\x06\x0f\xc7\x71\x5e\xf7\x3f\xc2\x2f\xec\x64\xb3\xdf\xaf\x56\x55\x9b\x68\xa5\x35\x82\x61\x1e\x4e\xa0\xde\x06\xd7\x00\x9a\x85\x20\x04\x30\xf5\x1e\x76\xdd\x4f\xe0\x44\x00\x8a\x11\x00\xcc\xd1\x24\xc2\xac\x6b\x73\x4a\xa3\x48\x9b\x33\xdd\x3b\x11\x16\x7a\x6c\x8e\xbe\xad\x6a\x0e\xef\xbe\xd5\x1c\x71\x1d\xbe\x59\x13\xaf\x7a\xab\x0d\x9f\x6a\x55\xc8\x62\x10\xd0\x46\x31\xa7\x50\x20\x09\x1a\xea\x84\x80\x22\x20\x17\x15\x42\x49\xa0\x51\xa0\x90\xc9\xbd\xfa\xe4\xfe\xaf\x35\xe9\x9a\x9a\x92\x73\x8a\x0d\x42\xa3\x11\x54\x36\xeb\x8e\x6c\x19\x3e\x75\x6e\x91\xee\xf8\x7a\xa3\xb8\x3e\x88\xe5\x89\xe2\xd9\x41\xa4\xc0\x12\x97\xbd\x2a\x86\xff\x42\xc5\x97\x6f\x68\xe6\x12\x51\x4a\xb8\xb0\x01\x43\xff\x74\xfc\xe9\x29\x9f\x47\x3f\x31\x86\x92\x56\xd3\x8b\xcb\xe2\x55\xfc\x26\x33\x7d\x77\x4a\xbc\x69\x41\x97\x06\x94\x03\x58\x1e\x42\xa8\x14\x18\xd5\x95\x36\xbd\x92\x57\x69\x8a\x83\x53\xfd\x7d\x06\x51\xde\xd5\x66\xdf\xaa\x5f\x30\x95\x8b\x1e\x95\x76\xa5\xe1\xe5\xae\xe2\x75\x4b\x20\xe2\xa5\xf6\x71\x35\xe7\x6f\xe5\x59\x19\x4a\xf0\x46\xf1\x71\xa3\x18\xa7\xaa\x4a\x6a\xa2\xd4\x45\x14\x00\x03\x26\x29\xf1\x93\x61\x21\xa7\x2e\xec\x75\x2f\x56\x3e\x34\x18\x65\xe6\xd1\x09\xdb\xc4\xd7\x96\xce\xff\xa5\xa4\x7b\xf8\x80\x5d\xf2\x74\x30\xbf\x3b\x1e\xe4\x85\xea\x92\xf6\x6c\xfb\xd7\x0c\xc3\xc9\x4d\x25\x7e\x9f\xe1\x9b\xe0\x74\xf9\x67\x8a\xea\xf3\x36\xe7\xac\xa3\x7d\xdc\x6e\x90\xbf\xd5\x0f\x0c\x09\x0f\xed\xa3\x8f\xae\x06\xa7\x42\x77\x67\xee\xd7\xe1\x7e\xee\x27\xbb\xee\xde\x2e\x18\xed\x70\x6e\xfb\xee\x97\x8f\xc3\x2f\xb6\xf0\x74\x69\xf5\xd5\xf0\x48\xa2\x8b\x9d\xd0\xa1\x4c\x40\xf3\xbf\x00\x00\x00\xff\xff\xc7\xca\x7b\x89\x48\x04\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x8f\xb1\x0a\xc2\x40\x0c\x40\xff\x25\xf3\x4d\x15\x1d\x6e\x2c\x2e\x0e\xfa\x03\xa5\x94\x5c\x49\xe5\xe8\x35\x57\xbc\xa4\x72\x94\xfe\xbb\x28\x62\xa1\x38\x38\x39\x86\xf0\x5e\x5e\xaa\x19\xda\xc8\x49\x90\x05\xac\xdc\x94\x0c\x78\x1e\x55\x12\xd8\x6a\x06\xc6\x81\xc0\x02\xeb\x00\x06\x24\x8f\xcf\x41\x3d\xcb\xae\x80\xa5\x36\x9f\x35\x8a\x9f\xa8\xb9\x92\x94\x21\xb6\xfd\xe9\x58\xe6\xcb\x8b\x88\x2a\x5b\xd5\xea\x71\x59\x28\xbd\x45\x23\x66\x74\x81\xc0\x76\x18\x12\x19\x48\x82\x42\x67\x15\x74\x3e\x78\xc9\x60\x61\xf2\x74\x5f\xd9\x4e\xb9\x15\x1f\x19\x16\xf3\x4b\x7f\x33\x61\x50\xda\x9c\xfe\xf2\x81\x0b\xd8\x53\xe1\x8a\xfd\xe1\x3f\xf1\xf5\x23\x00\x00\xff\xff\x6c\x3b\x71\x7a\x7e\x01\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x0b\x8e\xe3\x30\x0c\x43\xaf\x44\x7d\x2d\x1d\x47\x76\xec\xfb\x1f\x61\xe1\xa4\x99\xce\x4c\x77\xdb\x6d\x80\x02\xa5\xad\x57\x92\x8a\x63\x3f\x0a\x63\x07\x54\x9c\xe0\x04\xc8\x61\xcd\x65\x3d\x3e\x8e\x09\x07\x18\xe5\x00\xc4\xa0\xe4\x2e\xdc\x64\x69\x2a\x82\x48\xf7\x8c\xb2\xb5\x80\x4b\xcc\x2a\xaf\x81\x4b\xb5\xe3\x52\x87\xe8\x40\x4c\xbb\xd4\x30\x6b\xd6\x37\x2d\xb0\x0e\xeb\xa2\x64\x27\x63\xff\xef\x97\x7a\xce\xf7\xd3\x97\x39\x78\x7f\x13\xd0\xd5\xdc\xfa\x3e\xb9\xa7\x3c\x7e\x4f\x35\x79\x4c\x11\xa8\xd9\xbe\x7f\x66\xa4\x44\xd0\x4e\xca\x00\x5d\x4a\x20\x09\x92\x58\xf2\xe4\x25\x7e\xf3\x32\x36\x69\xfa\x93\xe4\x27\xa1\x1e\xbd\x6c\x42\x12\xf9\x3b\xfa\xe9\x7d\x7c\xe7\xfc\x24\x90\x8b\xbc\x6a\xa4\x64\x97\xab\xa3\x7f\x77\x25\x78\xbd\xeb\xc2\x9a\x5e\x29\x15\x12\x72\xfb\xfc\xda\xdd\xd7\x3e\x63\xcb\x7c\x79\x85\x06\x81\x92\x13\xc9\xa7\x77\x0d\xc6\x79\xa2\xba\xf9\xc0\x9d\x24\x04\x12\xa7\x12\x2d\x20\xfd\xe1\x8b\xb8\xfd\x6a\x8b\x87\x5b\x41\x16\xdd\x37\xe4\xc7\x7e\x0c\x21\x49\x86\xb6\x38\xa6\xb0\xfa\x0a\x18\xd9\xb2\x41\xf3\xc8\x68\x9d\x44\xe6\xe2\x45\x29\x2a\xd9\xd9\x6a\xf4\xf2\xb2\xe9\xb9\x98\x72\x46\xfa\x1a\x79\x50\xcb\x84\x21\xf8\xd3\x66\x8b\x0d\x86\x47\xe3\xf8\x7b\x6f\xfd\x20\xc3\x9c\xb5\x5b\xbb\x13\x5f\x2c\xe3\x37\x3d\xea\x4b\x8f\xb4\xdf\x83\xab\x47\x9c\x84\x4f\xed\x0d\xff\xd4\xde\xd1\x7e\xb6\xb7\x9f\x9b\x6a\x94\x92\x57\xbe\x0f\x09\x79\x0d\x87\x2e\xfa\x57\xbe\xa0\x67\x2e\xf2\x67\xda\x67\xbe\xff\xca\xc3\x3c\x3f\xe4\x61\x59\x6f\xf3\xd0\xfe\x9d\x30\x07\x8a\xdc\x9c\x5b\xb5\x6a\x2c\xb0\xd8\x76\xc0\x93\xd9\x42\x57\xc1\xaa\x32\x8a\xc8\x1a\xfb\x62\x37\x1a\xc9\x6b\x75\x8d\xd4\x3e\x32\x64\x70\x8f\x51\xd1\x7b\x3f\xaa\xb5\xc3\x44\x0c\xe0\xfc\x13\x00\x00\xff\xff\x36\x4f\x15\x48\xf2\x04\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x40\x10\x44\xff\xa5\xcf\x73\x5a\xd1\x43\xee\x1e\xfd\x82\x25\x48\x27\xdb\x2b\x83\x63\x4f\x48\x57\x47\x87\x65\xff\x5d\x36\x98\x49\x44\x21\xe8\x71\x98\x6a\xde\xab\x3a\x5e\xa8\xcf\x6a\x60\x05\x35\x67\x4e\x26\x81\xa2\x0e\x0e\xa3\xe6\x78\x21\xe5\x37\xa1\x86\x5e\xa5\x50\x20\x94\xe1\xf6\xe8\x0a\xc4\xee\x0e\x74\x0d\xf5\x7f\xe2\xe4\xb2\x26\x3c\x2a\x0e\xf7\x0f\x74\x6d\xc3\x92\x50\x46\x9c\xe4\xd9\x04\x14\x28\x3b\xbe\x08\x6d\xa0\x81\x0b\x77\x49\x2a\xdd\xc0\x90\x27\x07\x77\x31\x45\x94\xdb\x6d\xd6\x25\x54\x11\x67\xd7\x1e\x31\xeb\x6c\xb1\x36\xc0\xe8\xdb\x02\x3f\xf8\x2f\x82\xc7\x0f\xe9\x1d\x79\xfc\xe6\x51\x9b\xac\x04\x3e\x9d\x46\x31\x9b\x4b\xec\x3b\x4e\x51\xde\xff\x6a\xb7\x33\xef\x6f\xf2\x7b\xd2\xdb\xe5\xff\x2f\xdd\x7e\x06\x00\x00\xff\xff\x31\x85\x28\xfa\x16\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\x41\x0a\x83\x30\x10\x85\xe1\xbb\xbc\x75\x4e\x90\x3b\x94\x1e\x40\x5c\x8c\x3a\x81\x40\x3a\x09\xce\x4b\x4b\x10\xef\xde\x95\x14\x8a\xcb\x1f\xfe\x6f\x3a\xb0\x56\x73\x8a\x11\x91\x7b\xd7\x80\x6c\xad\xd3\x11\xa7\x03\x26\x2f\x45\x84\x6c\xdb\x8e\x00\x8e\x76\x95\xba\xe3\x9c\xc3\x35\x3c\x13\x02\x6a\xe7\x3f\xbc\x47\x4d\x86\x2c\x45\x11\x93\x14\xd7\x00\xa7\x50\x1f\x9d\xb2\xe4\x92\x39\x10\xf1\xce\xfa\xf9\xd9\xd4\x6d\x65\xae\x86\x73\xfe\x06\x00\x00\xff\xff\xf1\x8a\x1d\x63\xaf\x00\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\xd9\x6d\x6d\x31\x08\x6c\x69\x00\xb3\x95\x63\x1f\x9b\xfe\x4b\x78\xe2\xdc\x45\x4f\xf9\x49\x6e\x82\xbf\x3c\x02\x66\xc1\xd0\x6f\x40\xd9\x80\x21\x46\x30\x42\xff\xdd\xa4\x9e\xe5\x17\x08\xbf\x2c\x03\x20\x8a\x41\x66\xb2\x68\xf1\xaa\x2d\x41\x34\x6e\x16\x55\xd7\xd5\x1d\x81\xda\xba\x64\x90\x36\xae\xcd\xfe\x46\x1b\x71\xf2\xb7\x9a\xef\xea\xf6\xa1\x64\x3d\x97\x53\xad\x19\x06\xf4\x83\x0d\x89\x24\xb2\xa0\xce\x84\x01\x7a\xcc\x07\x92\x20\x89\x92\x87\x66\xc1\xcf\x37\xb6\xfb\x7d\xf6\x08\x2f\x09\x79\xea\xf9\x4b\xaa\x6f\xe6\x18\x64\xe0\xd6\xfa\xa9\xbf\xce\x29\x18\x0f\x97\xa3\x5d\x02\x2f\xa7\x21\x90\xb8\x91\xf0\x80\x2c\xd2\xfb\x32\x44\xfb\xcb\x65\xf8\x32\x9d\x90\xa2\x57\x07\x9f\xff\x3b\x14\xc9\x29\xc9\x8a\xfb\x19\x30\xc9\xd4\xd8\xa7\x4f\x67\x81\x06\x23\xcf\x82\x9f\xaa\x5d\x3b\xd4\xb9\x50\x3b\x4e\xe5\x34\x52\x5f\xbc\x7d\xd4\x49\xcd\x6d\xc7\x47\xf1\x3c\x57\x28\x2e\xd5\x6b\xd4\xf4\x6b\xe5\x75\x00\xce\x7f\x01\x00\x00\xff\xff\xf7\x3b\xb3\x57\xc6\x02\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeinterfaceAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\x9b\x40\x10\xfd\x97\x51\x8f\x9c\x2a\xb5\x07\x6e\x55\xcf\x69\xaa\x58\x3d\x45\x11\x1a\xb3\xe3\x76\x25\x98\x45\x3b\xb3\x4e\x51\x94\x7f\xaf\x8c\x8d\x21\x64\x31\x34\x35\xa4\x47\xa4\xc7\xec\x9b\xb7\x6f\xde\xec\xfd\x13\xe4\x8e\x45\x91\x15\x52\xf5\x81\x12\xb0\x5c\x05\x15\x48\xef\x9f\x80\xb1\x24\x48\x21\x08\x79\x48\x40\xeb\xea\xf0\x85\xc6\x78\x12\x81\xe7\x87\xa4\x05\x7c\x38\x20\xb2\xdc\x93\xb1\x0a\x09\xb8\xa0\xc3\x12\x9e\x4a\xb4\x4c\xe6\x6b\x8b\x39\x15\x0b\x96\xf5\xe3\xa7\xcf\x4d\xb1\x0a\x6b\xdc\x16\x04\xe9\x0e\x0b\xa1\x04\x44\x51\xe9\x26\x28\x6e\x6d\x61\xb5\x86\x14\xf6\x96\x1e\xbb\x7f\x77\x81\x73\xb5\x8e\xe1\x39\xe9\x77\x71\xfa\xfb\x75\x1b\x4c\x8f\x37\x28\x3a\xd5\x8b\x90\x66\x65\x8b\xeb\x5a\x99\x45\x90\x1d\xb7\xa0\x37\xd3\x9c\x56\xdb\x53\xe9\xf6\x94\x9d\x80\xcb\x51\x1c\xf8\xa1\xc7\xe0\x17\x4a\x96\x3b\x43\xf1\xcb\xee\x0a\x6f\x9d\x2b\x56\xb9\xdb\x69\xd1\xd0\x98\xd5\x15\x3b\xd3\x93\xca\xb1\xb8\x09\x86\x56\xb2\x0e\xf7\x7f\xc8\x9a\x8f\x8d\x6b\xd2\x9b\xec\xdc\xed\xc9\xd7\x77\xa8\x14\x9f\xeb\xfe\x60\x35\x41\x51\x15\xc8\xef\x72\x0d\xd3\x2e\xb1\xf2\xda\x24\x2b\x5c\xc0\xf8\xa4\xe5\xc1\x7b\x62\x9d\xeb\x8c\x7e\x4f\x4b\x9b\x43\x5d\xe4\xdc\xce\x18\x58\xba\xc0\x23\x51\xdf\x76\xd7\xe4\x18\x31\xf9\x9f\x75\xd6\x94\x7b\x8f\x30\x3b\x9e\x3f\xa5\xec\x9a\x9b\x6a\x8e\x74\xea\x91\x65\x47\x3e\x8b\xd0\x5f\x4f\xbb\xc8\xa2\x3c\x77\x51\x5e\x58\xb6\x4b\x2b\x58\x93\xdc\xfa\x6f\x2e\x32\xb1\xe7\x34\x8a\x0c\xd4\x7a\xba\xc5\x73\xf0\xba\xb9\xbb\xb4\xc6\xb3\x96\x9a\x50\x41\x79\x3c\xbe\xae\xa3\x36\xb2\xe3\xba\x74\x41\x62\x4c\x2d\x1b\xfa\x4d\xa6\xbd\x89\xbf\x7b\x08\x6e\x48\x87\x30\xda\x13\xeb\x5b\x8f\x1d\xd9\x3e\x49\x0f\x7f\x2a\xd5\xc6\x80\x31\xb7\xfe\xae\x79\xec\x5d\x30\xf2\x17\x63\x8e\x98\x1f\xf2\x2f\x54\x5f\x1e\x7d\xc9\x80\x23\xbf\xcc\x7f\x08\x6c\x48\x0f\x5c\xbf\x1f\xed\x7f\x0d\x69\xc7\xad\x38\xce\x77\x3a\x22\x36\xc3\xaa\x0b\x71\x7c\x21\xcd\x61\x5c\xc6\x0e\x7e\xf8\x13\x00\x00\xff\xff\x76\x91\x45\x28\xaf\x0d\x00\x00")

func compiledPrototypeinterfaceAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeinterfaceAbi,
		"compiled/PrototypeInterface.abi",
	)
}

func compiledPrototypeinterfaceAbi() (*asset, error) {
	bytes, err := compiledPrototypeinterfaceAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeInterface.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeinterfaceBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypeinterfaceBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeinterfaceBinRuntime,
		"compiled/PrototypeInterface.bin-runtime",
	)
}

func compiledPrototypeinterfaceBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeinterfaceBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeInterface.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x41\xaa\x84\x30\x10\x05\xef\xf2\xd6\x39\x41\xee\xf0\x4f\x20\xf2\x69\x63\x0b\x0d\x4e\x47\xd2\x2f\x0e\x41\xbc\xfb\x6c\x46\x66\x59\x50\x54\x4d\x17\x4a\xf5\xa0\x38\x91\xd9\xba\x26\x98\x1f\x9d\x81\x3c\x5d\x70\x79\x29\x32\x64\x5d\x1b\x12\x38\x8e\x87\x34\x02\xf7\x9c\x1e\xc1\x85\x76\xea\x7f\xa9\xce\x26\x85\xb6\x0d\x24\xd4\xce\x6f\x68\x4e\x38\x64\xc8\xb2\x2b\xf2\x26\x7b\x68\x42\x50\xa8\x7f\x9d\xb2\xd8\x6e\x1c\xc8\x38\x4d\xdf\xbf\xc9\xd6\xbd\xd0\xaa\xe3\x9e\x3f\x01\x00\x00\xff\xff\x15\x78\xf0\x15\xa3\x00\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledProtoAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledProtoAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledProtoAbi,
		"compiled/proto.abi",
	)
}

func compiledProtoAbi() (*asset, error) {
	bytes, err := compiledProtoAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/proto.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledProtoBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x81\x11\x43\x21\x08\x03\xd0\x95\x62\x6c\x04\xc7\x01\x84\xfd\x47\xe8\xfd\x7b\x07\x9f\x1f\xc4\x03\xc0\x31\x0f\x88\x75\x74\x68\x61\x61\xdc\x90\x13\x47\xd8\xa5\x6b\xf4\xb0\x4d\xbd\x88\xb1\x44\x64\x54\x9b\xe7\x73\xa9\x5d\xbd\xa6\x93\x97\xdb\x73\xad\x2a\x71\x4a\x7b\x78\x9b\x05\xf0\xfe\x03\x00\x00\xff\xff\xe3\x4a\x9e\xb0\x6a\x00\x00\x00")

func compiledProtoBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledProtoBinRuntime,
		"compiled/proto.bin-runtime",
	)
}

func compiledProtoBinRuntime() (*asset, error) {
	bytes, err := compiledProtoBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/proto.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeInterface.abi": compiledPrototypeinterfaceAbi,
	"compiled/PrototypeInterface.bin-runtime": compiledPrototypeinterfaceBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
	"compiled/proto.abi": compiledProtoAbi,
	"compiled/proto.bin-runtime": compiledProtoBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeInterface.abi": &bintree{compiledPrototypeinterfaceAbi, map[string]*bintree{}},
		"PrototypeInterface.bin-runtime": &bintree{compiledPrototypeinterfaceBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
		"proto.abi": &bintree{compiledProtoAbi, map[string]*bintree{}},
		"proto.bin-runtime": &bintree{compiledProtoBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

