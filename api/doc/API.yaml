openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Thor API"
  termsOfService: "https://www.vechain.com"
  contact:
    email: "vechain@vechain.com"
  description: "Get block chain info through the API"
servers:
  - url: http://localhost:3000/v1
    description: Optional server description, local server
tags:
- name: "Account"
  description: "Everything about account"
- name: "Transaction"
  description: "Everything about transaction"
- name: "Block"
  description: "Everything about block"
- name: "Contract"
  description: "Everything about contract"
- name: "Log"
  description: "Everything about log"
paths:
  /accounts/{address}/balance:
    get:
      tags:
      - "Account"
      summary: "Get balance by address"
      description: "return account balance"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "result":1000 
                          }
        400:
          description: "Invalid address"
  /accounts/{address}/code:
    get:
      tags:
      - "Account"
      summary: "Get code by address"
      description: "return account code"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "result":"0x00" 
                          }
        400:
          description: "Invalid address"
  /accounts/{address}/storage:
    get:
      tags:
      - "Account"
      summary: "Get storage by address"
      description: "returns storage value by address"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
        - in: query
          required: true
          name: key
          schema:
            type: string
            format: hash
          description: storage hash
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "storagkey":"storagevalue" #both hash
                          }
        400:
          description: "Invalid params"
  /transactions/{id}:
    get:
      tags:
      - "Transaction"
      summary: "Get transaction by transaction id"
      description: "returns transaction by transaction id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: transaction id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                          "chainTag":0,
                          "id":"0x27d96e21d27a651ea1dcdd6426f4abc408d715fa14d537cb2daa9de7222dc260",
                          "gasPriceCoef":1,
                          "gas":"1000",
                          "from":"0xb5c964bb668ef14420321c34a661698487132a5a",
                          "dependsOn":"",
                          "clauses":[{
                                      "to":"0x000000000000000000000000000000000000746f",
                                      "value":"0x3e8",
                                      "data":"0x"
                            
                                    }],
                          "index":"0",
                          "blockID":"0x0000000100000000000000000000000000000000000000000000000000000002",
                          "blockNumber":1
                    
                          }
        400:
          description: "Invalid params"
  /transactions:
    post:
      tags:
      - "Transaction"
      summary: "send rawtransaction"
      description: "send rawtransaction"
      requestBody:
        description: a rawtransaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                chainTag:
                  type: integer
                  example: 1
                nonce:
                  type: string
                  example: "1"
                gasPriceCoef:
                  type: integer
                  example: 1
                gas:
                  type: string
                  example: "30000"
                dependsOn:
                  type: string
                  example: ""
                sig: 
                  type: string
                  example: 0x00
                blockRef:
                  type: string
                  example: 0x0000000000000000
                clauses:
                  type: array
                  example: [
                            {
                              "to":    "addressTo",
                              "value": "10000",
                              "data":  "0x00",
                            }
                            ]
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: transaction id
        400:
          description: "Invalid params"
  /blocks/{id}:
    get:
      tags:
      - "Block"
      summary: "Get block by block id"
      description: "returns block by block id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: block id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "number":1,
                            "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x000000002c6a54433f2a93a8eba3277534518a204b459ad46562ad9a5bcb5402",
                            "timestamp":"0",
                            "totalScore":"0",
                            "gasLimit":"0",
                            "gasUsed":"0",
                            "beneficiary":"0x0000000000000000000000000000000000000000","txsRoot":"0x21b3b7923ad7f56d63e0623146cdbb00840f89b8f9a9dbd7619dd76dc00f5426","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                            "txs":[
                                    "0x0f8274ec06dd1256511d437127a5e4dcaed33d483b2dc6393f6fb3c805f8dfc7"
                                    ]
                            }
        400:
          description: "Invalid params"
  /blocks:
    get:
      tags:
      - "Block"
      summary: "Get block by block number"
      description: "returns block by block number"
      parameters:
        - in: query
          required: true
          name: number
          schema:
            type: integer
          description: block number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "number":1,
                            "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x000000002c6a54433f2a93a8eba3277534518a204b459ad46562ad9a5bcb5402",
                            "timestamp":"0",
                            "totalScore":"0",
                            "gasLimit":"0",
                            "gasUsed":"0",
                            "beneficiary":"0x0000000000000000000000000000000000000000","txsRoot":"0x21b3b7923ad7f56d63e0623146cdbb00840f89b8f9a9dbd7619dd76dc00f5426","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                            "txs":[
                                    "0x0f8274ec06dd1256511d437127a5e4dcaed33d483b2dc6393f6fb3c805f8dfc7"
                                    ]
                            }
        400:
          description: "Invalid params"
  /blocks/best:
    get:
      tags:
      - "Block"
      summary: "Get best block"
      description: "returns best block"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:  {
                            "number":1,
                            "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x000000002c6a54433f2a93a8eba3277534518a204b459ad46562ad9a5bcb5402",
                            "timestamp":"0",
                            "totalScore":"0",
                            "gasLimit":"0",
                            "gasUsed":"0",
                            "beneficiary":"0x0000000000000000000000000000000000000000","txsRoot":"0x21b3b7923ad7f56d63e0623146cdbb00840f89b8f9a9dbd7619dd76dc00f5426","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                            "txs":[
                                    "0x0f8274ec06dd1256511d437127a5e4dcaed33d483b2dc6393f6fb3c805f8dfc7"
                                    ]
                            }
        400:
          description: "Invalid params"
  /contracts/{contractAddr}:
    post:
      tags:
      - "Contract"
      summary: "call contract"
      description: "call contract"
      parameters:
        - in: path
          required: true
          name: contractAddr
          schema:
            type: string
          description: contract address
      requestBody:
        description: contract calling params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                input:
                  type: array
                  description: an input binary 
                options: 
                  type: object
                  properties: 
                    index:
                      type: integer
                      example: 1
                    gas:
                      type: string
                      example: "100000"
                    from:
                      type: string
                      example: 0x000000000000000000000000636f6e7472616374
                    gasPrice:
                      type: string
                      example: "10000"
                    txID: 
                      type: string
                      example: 0x000000000000000000000000636f6e74
                    value:
                      type: string
                      example: "0"
      responses:
        200:
          content:
            text/plain:
              schema:
                type: array
                description: an output binary 
          description: "successful operation"
        400:
          description: "Invalid params"
  /logs:
    post:
      tags:
      - "Log"
      summary: "return logs by params"
      description: "get logs"
      requestBody:
        description: request params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                options:
                  type: object
                  properties: 
                    fromBlock:
                      type: integer
                      example: 0
                    toBlock:
                      type: integer
                      example: 1
                    address:
                      type: string
                      example: 0x000000000000000000000000636f6e7472616374
                    topicSet:
                      type: array
                      example: [[topic0,topic1,topic2,topic3,topic4],[topic0,topic1,topic2,topic3,topic4]]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "blockID":"0x00000000000000000000000000000000000000000000000000626c6f636b4944",
                        "blockNumber":1,
                        "txID":"0x0000000000000000000000000000000000000000000000000000000074784944",
                        "txOrigin":"0x00000000000000000000000074784f726967696e",
                        "address":"0x0000000000000000000000000000000061646472",
                        "data":"0x",
                        "topics":["0x0000000000000000000000000000000000000000000000000000746f70696330",
                                  "0x0000000000000000000000000000000000000000000000000000746f70696331",
                                  "",
                                  "",
                                  ""]
                      }
        400:
          description: "unhandled error"