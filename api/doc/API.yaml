openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Thor API"
  termsOfService: "https://www.vechain.com"
  contact:
    email: "vechain@vechain.com"
  description: "Get block chain info through the API"
servers:
  - url: http://localhost:3000/v1
    description: Optional server description, local server
tags:
- name: "Account"
  description: "Everything about account"
- name: "Transaction"
  description: "Everything about transaction"
- name: "Block"
  description: "Everything about block"
- name: "Contract"
  description: "Everything about contract"
paths:
  /accounts/{address}/balance:
    get:
      tags:
      - "Account"
      summary: "Get balance by address"
      description: "return account balance"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: integer
                description: balance of account
        400:
          description: "Invalid address"
  /accounts/{address}/code:
    get:
      tags:
      - "Account"
      summary: "Get code by address"
      description: "return account code"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: array
                description: code of account
        400:
          description: "Invalid address"
  /accounts/{address}/storage:
    get:
      tags:
      - "Account"
      summary: "Get storage by address"
      description: "returns storage value by address"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
        - in: query
          required: true
          name: key
          schema:
            type: string
            format: hash
          description: storage hash
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "storagkey":"storagevalue" #both hash
                          }
        400:
          description: "Invalid params"
  /transactions/{id}:
    get:
      tags:
      - "Transaction"
      summary: "Get transaction by transaction id"
      description: "returns transaction by transaction id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: transaction id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "ID":"0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd",
                        "Index":0,
                        "BlockID":"0x0000000100000000000000000000000000000000000000000000000000000002",
                        "BlockNumber":1,
                        "GasPrice":1000,
                        "Gas":1000,
                        "From":"0x970e8128ab834e8eac17ab8e3812f010678cf791",
                        "Clauses":[
                                    {
                                      "To":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01a",
                                      "Value":10,
                                      "Data":null
                                    }
                                  ]
                      }
        400:
          description: "Invalid params"
  /transactions:
    post:
      tags:
      - "Transaction"
      summary: "send rawtransaction"
      description: "send rawtransaction"
      requestBody:
        description: a rawtransaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                rawTransaction:
                  type: object
                  properties: 
                    Nonce:
                      type: integer
                      example: 1
                    GasPrice:
                      type: integer
                      example: 10000
                    Gas:
                      type: integer
                      example: 30000
                    DependsOn:
                      type: string
                      example: ""
                    Sig: 
                      type: array
                      example: [0x11, 0x12]
                    BlockRef:
                      type: array
                      example: [0,0,0,0,0,0,0,0]
                    Clauses:
                      type: array
                      example: [
                                {
                                  "To":    addressTo,
                                  "Value": 10000,
                                  "Data":  [0x00, 0x00],
                                }
                                ]
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid params"
  /blocks/{id}:
    get:
      tags:
      - "Block"
      summary: "Get block by block id"
      description: "returns block by block id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: block id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "Number":1,
                        "ID":"0x0000000100000000000000000000000000000000000000000000000000000002","ParentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "Timestamp":0,
                        "TotalScore":0,
                        "GasLimit":0,
                        "GasUsed":0,
                        "Beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","StateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","ReceiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "Txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /blocks:
    get:
      tags:
      - "Block"
      summary: "Get block by block number"
      description: "returns block by block number"
      parameters:
        - in: query
          required: true
          name: number
          schema:
            type: integer
          description: block number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "Number":1,
                        "ID":"0x0000000100000000000000000000000000000000000000000000000000000002","ParentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "Timestamp":0,
                        "TotalScore":0,
                        "GasLimit":0,
                        "GasUsed":0,
                        "Beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","StateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","ReceiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "Txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /blocks/best:
    get:
      tags:
      - "Block"
      summary: "Get best block"
      description: "returns best block"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:  {
                        "Number":0,
                        "ID":"0x0000000100000000000000000000000000000000000000000000000000000002","ParentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "Timestamp":0,
                        "TotalScore":0,
                        "GasLimit":0,
                        "GasUsed":0,
                        "Beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","StateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","ReceiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "Txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /contracts/{contractAddr}:
    post:
      tags:
      - "Contract"
      summary: "call contract"
      description: "call contract"
      parameters:
        - in: path
          required: true
          name: contractAddr
          schema:
            type: string
          description: contract address
      requestBody:
        description: contract calling params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                input:
                  type: array
                  description: an input binary 
                options: 
                  type: object
                  properties: 
                    Index:
                      type: integer
                      example: 1
                    Gas:
                      type: integer
                      example: 100000
                    From:
                      type: string
                      example: 0x000000000000000000000000636f6e7472616374
                    GasPrice:
                      type: integer
                      example: 10000
                    TxID: 
                      type: string
                      example: 0x000000000000000000000000636f6e74
                    Value:
                      type: integer
                      example: 0
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                type: array
                description: an output binary 
          description: "successful operation"
        400:
          description: "Invalid params"