openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Thor API"
  termsOfService: "https://www.vechain.com"
  contact:
    email: "vechain@vechain.com"
  description: "Get block chain info through the API"
servers:
  - url: http://localhost:3000/v1
    description: Optional server description, local server
tags:
- name: "Account"
  description: "Everything about account"
- name: "Transaction"
  description: "Everything about transaction"
- name: "Block"
  description: "Everything about block"
- name: "Contract"
  description: "Everything about contract"
- name: "Log"
  description: "Everything about log"
paths:
  /accounts/{address}/balance:
    get:
      tags:
      - "Account"
      summary: "Get balance by address"
      description: "return account balance"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: balance of account
        400:
          description: "Invalid address"
  /accounts/{address}/code:
    get:
      tags:
      - "Account"
      summary: "Get code by address"
      description: "return account code"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
      responses: 
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: array
                description: code of account
        400:
          description: "Invalid address"
  /accounts/{address}/storage:
    get:
      tags:
      - "Account"
      summary: "Get storage by address"
      description: "returns storage value by address"
      parameters:
        - in: path
          required: true
          name: address
          schema:
            type: string
            format: address
          description: account address
        - in: query
          required: true
          name: key
          schema:
            type: string
            format: hash
          description: storage hash
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                            "storagkey":"storagevalue" #both hash
                          }
        400:
          description: "Invalid params"
  /transactions/{id}:
    get:
      tags:
      - "Transaction"
      summary: "Get transaction by transaction id"
      description: "returns transaction by transaction id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: transaction id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "ID":"0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd",
                        "Index":0,
                        "BlockID":"0x0000000100000000000000000000000000000000000000000000000000000002",
                        "BlockNumber":1,
                        "GasPriceCoef":1,
                        "Gas":1000,
                        "From":"0x970e8128ab834e8eac17ab8e3812f010678cf791",
                        "Clauses":[
                                    {
                                      "To":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01a",
                                      "Value":10,
                                      "Data":null
                                    }
                                  ]
                      }
        400:
          description: "Invalid params"
  /transactions:
    post:
      tags:
      - "Transaction"
      summary: "send rawtransaction"
      description: "send rawtransaction"
      requestBody:
        description: a rawtransaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                chainTag:
                  type: integer
                  example: 1
                nonce:
                  type: string
                  example: "1"
                gasPriceCoef:
                  type: integer
                  example: 1
                gas:
                  type: string
                  example: "30000"
                dependsOn:
                  type: string
                  example: ""
                sig: 
                  type: array
                  example: [0x11, 0x12]
                blockRef:
                  type: array
                  example: [0,0,0,0,0,0,0,0]
                clauses:
                  type: array
                  example: [
                            {
                              "to":    addressTo,
                              "value": "10000",
                              "data":  [0x00, 0x00],
                            }
                            ]
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: transaction id
        400:
          description: "Invalid params"
  /blocks/{id}:
    get:
      tags:
      - "Block"
      summary: "Get block by block id"
      description: "returns block by block id"
      parameters:
        - in: query
          required: true
          name: id
          schema:
            type: string
          description: block id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "number":1,
                        "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "timestamp":0,
                        "totalScore":"0",
                        "gasLimit":"0",
                        "gasUsed":"0",
                        "beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /blocks:
    get:
      tags:
      - "Block"
      summary: "Get block by block number"
      description: "returns block by block number"
      parameters:
        - in: query
          required: true
          name: number
          schema:
            type: integer
          description: block number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "number":1,
                        "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "timestamp":0,
                        "totalScore":"0",
                        "gasLimit":"0",
                        "gasUsed":"0",
                        "beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /blocks/best:
    get:
      tags:
      - "Block"
      summary: "Get best block"
      description: "returns best block"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:  {
                        "number":1,
                        "id":"0x0000000100000000000000000000000000000000000000000000000000000002","parentID":"0x00000000639b504a24cc0511372aab1bf99f6b762f74aa9f12047aaba4685602",
                        "timestamp":0,
                        "totalScore":"0",
                        "gasLimit":"0",
                        "gasUsed":"0",
                        "beneficiary":"0x0000000000000000000000000000000000000000","TxsRoot":"0x47e42056b1fc34ef9cb8bdd8a5ee029a27a1d20aef9e2a7ddabba96d9249dc85","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000",
                        "txs":[
                                "0x0ec1aa6cc85b8d1dcb47e016cef88c6bf9c4d54aa828ad773d0cb7aca52417cd"
                              ]
                      }
        400:
          description: "Invalid params"
  /contracts/{contractAddr}:
    post:
      tags:
      - "Contract"
      summary: "call contract"
      description: "call contract"
      parameters:
        - in: path
          required: true
          name: contractAddr
          schema:
            type: string
          description: contract address
      requestBody:
        description: contract calling params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                input:
                  type: array
                  description: an input binary 
                options: 
                  type: object
                  properties: 
                    index:
                      type: integer
                      example: 1
                    gas:
                      type: string
                      example: "100000"
                    from:
                      type: string
                      example: 0x000000000000000000000000636f6e7472616374
                    gasPrice:
                      type: string
                      example: "10000"
                    txID: 
                      type: string
                      example: 0x000000000000000000000000636f6e74
                    value:
                      type: string
                      example: "0"
      responses:
        200:
          content:
            text/plain:
              schema:
                type: array
                description: an output binary 
          description: "successful operation"
        400:
          description: "Invalid params"
  /logs:
    post:
      tags:
      - "Log"
      summary: "return logs by params"
      description: "get logs"
      requestBody:
        description: request params
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                options:
                  type: object
                  properties: 
                    fromBlock:
                      type: integer
                      example: 0
                    toBlock:
                      type: integer
                      example: 1
                    address:
                      type: string
                      example: 0x000000000000000000000000636f6e7472616374
                    topicSet:
                      type: array
                      example: [[topic0,topic1,topic2,topic3,topic4],[topic0,topic1,topic2,topic3,topic4]]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                        "blockID":"0x00000000000000000000000000000000000000000000000000626c6f636b4944",
                        "blockNumber":1,
                        "txID":"0x0000000000000000000000000000000000000000000000000000000074784944",
                        "txOrigin":"0x00000000000000000000000074784f726967696e",
                        "address":"0x0000000000000000000000000000000061646472",
                        "data":[0x00,0x00],
                        "topics":["0x0000000000000000000000000000000000000000000000000000746f70696330",
                                  "0x0000000000000000000000000000000000000000000000000000746f70696331",
                                  nil,
                                  nil,
                                  nil]
                      }
        400:
          description: "unhandled error"