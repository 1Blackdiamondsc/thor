openapi: 3.0.0
info:
  version: "1.0.0"
  title: "VeChain Thor API"
  termsOfService: "https://www.vechain.org"
  contact:
    email: "vechain@vechain.com"
  description: "Get block chain info through the API"
servers:
  - url: http://127.0.0.1:7585
    description: Optional server description, local server
tags:
- name: "Account"
  description: "Everything about account"
- name: "Transaction"
  description: "Everything about transaction"
- name: "Block"
  description: "Everything about block"
- name: "Contract"
  description: "Everything about contract"
- name: "Log"
  description: "Everything about log"
paths:
  /accounts/{address}/balance:
    get:
      tags:
      - "Account"
      summary: "Get balance by address"
      description: "return account balance"
      parameters:
        - $ref: '#/components/parameters/Address'
        - $ref: '#/components/parameters/BlockNumber'
      responses: 
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/HexStringReturn'
        400:
          description: "Invalid address"
  /accounts/{address}/code:
    get:
      tags:
      - "Account"
      summary: "Get code by address"
      description: "return account code"
      parameters:
        - $ref: '#/components/parameters/Address'
        - $ref: '#/components/parameters/BlockNumber'
      responses: 
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HexStringReturn'
        400:
          description: "Invalid address"
  /accounts/{address}/storage:
    get:
      tags:
      - "Account"
      summary: "Get storage by address"
      description: "returns storage value by address"
      parameters:
        - $ref: '#/components/parameters/Address'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/BlockNumber'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/HexStringReturn'
        400:
          description: "Invalid params"
  /transactions/{id}:
    get:
      tags:
      - "Transaction"
      summary: "Get transaction by transaction id"
      description: "returns transaction by transaction id"
      parameters:
        - $ref: '#/components/parameters/TransactionID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        400:
          description: "Invalid params"
  /transactions/{id}/receipts:
    get:
      tags:
      - "Transaction"
      summary: "Get transaction by transaction id"
      description: "returns transaction by transaction id"
      parameters:
        - $ref: '#/components/parameters/TransactionID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionReceipt'
        400:
          description: "Invalid params"
  /transactions:
    post:
      tags:
      - "Transaction"
      summary: "send rawtransaction"
      description: "send rawtransaction"
      requestBody:
        description: a rawtransaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionReqBody'
      responses:
        200:
          description: "OK(Transaction ID)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HexStringReturn'
        400:
          description: "Invalid params"
  /blocks/{id}:
    get:
      tags:
      - "Block"
      summary: "Get block by block id"
      description: "returns block by block id"
      parameters:
        - $ref: '#/components/parameters/BlockID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        400:
          description: "Invalid params"
  /blocks:
    get:
      tags:
      - "Block"
      summary: "Get block by block number"
      description: "returns block by block number"
      parameters:
        - in: query
          required: true
          name: number
          schema:
            type: integer
          description: "Block number"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        400:
          description: "Invalid params"
  /blocks/best:
    get:
      tags:
      - "Block"
      summary: "Get best block"
      description: "returns best block"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        400:
          description: "Invalid params"
  /contracts/{address}:
    post:
      tags:
      - "Contract"
      summary: "call contract"
      description: "call contract"
      parameters:
        - $ref: '#/components/parameters/ContractAddress'
        - $ref: '#/components/parameters/BlockNumber'
      requestBody:
        description: contract calling params
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContracCallReqBody'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HexStringReturn'
          description: "successful operation"
        400:
          description: "Invalid params"
  /logs:
    post:
      tags:
      - "Log"
      summary: "return logs by params"
      description: "get logs"
      requestBody:
        description: request params
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogFilterReqBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
        400:
          description: "unhandled error"
components:
  schemas:
    Address:
      type: string
      example: "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed"
      description: "Account address(Hexadecimal string)"
    TransactionID:
      type: string
      example: "0x44f1192e70a6b04e6cf4fc04600c777a407d431647572b2ef1b146c1cbf9f81b"
      description: "Transaction ID(Hexadecimal string)"
    TransactionClause:
      type: object
      properties:
        to:
          type: string
          description: to address
          example: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
        value:
          type: string
          description: "Transfer amount-uint256(Hexadecimal string)"
          example: "100"
        data:
          type: string
          description: "input data (can be null)"
          example: "0x0000000" 
    Transaction:
      type: object
      properties:
        chainTag:
          type: integer
          description: "ChainTag"
          example: 1
        id:
          $ref: "#/components/schemas/TransactionID"
        gasPriceCoef:
          type: integer
          description: "Gas price coefficiency(0~255)"
          example: 128
        gas:
          type: string
          description: "Gas(Hexadecimal string)"
          example: "0x493e0"
        from:
          $ref: "#/components/schemas/Address"
        dependsOn:
          $ref: "#/components/schemas/TransactionID"
        clauses:
          type: array
          description: "Transaction Clauses"
          items:
            $ref: "#/components/schemas/TransactionClause"
        index:
          type: string
          description: "Transaction index(Hexadecimal string)"
          example: "0x0"
        blockID:
          $ref: "#/components/schemas/BlockID"
        blockNumber:
          type: integer
          description: uint32
          example: 1
    TransactionReqBody:
      type: object
      required:
        - chainTag
        - nonce
        - gasPriceCoef
        - gas
        - clauses
        - sig
      properties:
        chainTag:
          type: integer
          description: "ChainTag-byte"
          example: 1
        nonce:
          type: string
          description: "Nonce-uint64(Hexadecimal string or Decimal string)"
          example: "0x01"
        gasPriceCoef:
          type: integer
          description: "Gas price coefficiency-uinit8(0~255)"
          example: 128
        gas:
          type: string
          description: "Gas-uint64(Hexadecimal string or Decimal string)"
          example: "0x493e0"
        dependsOn:
          $ref: "#/components/schemas/TransactionID"
        clauses:
          type: array
          description: "Transaction Clauses"
          items:
            $ref: "#/components/schemas/TransactionClause"
        sig:
          type: string
          description: "Signature(Hexadecimal string)"
          example: "0x00"
        blockRef:
          type: string
          description: "Block reference(8-bytes Hexadecimal string)"
          example: "0x0000000000000000"
    TransactionLog:
      type: object
      description: "Transaction event log"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        topics:
          type: array
          minItems: 0
          maxItems: 4
          items:
            type: string
            description: "Event log topic (can be null)"
            example: "0x0000000000000000000000000000000000000000000000000000000000000000"
        data:
          type: string
          example: "0x0000000000000000000000000000000000000000000000000000000000000000"
          description: "Event log data"
    TransactionReceipt:
      type: object
      properties:
        gasUsed:
          type: string
          description: "Gas Used"
          example: "0x5208"
        gasPayer:
          $ref: "#/components/schemas/Address"
        reverted:
          type: boolean
          description: "is transaction reverted"
          example: false
        outputs:
          type: array
          description: "Transaction outputs"
          items:
            type: array
            description: "Transaction logs"
            items:
              $ref: "#/components/schemas/TransactionLog"
    BlockID:
      type: string
      example: "0x000001b3ab9097c638424f3ebc23f288260e32b25217e6dcb154ca6a5d30e401"
      description: "Block ID(Hexadecimal string)"
    Block:
      type: object
      properties:
        number:
          type: integer
          description: uint32
          example: 1
        id:
          $ref: "#/components/schemas/BlockID"
        parentID:
          $ref: "#/components/schemas/BlockID"
        timestamp:
          type: string
          description: "Block timestamp(Hexadecimal string)"
          example: "0x5ab9f9a5"
        totalScore:
          type: string
          description: "Block timestamp(Hexadecimal string)"
          example: "0x6c5"
        gasLimit:
          type: string
          description: "Block gas limit(Hexadecimal string)"
          example: "0x989680"
        gasUsed:
          type: string
          description: "Block gas used(Hexadecimal string)"
          example: "0x989680"
        beneficiary:
          $ref: "#/components/schemas/Address"
        txsRoot:
          type: string
          description: "Block transactions root"
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        stateRoot:
          type: string
          description: "Block state root"
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        receiptsRoot:
          type: string
          description: "Block receipts root"
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        txs:
          type: array
          items:
            $ref: "#/components/schemas/TransactionID"
    ContracCallReqBody:
      type: object
      properties: 
        input:
          type: string
          description: "Input data for contract call(Hexadecimal string)"
          example: "0x70a082310000000000000000000000007567d83b7b8d80addcb281a71d54fc7b3364ffed"
        options: 
          type: object
          properties: 
            clauseIndex:
              type: integer
              description: "Clause index-uint32"
              example: 0
            gas:
              type: string
              description: "Gas-uint64(Hexadecimal string or Decimal string)"
              example: "0x493e0"
            from:
              $ref: "#/components/schemas/Address"
            gasPrice:
              type: string
              description: "Gas price-uint64(Hexadecimal string or Decimal string)"
              example: "0x1000"
            txID: 
              $ref: "#/components/schemas/TransactionID"
            value:
              type: string
              description: "Transfer amount-uint256(Hexadecimal string)"
              example: "100"
    LogFilterCondition:
      oneOf:
        - type: string
          nullable: true
          description: "Conditions need to be matched in the filter(can be 'null')" 
          example: "0x00000000"
        - type: array
          description: "Relations between conditions is 'OR'" 
          minItems: 2
          example: 
            - "0x00000000"
            - "0x00000000"
          items:
            type: string
            description: "Conditions need to be matched in the filter'" 
            example: "0x00000000"
    LogFilterReqBody:
      type: object
      required:
        - fromBlock
        - toBlock
        - address
        - topicSet
      properties: 
        fromBlock:
          type: integer
          description: "From block number-uint32 defaults to 0"
          example: 0
        toBlock:
          type: integer
          description: "To block number-uint32  defaults to bestblock"
          example: 1
        address:
          type: string
          example: "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed"
          description: "Contract address(Hexadecimal string)"
        topicSet:
          type: array
          items:
            $ref: '#/components/schemas/LogFilterCondition'
    EventLog:
      type: object
      description: "Event log"
      properties:
        blockID:
          $ref: "#/components/schemas/BlockID"
        blockNumber:
          type: integer
          description: uint32
          example: 1
        logIndex:
          type: integer
          description: "Log index-uint32"
          example: 0
        txID: 
          $ref: "#/components/schemas/TransactionID"
        txOrigin:
          $ref: "#/components/schemas/Address"
        address:
          $ref: "#/components/schemas/Address"
        topics:
          type: array
          minItems: 0
          maxItems: 4
          items:
            type: string
            description: "Event log topic (can be null)"
            example: "0x0000000000000000000000000000000000000000000000000000000000000000"
        data:
          type: string
          example: "0x0000000000000000000000000000000000000000000000000000000000000000"
          description: "Event log data"
    HexStringReturn:
      type: string
      example: "0x21e19e0c9bab2400000"
  parameters:
    Address:
      in: path
      required: true
      name: address
      description: "account address"
      schema:
        $ref: "#/components/schemas/Address"
    Key:
      in: query
      required: true
      name: key
      description: "storage hash"
      schema:
        type: string
        example: "0x0000000000000000000000000000000000000000000000000000000000000000"
    TransactionID:
      in: path
      required: true
      name: id
      description: "Transaction ID"
      schema:
        $ref: "#/components/schemas/TransactionID"
    BlockID:
      in: path
      required: true
      name: id
      description: "Block ID"
      schema:
        $ref: "#/components/schemas/BlockID"
    BlockNumber:
      in: query
      required: false
      name: blockNumber
      description: "Block number(defaults to best blocknumber)"
      schema:
        type: integer
        example: 0
    ContractAddress:
      in: path
      required: true
      name: address
      description: "contract address"
      schema:
        $ref: "#/components/schemas/Address"