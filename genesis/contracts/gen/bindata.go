// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin
// compiled/Energy.abi
// compiled/Energy.bin
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6a\xc3\x30\x0c\x86\xdf\x45\x67\x9f\x06\xdb\x21\xb7\x3d\xc0\x18\xec\x5a\xc2\x70\x62\xb5\x13\xa4\x72\xb0\xe4\x66\xa1\xf4\xdd\x47\x46\x1c\xa7\x34\xed\xc6\x20\x1b\xbb\x26\xbf\xa4\x2f\xbf\xfe\x68\x73\x84\xda\xb3\xa8\x65\x85\x62\x6b\x1b\x41\x03\xc4\x6d\x54\x81\x62\x73\x04\xb6\x7b\x84\x02\x5e\x19\xbb\xe7\x8e\x31\x80\x01\xed\xdb\xe1\x91\x75\x2e\xa0\x08\x9c\x4a\x93\x54\x82\x9a\x44\x3e\xea\xd8\xa3\x34\xd0\xda\xde\x56\x0d\x4e\xfd\x45\xad\xe2\x53\x54\x5b\x51\x43\xda\x43\x01\xec\x39\x89\xa6\x01\xdb\xc8\xb5\x92\x67\x38\x99\x39\xa3\x86\xb8\x88\x98\x0b\x23\xb1\xde\xdd\x3f\xcc\xc9\x6c\x25\xc8\x8a\x78\x46\xb6\x50\x3a\xff\xa8\xaf\xa9\x0f\x84\xdd\x3a\xbc\x1d\x29\xa3\x08\xca\x1f\x00\x5f\x0f\xc1\x48\xb5\x30\xdd\x64\x51\x95\x5f\x57\xde\x37\x67\x5b\x88\xfa\xe6\x03\x09\xfe\x66\x40\xf2\x78\x7f\x91\xcd\x7f\x6f\xe8\x67\xac\x57\x75\xf3\x3a\xbc\x43\xa9\x73\xb9\x68\x20\xde\xcd\xe1\x02\xee\x48\x74\x95\x6b\x60\xd9\x73\xbf\xf7\x51\x96\xf8\x88\x1d\xbe\xa3\x4b\x41\x48\xb8\x83\xb5\x37\xaf\xd7\xcb\xc8\x8b\x2e\xcb\xf0\x30\xf8\xfb\xd3\x91\x37\xd7\x3b\xd5\x8c\xed\xbe\xb1\xee\xc7\xf4\xff\x5c\x12\x96\x1f\x01\x00\x00\xff\xff\xc4\xf3\x5c\x07\xc8\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x0d\x72\xe3\x2c\x0c\xbd\x92\x24\xd0\xdf\x71\xc0\xc0\xfd\x8f\xf0\x8d\xc0\x8e\x53\x67\xf3\x6d\xb3\xdb\x6e\x93\xcc\x74\x5c\xc5\x46\x4f\x4f\x3f\x3c\x23\x10\xdf\x0c\x4c\x29\x09\x00\x18\x08\x02\x02\x40\x31\xe4\x6c\xa8\x69\x7c\xf2\x03\x84\x8e\xe2\x60\xe9\xf3\xcf\xa0\x00\xa1\x3a\x30\x73\xf8\xad\xcd\xa6\x7f\xe0\x89\x25\x79\xfc\x1d\x09\xe0\x44\x29\x00\x39\x09\xce\xbb\x2c\xb1\xce\xfb\x58\xb7\x89\xf9\x8f\x3e\x0e\x90\x25\x9d\x88\x0c\x24\x61\x2a\x23\x43\x62\xcc\xd3\x8f\xb1\x86\x95\xaa\x69\x62\xcb\xcb\xba\xe1\xb2\x8a\x42\xb1\xad\xea\xb4\x22\xe5\xdd\x3a\x5a\x01\xf7\xb4\xac\xa6\xcb\x6a\xad\xf0\x56\xb9\x2e\xeb\x56\x97\xb5\x51\xca\x59\xf2\x98\x56\x22\x58\xd6\x41\x1b\xb9\xd5\xbe\xac\x92\x59\xb9\xae\x0c\x8d\xc6\x35\x65\xe4\x40\xe1\x3b\x07\xcb\x1a\x96\x3a\x82\x23\x03\x0b\x5e\x5e\xc8\x84\x83\x00\x01\xa0\x83\xa3\x03\xc3\xcc\x08\x6d\xc8\xc2\x15\xe0\xf4\xb8\x6d\x57\x8f\x9d\x4e\x8f\xbf\x5c\x25\xf1\x88\x55\x66\x06\xd1\xc0\xe8\x15\x5c\xaf\xdc\x6b\x18\x15\x32\xfd\xe3\xf4\xbd\x7b\x74\x84\xe4\x30\xd2\x2d\x0a\xa4\x71\x89\x02\x33\xff\x2e\x0a\xef\xef\x16\x85\xd3\x35\x8a\xcd\xbf\x22\xfb\xf1\x34\x32\x3e\xe1\xa1\xb5\x4b\x4d\x60\x93\x2b\x8e\xd6\xa3\x49\x2b\xbe\x19\x63\x44\xf5\x82\x94\x84\xbe\x9d\x31\x69\x72\x61\x8c\xe4\x5a\x7f\x74\xdf\xb7\xe7\x2a\x46\x80\x17\x4b\xcc\x68\xc0\x01\x31\x3c\x61\xc6\x98\x61\x8f\x7e\xc5\xed\x60\xb8\x5f\x93\x81\x27\xa7\x89\x10\x4f\x96\x2c\x59\x8a\x7c\x58\x4e\x1a\x1e\x16\x6b\xc7\xf7\x0e\xb9\x26\x38\x90\x2f\xb4\x0e\x9c\xfd\xb6\x47\xc4\xec\xfc\xae\x9c\xa6\x97\xf6\x11\xcc\xc1\x7e\x54\x27\x7e\x98\x4f\xc1\xd5\x4f\xee\x6a\x0c\xab\x03\x20\x4f\xfe\xb3\x21\xc2\x81\x54\x3a\xeb\xe8\x5c\x7d\x62\x5c\xb9\x89\x2b\x8a\x3d\x09\xe3\x6a\xe6\xe5\x2f\xf8\xb6\xbd\xff\x80\x1e\xbd\x97\xf6\xcf\xbc\xc3\xca\xc2\xdb\xd7\x4e\x4e\xe5\x43\x57\x02\x2c\x4d\xf4\x6d\x38\xef\xe6\x16\x9c\xd7\x2b\x0b\xc1\x15\x83\xe1\x44\xc6\xf9\x98\xf4\x78\xa2\x75\xbc\xa0\x25\x03\xce\x93\xeb\xd0\x1c\x64\x18\x77\x15\x8e\x7e\x16\x84\x52\xe6\x2e\xec\xf8\x2c\xdf\xc6\x6b\x6a\x39\xfe\x5c\xb7\x1c\x51\xf8\xba\x5e\xfc\xbf\x34\x97\xbf\x8a\x7f\xc3\x9b\x2e\x15\x2e\xb7\x4a\x46\xc4\x9d\x7f\xe6\x07\xfe\x65\x3d\x7d\x8b\x00\xd2\xa5\xeb\x58\xec\xb7\x5d\xf7\x57\x5d\x72\xa0\xb0\xf4\xe8\xbb\xc8\xef\x7c\xff\x98\xf6\x3f\x78\x43\xc3\x93\xbb\x98\x3f\xb3\x86\x05\xf4\xa8\xe1\x56\x23\x13\xf3\x89\x77\xaa\x0f\xb3\xb4\xf3\x67\x69\x5b\x08\xb9\xbe\xa8\x77\x86\x02\x17\x87\xc2\xd2\xb6\xc4\xd2\x95\x47\x03\xec\x21\x64\xdc\xc9\x86\x68\xee\xbd\x8d\x64\xd2\xd2\xe8\x23\x37\x6e\x68\x22\xdd\x7c\x2b\x43\x49\x31\x30\x1c\x4a\x0b\x79\x7d\xff\x5f\x19\x15\xda\xf7\x7c\xf9\x9a\xfd\x7d\x9f\xf8\xa1\x78\x42\xff\x15\xe1\xf8\xff\x1f\x4c\x6e\x45\xbd\xe8\x29\xa5\x98\x80\x74\x66\xe4\xb8\x93\x3e\xe8\x83\x0f\xd1\x23\x9f\xdd\xad\x19\x2e\xdd\x7d\x54\x29\xbc\x86\xf1\xcb\xea\x0d\x38\xcf\xce\x8e\xff\x11\x65\x29\xef\xf9\x53\x5a\x7d\x1f\xd9\x8a\xce\x39\x59\x29\xf4\xa0\x85\x7e\x30\x82\xd0\xae\xa1\x4e\x8f\xdf\x03\xe1\xe0\xa5\x4e\xe3\xed\x1f\x74\x75\xce\x8b\xe8\x06\xb5\xa4\x29\x17\xeb\x59\xcb\x66\x09\xa5\x33\x40\xd9\x28\xe1\xe6\x50\xa4\xa3\x65\xdb\x0a\x91\xf1\xc8\xd0\x40\x7b\x29\x4c\x00\xdc\x73\x4d\x05\xba\xaf\x9e\xf8\x45\x67\xdc\xab\x17\xfe\xb9\x49\xb3\x2b\x01\x9a\x39\xf5\x5c\x6e\x4a\x60\x69\x03\x73\x5f\x96\xe8\xf0\xe8\x3a\xee\x37\xcd\xf9\xa8\x07\xac\xb4\x4f\xeb\x01\x79\x0b\x3d\x90\xef\xf4\xc0\xca\xc2\x4b\xcc\x7e\xc3\xbc\x2f\xec\x77\x7a\x60\xbd\xd1\x39\x6f\xcf\xb2\xb0\x77\x5d\x7e\xaa\x0a\x5c\xd3\xb7\xab\x82\xfc\x44\x15\x78\xc5\x37\x57\x05\xf9\x89\x2a\x28\x48\x4f\x54\xc1\x1b\x54\xc9\xcc\xfc\xda\x73\x2b\x43\xcc\xb8\xfb\x9d\x46\x87\xa8\x8c\x3f\x3d\xb1\x8c\x8f\xf6\x3f\x3f\xf1\x3c\x4e\x3d\x83\x4f\x9f\x98\x56\x66\x2d\x31\x07\xd7\xb1\x0d\x4e\x56\x85\xd5\x70\x29\x9b\x0f\x75\x81\xeb\xcc\x00\xd6\x5d\xc7\xfb\x45\xb5\x35\xbf\xeb\xa9\x29\x7e\xb9\x6e\x05\xfa\xc4\xba\x35\xae\x9e\xae\x4b\x9f\xdd\x0d\x1f\x6b\xfa\x3c\x3b\xf1\x59\x5b\x80\x1e\x3a\x01\x70\xcc\x53\xe5\x9a\xe7\x69\x6f\xec\x07\x63\x44\xfd\x5a\xb2\xf0\xa0\xc6\x1c\x3e\xaa\xca\x81\x60\xe6\x3c\x26\x2b\x33\xef\xd3\x39\x7e\xd5\x15\xc7\xbc\xe7\x98\xd1\x55\x99\xd5\x88\xd1\x88\xd9\xf1\x50\x64\xbe\xcf\xe6\x15\xe7\x7a\xcb\x98\xf5\xb2\x4e\x5f\xaa\xa5\x0b\x07\x7b\xbe\xc2\x52\x7c\x9e\xd3\xd4\xa9\xf6\x76\x2f\x85\x8f\xbd\x61\x9f\x19\x7b\x17\x2d\x46\xad\xdd\xaf\xe1\xb3\x4d\x0a\x0a\x0b\x69\xd1\xa2\x94\x80\x8d\x40\xa8\xd7\xa2\x32\x18\xac\xf7\xe1\xb5\x8f\xd2\xd4\x46\x76\x53\x6a\x3e\x50\x61\x4c\x65\x59\x5a\xc1\x4c\x46\xb6\x6d\x51\x28\x15\x1d\x9a\x77\x1d\x41\xfd\x7f\x01\x00\x00\xff\xff\xa6\x9e\x3e\xa2\x56\x18\x00\x00")

func compiledAuthorityBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBin,
		"compiled/Authority.bin",
	)
}

func compiledAuthorityBin() (*asset, error) {
	bytes, err := compiledAuthorityBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xd1\x6a\xdb\x30\x14\xfd\x17\x3d\xfb\xa9\x63\x63\xe4\xad\x0f\xe9\xd8\xc3\xba\x41\x52\x18\x94\x50\xae\xed\x9b\x4c\x4c\xbe\x12\xd2\x55\x52\x53\xfa\xef\xc3\xa9\x13\x3b\x43\xb2\x3d\x2f\x89\xfb\x94\x80\xae\xe4\x73\xae\xce\x91\x8e\x1e\x5f\x44\xa6\xc9\x31\x10\x8b\x19\x5b\x8f\x89\x90\x64\x3c\x3b\x31\x7b\x5c\x25\x82\xa0\x40\x31\x7b\xfb\x49\x84\xf6\x5c\x0f\xbd\x1c\x47\x44\x22\xb8\x34\xd5\x5f\xc7\x56\xd2\x46\xbc\xae\x12\x61\xa0\x84\x54\xa1\x98\xad\x41\x39\x4c\x84\x63\x60\xfc\xe6\x19\x52\xa9\x24\x97\x62\x26\x8c\xb7\xd8\x4c\x5d\x7b\xca\x58\x6a\x12\xaf\x49\x1b\x4f\x3d\xfb\x08\xe8\xf8\xd5\x27\x67\x90\x72\xb4\xcd\x0a\x90\xe7\x16\x9d\xdb\x2f\x70\x28\x82\x42\x7b\xe2\xa6\xc6\x4b\xe2\x9b\x8f\x9f\xf6\x08\xeb\x1a\x30\xc6\xea\x6d\x84\x9b\xf3\x59\x56\xad\x79\x5c\x20\xd5\x5a\x0d\xe4\x47\x9a\x0e\x45\x7d\x2c\xa3\x5d\x7f\xb8\xff\xba\x5c\xfe\xbc\x9b\xcf\xc3\xf0\xc2\xc4\xfa\xa1\x6d\x25\xee\xc6\x83\x62\xcd\xa0\x16\xde\x18\x55\x86\x61\xed\x0b\xe6\x84\x76\x53\x5e\x14\x61\x5c\x1c\x6b\xab\x8b\x6e\x65\xb0\xee\x1c\x67\xb0\x1b\xe4\x91\xe2\x6a\xd5\xe0\xb3\x91\x6d\x99\x07\x04\xe8\x7e\x81\xc5\xbb\x37\xc0\x67\xdc\xe3\x7f\x90\xdf\x05\xfb\x38\xc4\x81\x6c\x81\xdc\x1a\x6d\xbc\x07\xd3\xd8\x30\xb0\x05\x69\xc9\xe8\x3e\xdc\xb4\x19\xf6\xef\xad\x0b\x93\xea\xed\xed\x00\x7d\x75\xc9\xeb\xd2\xc7\x40\x8e\x99\x2c\x40\x45\xd8\xe5\xa7\xa0\x3e\x5f\xe5\x52\xf8\x7f\x53\x0f\x90\x6b\x85\xc3\xff\x75\x19\x5e\x4b\x89\x4f\x7a\x47\xc1\x3b\xaf\x81\x97\x82\x02\xca\xf0\xfb\x3a\xbc\x2f\xf5\xf0\x34\x92\x71\x65\x91\x6a\x15\xf1\xf8\x34\x31\xe2\x8c\xe7\xd7\xbb\x3c\xbb\x7a\x09\x46\x4d\xd1\x10\xdc\x20\x2f\xaa\x83\xec\xf6\xd0\x8b\x89\xa3\x48\xbf\x1d\x92\x21\x39\xb1\x95\x01\x95\xd2\xbb\xda\x16\x01\x6e\x16\x0b\x90\x54\x49\x72\x12\xd7\x54\x21\x70\x7e\xff\xe5\xe1\xc7\xd5\x3a\x3f\x52\x99\xa0\x54\x0a\xd9\xef\xfd\x12\x40\x9a\xca\x42\x7b\x17\x32\x9f\xa4\x1c\x9f\x31\x3f\x70\xee\x4f\x1b\x91\x09\x31\x6d\x1f\xcb\xeb\x4f\x1f\xea\xb7\xa0\x7c\x77\x18\x5b\x36\x5e\xae\x8b\x70\x8b\xc4\xa3\x29\x75\x08\x34\x32\xa3\xf3\x5d\x33\x9e\xd8\xed\xfe\x99\x03\xea\x5c\xc4\xce\xbf\x57\x27\xe5\x5d\x57\x75\xa4\x09\x5d\x71\x29\x32\x65\x40\x3a\x5f\xb4\xd2\xf9\x69\xe3\x56\x7f\x02\x00\x00\xff\xff\x2d\x66\x89\x32\x39\x0f\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x09\x76\xf3\x2c\x8c\x57\xd2\x0a\xe2\x38\xac\xf7\x3f\xc2\x3c\xc0\x4e\x1c\x37\x4d\xe3\x7e\xe9\xef\xcc\x4c\x92\x57\xd7\x95\x41\x08\x21\x09\x49\xc8\x75\xd0\xbf\x02\x4a\x2c\xa8\x0e\x01\xa0\xa9\x77\x00\x60\xd0\x8a\x26\x87\x24\x0d\x0c\xfa\x13\xac\x1d\xce\xa1\x5f\x1b\x03\x5c\xfb\x3a\x00\x61\x87\xa3\x55\x49\xb3\x3f\xab\xcf\xd0\xf1\xfd\xea\x13\x00\xc4\x71\x5b\x3e\xe8\x0c\x1c\x83\x6b\xa5\x54\x60\x94\x3e\x4e\x4d\xea\x07\x34\x68\x8d\x3e\x4d\x28\xfa\xb0\x40\x5b\x85\xa6\xac\x13\x5a\x78\x42\xd1\xd0\x41\x29\x65\x42\x5b\x5e\xa0\xa9\x11\xfb\xec\x07\x94\x48\x27\x94\x38\x99\xa7\xa5\x2d\x65\x5a\xa0\x8e\x8b\x36\xc4\x01\x65\x5e\x68\x60\xe4\x5c\xd5\x4d\x0c\x9c\x16\x1a\x24\xc7\xa0\x21\xc2\x84\x56\x9b\x50\x0f\x11\x8c\x78\x62\x10\x59\xda\x06\x2d\x16\x92\x2c\xd0\xe0\x26\x34\x06\xd0\x90\x53\x1a\x50\x25\x99\xd0\xc4\xa5\x5a\x5d\x66\xac\xbe\x4e\x68\x29\x8e\x6a\xe1\x3a\xa1\x35\x4e\x68\x73\xa1\x56\x95\x49\x99\x53\xa7\x5e\xd3\xba\xd2\xd5\xdd\xac\xf4\xe5\x6e\x7d\xde\x6e\x9f\x77\x48\xed\x58\x7c\x53\xd7\xdb\x0b\x28\x5a\x97\x0d\x20\x00\x34\x32\x04\x36\x52\x32\x36\x34\xd4\xfe\x43\xf3\x59\x40\x05\x03\xc5\xb0\xb4\x0d\x60\x60\x6c\xdc\xb1\x6b\xea\xed\x11\xc6\x98\xc8\x63\x36\x46\x30\xfa\x9b\xc0\x82\xc3\xb0\xf7\xd2\x2e\x61\x48\xdc\xc7\x57\x98\xdf\x30\x7e\xe6\x73\x07\x38\x64\x65\xe2\x72\x69\xc1\xc5\x7d\x6c\xd7\x69\xe4\x31\x7e\x17\xd5\x2e\x99\x11\x18\x03\xba\x5b\x3a\x3b\xe6\x40\x13\xf7\x3a\xc7\x80\xc0\x01\x1a\x5f\x78\x83\x26\x3b\xde\x60\xea\x7a\x21\x9d\x1f\xac\xfe\x22\xb9\x3f\x7d\xd0\x5d\x79\x12\x06\x5f\x58\x6f\x21\x3a\x67\xed\x32\xdd\x70\x9d\x50\xe7\x77\x47\xfd\x03\x9a\x4b\xdd\xd3\x5c\x9d\x43\x88\x7c\xbb\x9e\xf4\x34\x46\x02\xbf\xc3\x48\xd0\x3a\x46\x91\xdf\x62\x64\xd8\x63\x8c\xf9\x55\x7c\x3d\xb3\xf7\x93\xab\x1c\xa5\xfe\x96\x73\xb9\xec\x38\xc7\x84\xef\xc1\xb9\xbb\x33\x2d\xee\x5f\xe5\x99\x65\x6f\x9f\xd8\x6d\x74\xb0\x3f\xe9\xda\xfd\x1c\x3d\x28\x31\xdd\xd0\x23\x47\xe6\x7c\xa4\xed\x75\x7e\xdd\xee\x5d\xee\xb7\x2b\xcd\xab\x6d\xfb\x7e\xee\x79\x6f\x7f\x38\x67\x87\xa8\x88\xb7\x5c\x75\xd0\xc7\x9c\xd7\xe7\x39\xdb\x78\x87\x5d\xc4\xbf\xaf\x2c\xa1\x62\xec\xb3\xee\x7b\xc9\x32\x03\xd1\x3d\x7f\xa4\xef\x53\xff\x3e\x83\x65\x44\x2b\xe9\x97\x7a\x2a\x11\xf7\x94\xc5\xe0\x10\x23\xd3\x9f\xed\xaa\x52\xc3\x8f\xbb\xaa\xe4\xfa\xd4\xae\xaa\xe8\xfe\x6c\x57\x55\xda\xf9\x9e\xa0\x4e\xfe\x72\x57\xc5\xe8\xf5\x1f\xad\x90\x5a\xd8\xd3\x5c\x5e\x46\xf3\x3f\xcb\x69\x2b\xf9\x97\x72\xaa\x4d\x77\xf3\x72\xf2\x12\x0d\x7a\xc5\xbc\x08\xf1\xb7\xf3\x72\x6e\xaf\x7f\xce\x85\x8e\x31\xf2\x51\x8c\xbd\xaf\xf9\x1e\x21\x91\xad\x7d\xa7\x3e\x76\xbd\x99\x91\xd1\xb0\x3a\xf1\x8a\xab\xfb\xce\xa2\x2a\x04\xa2\xae\x3b\xe0\xe4\xbc\x0f\x47\x22\xa3\x8e\x6b\xd5\xcf\x39\x2a\x0c\x6b\x01\xc0\xfc\xf7\x7b\x56\x80\xeb\x7d\x1f\x93\xfa\xc8\x3c\xef\x03\xa8\x04\x58\xad\xc0\x88\xe0\xc6\xbe\xd3\xf5\xc9\x21\x98\x4e\xff\x13\x27\xc5\x67\x53\xbb\xd2\x69\xa8\xd2\xc3\xc2\xd6\x80\xa6\xbf\x60\xdc\x29\x06\x42\x1f\x40\x55\xe1\x0d\x38\xdc\xad\x2c\x4e\x6a\x8e\xd1\xc0\x67\x73\x9b\xae\x94\x0b\x9d\x4c\x0b\x5e\x69\xd1\x64\xb8\xca\xe2\x79\xab\x6a\x87\x2c\xe1\xab\x46\x5e\x79\x60\x74\x48\x92\x8e\x71\xa9\x59\xd6\x54\xb1\x6a\x4d\x35\xfb\xa2\xa9\xa0\x34\x8f\x42\xbe\x60\x35\x69\x5c\x0a\x30\x4a\x86\xe6\x13\x51\xc0\xaa\x89\x00\x62\xb6\xec\x33\xa7\x40\x6a\xf2\xac\x2d\x8e\xdd\xe3\x59\xfd\x98\xa0\xc8\xbc\xf5\xd0\x4e\x95\xb8\x8f\xde\xbe\x82\x96\x8d\xde\x06\x9a\x12\x30\xd7\xd6\x89\xe1\xba\xca\x0e\xc9\xe3\xdd\x7d\x71\xb9\xda\x21\x8a\xe2\x91\xd6\x28\xd3\x6b\xec\x11\x7c\xd8\xfb\x17\x31\x44\x9b\x1e\xc6\xf0\x12\xae\x2d\xe3\x3e\x7e\x8d\xb1\x99\xdd\xb6\xec\xd0\x14\xb7\xed\xcc\x1f\x9a\x47\x38\xd4\x3a\x1d\xd3\x71\x57\x72\xe3\xd6\x9d\xcc\xd4\xc8\x47\x74\xad\x02\x5a\x08\x4e\xad\xc6\x4c\x2e\x81\x39\xad\x56\x7a\xbb\x58\x5d\x42\x97\xd4\x59\xc6\xc0\x22\xbe\xa5\x62\xc1\xae\x1e\xd7\x77\xd1\xf0\xdd\xa8\x21\x8a\x99\xd9\xb5\xef\x5f\x49\xa6\x7b\x94\xc3\x5e\xa8\x44\xe9\x14\x9f\x4d\xc1\x7d\x3e\x11\x04\x1e\x1e\xcc\xd4\xe1\x4b\x56\x64\xfd\xfd\x48\xf3\x3a\xc6\xe1\xd7\x8d\xf8\xcd\xc8\x86\x7f\xd7\xf7\x8d\x25\xae\xcc\x21\xab\x37\x1a\xab\x25\x33\xda\x9c\x70\x04\xf5\xad\x6a\x0a\xa3\xff\xc4\xba\xe0\x9c\x1e\x18\x4d\x7b\x6d\x8b\x8d\xbc\xef\x3d\xfe\x99\xb5\x39\xac\xdb\x7d\x4e\xd6\xd4\x9b\x9b\x5e\xc3\xd5\x1e\x99\x0e\xc8\xc6\x5a\x3a\x84\xa2\x23\xaa\x34\xb4\xc5\x7a\xcd\xb5\x71\x08\xa9\xb9\xf1\x64\xf0\x72\x7d\xda\xf9\xd7\x47\x88\xad\x47\x38\x3d\x9e\xe0\x11\xdd\x04\xfc\x9e\x7b\xc3\xe2\xad\xe7\x2f\xbb\x88\xc3\xea\x2f\xf3\x51\x69\x73\x1f\xd7\x38\x23\x8c\xc8\x6b\xf1\x82\x97\x0c\xc2\x75\xd5\x6e\xbd\xe8\xe7\xc7\xbd\xfa\xda\x47\x68\xdd\xfa\xe4\xb4\xa5\xa6\x8b\x9e\x8e\xf8\xeb\x0a\xeb\x77\xba\xe4\x33\xae\x79\x0d\x0d\xb2\xde\xeb\x97\x7d\xe2\xec\x98\xe4\x87\x08\xaa\xb6\xf6\x89\xa0\x7e\x49\xf3\xc7\x13\x7b\x05\x2d\x37\x11\x94\x43\x68\x60\x26\x77\x7c\x9b\x86\xfb\xfc\x6b\xc3\x62\x7a\xf5\xcb\xaf\xd6\xdf\xe0\x98\x47\xf3\x37\x32\x71\x2c\xdf\xbf\xca\xc4\x69\x94\x6f\xf7\x9b\x4e\x09\x23\x2e\xf9\xd9\x56\x48\xbd\x8e\x98\x69\x18\xc5\x34\xe1\x08\x1a\x27\xfc\x62\x3f\x4e\xe3\xfa\x39\xd2\xab\x72\xcb\x8f\x16\x3a\x3f\x96\x75\x3c\x25\x0e\x9f\x12\xa8\x32\xa8\xf1\x3d\xde\x1d\xb4\x1c\x8a\x53\x5e\x4f\x0b\x61\x95\xb9\xeb\x6f\xeb\x2f\x86\x76\x63\xd7\x70\x87\xc8\xb1\xa8\x77\x88\xa8\x34\x4f\x1b\xde\x80\x6a\x02\xba\x4f\xf5\xfb\xd8\x18\x87\x48\xe4\x06\xc7\xf0\x78\x44\xfa\x7f\x41\x03\x7f\x58\xa7\xff\x97\x76\x69\x2b\x1d\x2d\x5e\xf4\xe9\x44\x79\x7d\x6c\x05\x16\xfa\x0e\x8d\xf9\x47\x7b\xf6\xa1\xf5\x3a\x68\xe3\x5b\x29\x8d\x94\x62\xc1\x54\x29\x5b\x48\x2e\x64\x4a\xe0\xac\x65\xf6\x56\x62\x0c\x4a\x29\xfa\xee\x0c\x64\x89\x88\x8e\xac\xa9\x46\x29\x4d\x89\x13\xd7\x66\x7a\x30\x7f\x89\x43\x06\x38\xd1\xca\xe5\x19\x77\x0f\x58\xfa\xe4\x34\x5f\x40\xf9\xbb\x7a\xd2\x10\x78\xcd\xde\x2c\xeb\x3b\x5a\x2b\xd9\x25\x03\x20\xb0\x5a\x8b\xdb\x5c\x0b\x4a\x76\x3f\xe7\x5a\x56\x69\x9a\xd2\xf7\xba\xac\x4b\x80\x35\x87\xd1\xb1\xd8\xc2\xe3\x25\x4b\xc4\x97\xcc\x2c\x20\x3d\xc8\xcb\x9e\x1e\xc7\x3e\x8e\xba\xd1\x2d\xf9\xd7\xb3\xa5\xf7\x13\x75\xff\x97\x94\xbf\xab\xad\xe8\xfb\x81\xcb\x6c\x6e\x7f\x4e\x80\x2e\xef\xea\x3b\xd1\x15\x3f\xea\x13\x76\xd1\x39\xba\x7a\x53\xdf\x65\xce\xdc\x27\x93\xfe\x64\x26\x1d\xd1\x1b\xdb\xe0\xeb\x5a\x5d\xd3\xdb\x9b\x18\x5f\x6c\xb2\x0f\x75\xc4\x47\x3e\x98\xc9\x58\x29\xc2\x34\xab\xab\x3a\xb4\xce\x33\x2b\x44\x1f\x27\x9e\x35\x27\x82\x1d\x4f\x87\xa7\x62\x6c\xfa\x30\x16\xbb\x8c\x55\x61\x8e\x95\xeb\xed\x58\xf3\x3c\x14\x7d\x89\xe6\x8d\x3a\xbc\xf9\x3d\x0d\x93\x8a\x1a\x3f\xde\xc5\x0b\x28\x7f\x57\x8b\x71\xfb\xbd\xbb\x03\x9f\xe9\xcd\xab\xac\xe7\x4c\x27\xd2\x31\x3d\x18\x3c\x9d\x8e\x8b\xf7\xe4\x10\x43\x8d\x0e\x5c\xb7\x07\xa1\x64\xe3\x63\xd9\x02\xc6\x87\xb1\x36\x12\x37\xfd\xee\x19\x46\xa2\x7e\xc5\x71\x05\x36\x15\x7a\x84\x6d\x64\x80\xbf\xc7\xd7\xe7\xf7\xe0\x39\xa0\xf1\xb4\xb9\x06\xd7\xca\xe7\xa5\xd6\x6f\xa1\x87\xe3\x13\x55\x76\xbc\xad\xb2\x13\x95\x2a\xfe\xfb\x2a\xba\x9f\x3e\xdf\x57\xd9\x9d\xef\x01\xfe\xe0\xaf\x66\xa4\x8f\xbf\xfa\x4b\x9a\x3f\xbb\xcf\x2b\x68\xd9\xfb\xab\x19\xd3\xbd\x53\x22\xcc\xb4\x7b\x7f\x08\x33\xc3\xd6\x17\xd9\x9e\x12\x7d\x64\xe2\x30\xe5\xdf\x9e\x12\x61\xae\x7a\xf7\x94\xa8\x98\xbc\xd1\xa9\x48\x31\xfa\x5f\x74\x2a\x52\x4b\x53\x6f\x67\xeb\xde\x6a\xf7\xc9\x48\x05\x96\xbc\xd2\x26\xc7\x5c\x29\x7f\x72\xcc\x7f\x95\x63\x3e\x5a\x23\x7b\x52\x8e\xb9\x56\xf9\x92\x63\xae\xb5\x7c\xa2\xc0\x17\x50\xfe\xae\xfb\xf0\xae\x72\xf6\x4b\x04\xe8\xcd\x7f\x72\x40\x4f\xe4\x80\x64\xa9\x89\xdc\x56\x55\x5e\xaa\x29\xdd\x0b\xaa\x2a\x09\xa1\xde\xab\xaa\x24\x48\xe9\xb9\xaa\x4a\xa1\x4b\xfd\x9b\xac\x3b\x3e\x41\xa5\xcb\xce\xbe\x56\xcc\xc9\xba\x77\x8d\xa1\x7d\x6f\xd5\xea\xf5\xe9\xe3\x0c\xd4\x88\xd5\xee\xd4\x38\x12\xc4\x91\x5b\x32\x0e\x37\xd9\x87\xbd\xfc\x5d\x22\x94\xff\xe0\x4d\xdb\x6f\xde\xbe\x38\xe9\x14\x3c\x7c\xe5\x06\x5e\xeb\xd8\xed\x17\xb4\xcd\x1a\x55\x1a\xff\xe7\x62\x95\xad\xf1\x77\x9d\xd5\xa6\x3c\xb3\x81\x63\xed\xf1\xfa\x3e\xe6\x35\xc6\x9e\x36\x80\x4c\x96\xba\x5c\x5e\xe5\x6e\xe2\x6d\x36\x25\xcf\x96\x13\xa4\x2f\xb6\x84\x8c\x10\x2f\xed\x69\xad\xff\xb5\x1e\xdb\xf3\x9d\xf9\x6e\xad\xcf\xd4\x21\xff\x52\x1d\xa2\xf1\xdf\x41\xbe\xea\x10\x69\x79\x4e\x87\xf6\x7a\xb2\x68\x11\x4d\xff\xf8\x56\xc3\x16\x1d\xa2\xd2\xf5\x56\x36\xbd\x2e\xa3\x8e\x13\x24\x24\x8a\xc5\x74\x56\x60\xfd\x54\xb5\xb2\xaf\x33\x5e\xe6\x34\x73\x37\x54\x70\xa3\xa5\xee\x11\x9e\xd5\x5e\xed\xf1\xdd\xd5\x5c\x12\x9e\xf9\x9c\x4d\x1e\xe6\xeb\xba\x21\x31\xf0\xc8\x53\xdf\xab\xe5\x7b\x07\x9f\x8d\x36\x2b\xce\x75\xe4\xe2\x89\xa3\xbd\x8d\xdf\xfb\x53\xad\xd2\x1b\xf0\x70\xbe\xaf\xbd\x5f\xfb\x61\x21\xe8\xa2\x1f\x82\x32\xe4\x41\xd0\x2d\xd1\xa4\x0c\xde\x4f\xce\x0b\xf2\xd4\x35\x10\x94\xf5\x94\x8a\x04\xeb\x23\x5b\x42\x77\x2b\xda\xdd\x36\x23\x37\xb4\xa3\x6b\xb5\xb1\xaa\xe1\x18\x0f\x3b\x66\x37\xdf\xc4\x66\x98\xda\xd9\x7f\xf3\x17\x2d\x47\xeb\x1a\x8e\x30\x7b\xd8\x5a\x71\xef\xe6\xdb\xef\x69\x93\x25\x47\x92\x8c\xc3\x46\xa6\xf1\x66\x38\x4e\xfa\xd3\xe5\xff\x6c\x18\x7d\xcd\x70\x05\x78\x7e\x3d\xd6\x3c\x98\xea\xd8\x01\xe8\x92\xdd\xeb\x7f\xd3\xf6\x6f\x5d\xf3\x69\x48\xe2\x65\x9e\xe2\x4c\x4e\xf4\x2b\x40\xec\xe2\x43\x3e\xfa\xe8\x89\x41\x8d\xc0\x23\x38\x0a\x32\x4a\xf6\x63\x8b\x4d\x12\x17\x64\xe5\xe0\x82\x17\x20\x4b\x10\x55\xa1\xd5\x60\x58\x20\xa1\x27\xc9\xde\xbb\x6a\x08\xc9\x0a\x97\x06\x40\xe1\x7f\x02\x00\x00\xff\xff\xda\xfb\xc1\xb4\x1c\x4a\x00\x00")

func compiledEnergyBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBin,
		"compiled/Energy.bin",
	)
}

func compiledEnergyBin() (*asset, error) {
	bytes, err := compiledEnergyBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin": compiledAuthorityBin,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin": compiledEnergyBin,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin": &bintree{compiledAuthorityBin, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin": &bintree{compiledEnergyBin, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

