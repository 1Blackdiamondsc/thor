// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/SafeMath.abi
// compiled/SafeMath.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// compiled/Voting.abi
// compiled/Voting.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x41\x4f\xc2\x50\x0c\xc7\xbf\x4b\xcf\x3b\xe9\x6d\x37\x12\x13\x4f\x46\xe3\x95\x10\x52\x78\x9d\x36\x19\xed\xb2\xd7\x37\x9d\x84\xef\x6e\x86\xec\x0d\x74\x30\x08\x28\xf1\xf8\xb2\xbe\xfe\x7f\x7d\xff\xb6\x1b\x2f\x61\xae\xe2\x0d\xc5\x20\xcd\x30\xf7\x94\x00\x4b\x11\xcc\x43\x3a\x5e\x82\xe0\x82\x20\x85\x29\x3a\x57\x42\x02\x56\x17\xcd\xb1\x39\x91\xf7\xb0\x9a\x24\x6d\x84\x23\x0c\xf6\xaa\x25\x7f\x10\x24\xa0\xc1\x36\x29\x26\x09\x14\x58\xe3\x2c\xa7\x98\xde\x1b\x1a\x3d\x04\xc3\x19\xe7\x6c\x35\xa4\x20\x2a\x6d\x50\xd4\xc8\x82\xcc\x8d\x55\x60\x95\x1c\x87\x58\xa9\xb1\xbc\x1c\x84\x9c\xb2\xb0\x31\xe6\xbf\x0d\x69\x65\xe8\x65\x1c\x7c\x45\x41\xe3\x8a\xee\xc9\x9e\x4a\x2d\xd4\x53\xb9\x83\x19\xf3\x74\x39\x66\xaa\xf9\x5a\xfc\xc7\x97\xc0\x62\xb7\x37\xeb\xe4\xc3\xb5\x55\x4c\x6f\x67\x3c\xfd\x9e\xba\x3a\xac\x29\x3b\x12\x6b\xb4\x62\x94\xb7\xb2\xb1\x6b\xab\xf8\x2b\x37\xd0\x91\xe6\x8c\x9c\x3b\xcd\x9c\xbf\x6a\xae\xe1\x19\x6d\x64\x83\x7f\xcc\xfa\xb9\x33\x0d\xe2\xf6\x77\xd6\xd7\xe5\xab\xf4\xd7\x91\xce\x3c\xd3\x42\x2b\xfa\xaf\xe6\xb4\x13\xb2\xcf\x9e\xde\xc9\xb9\xd0\xcb\x7f\xa3\xee\xa0\xe2\x4e\x3d\x08\xb4\x5d\xcd\x59\x44\x28\x2a\xf5\x42\x83\xef\x6b\x06\x16\x47\xef\xe4\x5a\xda\xe1\xdd\x13\x2f\x6c\x72\x9d\xb2\x8b\x46\x5b\xbb\x68\x13\x44\x15\x89\x5d\x1a\xb3\x53\xbc\xdb\xf9\x81\xee\x6a\x4e\x3e\x03\x00\x00\xff\xff\xc8\xe2\x07\x84\xa6\x07\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x09\x8e\x2b\x29\x0c\xbd\x92\x17\x8c\xcd\x71\x28\x96\xfb\x1f\x61\x64\x43\xa5\x2a\xcb\xef\xce\x48\x7f\x34\x1d\xb5\x94\x72\x81\x97\xe7\xf7\x0c\xc9\xe0\x9f\x04\x42\x19\x20\x71\x46\xc8\x08\xa0\x53\x34\xf3\xdc\x7f\x19\x06\x64\x00\x82\x9a\x01\x80\x05\x12\xe6\xcc\xa4\xad\xe8\xac\x62\x88\xc9\xf7\x58\x12\x35\xc8\xcc\x58\x54\xa5\xa5\x65\xad\xb2\xac\xd2\x93\x8a\xda\x5c\xd6\xb6\xd7\xca\x80\x66\xdd\x2c\xac\x08\xbc\xac\xb9\x48\x4a\x7a\xb4\x65\xcd\xb4\xac\x45\xab\x74\x39\x64\x59\xcb\xf6\x5b\xe7\xec\xb3\xe3\x78\x5e\xdb\x32\x27\xc9\x94\x97\xf5\xd8\xd1\x66\x1b\xd8\x5a\xab\x61\xa5\x54\x45\xe5\xf0\x8a\x0c\x66\x97\x83\x13\x4a\xd4\xe1\xb5\x3f\xac\x51\x03\x67\x00\xcc\x50\x37\x0a\xc0\x81\x95\x60\x76\x3f\x5a\x24\xcb\x01\x70\x79\x38\xe0\x5f\x79\x60\x03\xf7\x70\xee\x6e\x6f\xf1\xc7\x8f\xbb\xdb\xf4\xdd\xd1\x43\x2c\x88\x82\x62\x24\x74\x75\x0f\x73\x06\x02\x23\x40\xef\x71\x82\x02\xe6\xf8\x81\xa0\x41\x41\xe0\x02\x93\x1f\xd1\x11\xc6\xc7\xdc\x93\x01\xcb\x6b\x16\x98\x8b\x73\x27\x65\xa0\x78\x7f\x7a\x36\x06\x64\x31\xf0\xb8\x19\x70\x7a\x6c\xc3\xe2\x5e\x10\xc8\x7d\x44\xae\xb1\x7a\x71\xcf\xd0\x50\xa8\x50\xc1\x12\xbb\x2c\x01\x1a\x1b\x1b\x18\x59\x62\x15\x28\xa9\x64\x71\x6e\x72\xd7\x22\x02\xb7\xcf\x85\x1d\xe6\xfe\x92\x3d\x1a\xfe\x80\x9d\x18\xde\xb0\x83\xc0\x2e\x50\x22\x38\xb3\xfc\x84\x51\x7d\xeb\xef\x8f\x1d\x12\xd3\x7b\x8e\xc7\x6b\x7f\xb1\xff\xb4\x3b\x43\xbd\x72\x0c\x6c\xc0\xfb\x6b\x1b\x3f\xe3\xc0\x0e\xaf\xbc\x0b\x0a\x58\xd4\xb3\x9f\x7d\x07\x9b\xfb\x04\x39\x7c\x3d\x42\x64\x42\x30\x5d\x17\xc1\x0c\xf7\xb3\x19\x12\xb5\x23\xe0\x8c\xac\x4f\x94\x4b\xfc\xaf\xfe\x7a\x4f\x31\xdb\xf6\xc2\x6d\x7b\x71\x1e\x07\xda\x1e\x8b\x00\x38\xf8\x04\xc1\x94\x82\xf9\x39\x43\xf7\x5c\x68\xf9\xfe\x23\xd2\x24\xf2\x82\x15\x49\x77\x4c\xba\xde\x31\x79\xc6\xae\x40\xc1\x7b\xb4\x77\xef\x81\x44\xe2\x37\xd4\xbd\x3e\xcc\xbe\x7b\x4d\x88\x92\xee\xd1\x19\xde\xf9\x7f\xcd\x1f\xf3\xf9\x09\x57\x97\x4e\xb5\xf9\xd3\x63\x7a\x3e\x34\x69\xc9\x17\xad\x1c\x3f\x65\x1f\x8a\x3b\xfb\x91\x00\x97\x92\x56\x1d\xc6\xc0\xc1\x6a\x30\x35\xe0\xc3\x59\xeb\xd9\x8e\xe3\x15\xab\x96\xa5\x02\x4f\x3c\x57\xcc\x76\x5f\xf1\x8c\xbd\xf3\x45\x60\xaf\x64\xc4\x27\x5f\x8f\xe8\x97\x66\xfd\x5b\x64\x1f\xec\x7a\xaf\xc3\x2b\xbc\xea\x23\x10\x22\xdf\xe3\x78\x20\x70\xca\xae\xf5\x93\x9f\xde\xd1\x91\x17\xdb\xec\x03\xca\x3a\xb5\x8c\x3e\xd8\xb8\xb4\xae\x55\xbb\x1d\x5d\x75\x14\x1d\xd2\xac\xf8\x00\x98\x23\x4d\xcd\xad\x1f\xc7\xa8\x95\x73\xca\x29\x0f\xb2\x6a\xb9\x48\x55\xb3\x74\x76\xe2\xce\x84\x4a\x7b\x76\x7c\x88\xf8\xce\x0d\xe7\xc4\x89\xce\x8b\xfe\xe3\x9b\x24\x7d\x74\xf7\xb7\x3f\x57\xc3\x5b\xdf\xa9\x40\x21\x67\x5f\x30\x40\x0b\x88\x2c\x8e\xbb\x77\x57\x4c\xc1\xf3\xf9\x37\xee\x9a\x23\x9a\x40\x44\x05\xbe\xaf\x4e\x4e\x26\x25\x7c\xad\xef\xb9\xb3\x84\x19\xc5\xd5\x1f\x9d\x4b\x54\x3c\x4e\xac\x47\x41\xc4\xcb\x0f\x7f\xa1\x9f\xf3\xac\x5f\xf3\xe9\x7f\xd4\x4f\xb2\xdf\xf4\x93\xca\xb7\xfa\x49\x07\xfe\x86\xa0\xbf\x7d\x68\x68\x2b\x64\xe9\x8a\xc0\x70\xeb\x24\xf5\xfa\x47\x9d\xbc\xcd\xbd\xd0\xc9\xa8\x48\x5d\x58\x4b\xaf\xa9\x1c\x92\x91\x95\x49\xe7\xe0\x54\xdb\x68\xc3\xa4\x8e\x62\xb5\x8d\xd9\x6c\xb4\x59\x86\xcd\xc9\x59\x8c\x80\xa0\x1f\x26\x46\xff\xc1\x39\x23\x89\x7f\x38\x67\x84\x8e\xaf\xce\x19\x51\xf8\xbb\xe7\x4c\xa5\xf3\xf6\xb0\xd8\x1b\x83\x64\xeb\xed\x33\x57\xcf\x3b\xac\xcf\x93\x8b\xab\xe9\xaf\x73\x35\x05\xae\x7f\x64\xaa\x8c\xd7\xfb\xc7\x2b\x53\x65\xe2\xcf\x4c\x5d\xf8\x9c\xac\xdd\xd3\xe5\x3e\x65\xfc\x67\x00\x65\x04\xcd\x69\xa3\xb2\xf2\xf8\x30\x39\xde\x2d\xb7\x0e\xc0\xfd\x1c\x86\x60\x95\xa4\xe8\x5d\x74\xd0\x27\xc9\xee\x1e\x6d\x5f\x14\xf7\xc4\xe8\x3d\x6c\x1e\x16\x9f\x66\x4f\xa7\xf9\xd3\xdd\x11\xd6\xbd\xd1\x6e\xdc\x34\xfa\x36\x4e\xd8\x73\x3b\xe2\x17\x82\xf3\x2d\x54\x16\x13\x3e\xd6\xc7\xe9\x96\x3c\xbe\x9f\x72\x0f\x2d\xe2\xde\x95\xe5\xf0\xde\xad\x7b\x2b\xc0\x8a\xbf\x2a\x2d\xae\x02\x94\x14\x37\xdb\xe0\x13\xdc\x90\x37\xc6\xf0\x51\x87\xa8\x79\x2e\xbc\xd9\x1e\xde\x2e\x3d\x6c\x45\x44\x9f\xae\xf9\xff\x11\xf3\xc8\xe5\xbb\xba\x3f\x65\x7b\x21\xbe\x6f\xea\x58\xc8\xe7\xc1\xc6\x44\xc9\xb9\x1f\x1c\x5f\x27\x98\xdf\xce\x01\x51\xcd\x0f\x2a\x04\x95\x74\x66\x10\xbd\xf6\x99\x21\x22\x46\x78\xbe\xd5\x82\xc1\x73\x5f\x83\x7e\x50\x9c\x76\x23\x41\x23\x91\x0b\xdd\x1b\x5e\x08\xca\x65\xab\xd4\xf9\x18\xdd\x5e\xdf\x75\xcf\xc2\x53\xb9\xef\xb7\x94\x7d\x43\x89\x0e\x6c\x5e\x6b\x59\x68\x1e\x3e\x4b\xce\x2c\xf2\xa9\x28\x14\x59\x91\xc3\x7f\xf3\x3d\xbe\x13\xa0\x62\x96\x4c\x5a\xb5\x2a\x31\xf8\xc4\x14\xcc\x73\x60\x1e\xca\xda\x3a\x0c\x22\xee\xb5\x26\x24\x4e\x9d\x15\xb0\x70\x1a\x50\x8f\x63\x72\xea\xd6\x66\x92\x26\x03\x6d\xc2\x94\xc1\xaa\x35\x91\xb7\xe2\x9f\x00\x00\x00\xff\xff\xef\x32\x0d\xde\x7e\x0f\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x6f\xa3\x3c\x10\xfd\x2f\x3e\x73\xea\xf7\x6d\xb5\xca\xad\xad\xd4\xd5\x1e\xb6\x95\xda\x74\xf7\x50\x55\xd5\x00\x93\xc4\x92\xb1\x91\x3d\x26\x65\xab\xfe\xf7\x15\x84\x40\xb2\xc5\x18\x36\x24\xe4\x94\x48\x3c\x9b\x79\xe3\xe7\x37\x8f\xe7\x77\x16\x29\x69\x08\x24\xb1\x19\x69\x8b\x01\xe3\x32\xb5\x64\xd8\xec\xf9\x25\x60\x12\x12\x64\xb3\xcd\x4f\xc0\x94\xa5\xea\xd1\xfb\xf6\x09\x0b\x18\xe5\x69\xf1\xcf\x90\xe6\x72\xc9\x3e\x5e\x02\x96\x42\x0e\xa1\x40\x36\x5b\x80\x30\x18\x30\x43\x40\xf8\xc3\x12\x84\x5c\x70\xca\xd9\x8c\xa5\x56\x63\xb3\x74\x61\x65\x44\x5c\x49\xf6\x11\xec\x96\x53\xad\xae\xeb\xa9\x5f\xfa\xaa\x31\xe2\x98\xa1\x6e\xb6\x80\x38\xd6\x68\x4c\xb9\xc3\x16\x05\x89\xb2\x92\x1a\x8c\xe5\x92\x2e\xbe\x5c\x96\x25\x56\x18\x48\x53\xad\x32\x07\x37\x63\xa3\xa8\xd8\xb3\xde\x20\x54\x4a\xf4\x24\x28\x95\xdc\x82\x8e\x4d\x53\xf0\x84\xb7\xb1\xdc\x81\x44\x1a\x63\x4e\xdf\xb4\x5a\xd3\xea\x01\x08\xf7\xd1\x97\xff\xef\x81\xf1\x2d\xe5\xba\x05\xd2\x74\xcd\xac\x40\xe3\x5c\xed\x75\x6d\xec\xae\x38\xb5\x48\x8a\x40\x3c\xda\x34\x15\xb9\x4f\x92\xbb\x07\xee\x2f\x2e\xe3\xb8\x3e\xe0\xb0\x22\x25\x49\x43\x44\x57\x71\xec\x39\x30\x89\xeb\xfb\xb5\x6c\x3d\xd6\x9d\x1e\x23\xdd\x55\xb8\x5b\xa5\x6f\xaa\xcd\x8f\xda\x72\x37\xb7\x85\x56\x49\x37\x27\x52\x07\xdf\x45\xd2\x20\xcd\x02\xf5\xed\xe6\x65\xd3\x5d\x48\xa7\xf4\x62\x8c\x78\x02\xc2\xf4\xd1\xdd\xd7\xd3\x38\x61\x7f\xd5\xa9\x3e\x92\x3b\x13\xbd\xf9\x6b\xb5\x69\x0c\x84\xd7\x20\x40\x46\xde\xd1\x34\xcc\x07\x46\x61\x10\x81\x10\x3e\xe3\x2e\x31\x78\xf0\xbd\x29\xca\xb1\xae\xf9\xfc\x5a\x3d\x75\x74\xf3\x98\xf7\x66\x88\x7d\x74\x4c\xba\x86\xe8\x12\xe9\x2a\x03\x2e\x8a\x62\x6e\xca\x89\xd6\xeb\x26\x8e\x3c\x01\x5c\x2c\x33\xd4\xa6\x40\x77\x1d\x55\xc8\x35\xad\x7e\x71\x5a\xfd\x2c\xa9\x4e\x5c\x7a\x53\x97\x40\xb9\xa4\xd5\xfd\xe2\x01\x33\x5e\x90\x98\xa2\xaf\x63\x78\xdc\x68\xb9\xb0\x34\xa0\xab\x33\x08\x87\xce\x3b\xe5\xb7\xc8\x70\x63\x8e\xf7\x8b\x76\x02\x61\xed\x9d\x13\x08\xce\xe4\x49\xa8\xc4\xe9\x3f\x29\x5c\xed\xdc\x39\xc6\x9c\xd0\xfc\x77\xf1\x29\xee\xc6\x9d\x8e\xe3\xcf\xe0\xae\x54\xdd\x20\x86\x84\xf4\x0d\xd6\x3c\x19\x8c\x3b\xdf\x6a\x24\xa4\x73\x9e\xb4\xa7\xf9\x63\x1f\xf2\xd3\xdd\xf7\x79\x1f\x23\x19\xb7\x9c\x13\x7c\x35\x46\x2b\xd0\x4b\x9c\x28\x1b\x8d\x98\xb4\xcf\xd2\xd9\xfa\xcc\x51\xe2\x09\x4e\x37\x46\xdd\x67\x93\x29\x2a\x0c\xab\xcb\x95\xb9\xe4\xc4\x41\xf0\xdf\x53\xe9\xa7\xcc\x20\x9d\xdd\x35\x48\x55\xb0\xbe\xae\xb0\x27\xfb\xcc\xf7\xcf\xb7\x1d\xa5\x9b\x14\x65\xec\x19\x82\x20\x84\x5a\xbb\xbf\x11\x34\x26\xc0\xe5\xde\x99\x9d\x72\x0c\xd6\x7a\xe9\x94\xf0\xb0\xc0\xde\x51\x11\x48\x25\xf3\x44\x59\xd3\xa6\x0f\x2e\x63\x7c\xc3\x78\x5b\xad\x3f\xbb\x3b\x16\xb8\xfc\xa9\x86\x57\xaf\xae\xef\x0c\x08\xeb\x48\x21\x15\x64\xde\xd8\x55\x05\xc2\x0c\x25\xfd\x33\xa5\x0e\x69\x39\x56\xb8\x95\x76\x10\xb1\x4d\xc0\x04\x31\x12\x31\x7c\xc3\xc8\x92\x1a\x56\x26\x7d\x4a\x07\xdb\x08\xe1\x58\xe0\xf7\x8f\xc7\x4f\xfe\x31\x06\xbb\xa1\x42\x1c\xaa\xc3\x8e\x08\xe7\x58\xd2\x1d\xd8\x3c\x8b\xdb\xf2\xe0\xdf\x7d\x2c\x72\xe7\xed\x1e\xed\xaa\x83\x2f\x7f\x02\x00\x00\xff\xff\xc1\xc4\xc8\x4b\xb7\x17\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x0b\x92\xf3\xaa\x8e\xde\x92\x1e\x08\xc4\x72\x00\xc3\xfe\x97\x30\x25\x81\x13\xc7\x76\xd2\xc9\x3d\x33\xb7\x4e\xd5\x74\xea\x7f\x34\xc6\x20\x09\xe9\xd3\x27\x91\x08\xf6\x09\x20\x14\x01\x02\x47\x84\x88\x80\x34\x24\x45\x1e\xeb\x27\x42\x87\x08\x40\x50\x22\x00\xb0\x40\xc0\x18\x19\xe2\xd8\xb6\x0e\xac\x88\xc1\xde\xe1\x20\x49\x21\x32\x64\xe9\x25\x55\x9e\xa3\xb5\xaf\xd1\xce\x9d\xb4\xad\xb9\x63\xcd\x45\xc5\x08\xdb\xb6\xf9\x28\x51\x9d\xa3\xc4\x98\x49\xd6\x5c\x12\xd8\x47\xab\x26\xda\xe7\x26\x99\xa3\x8c\xdc\xba\xc4\x34\x47\xf3\xb6\x46\xe3\x80\xa0\x69\xca\x40\x2d\xce\xd1\x00\x55\x03\x48\x99\xa3\x7d\xed\x16\x5a\xc9\x92\x0b\xf8\x28\x43\x99\xa3\x12\x43\x06\xe1\x31\x47\xc3\xd2\x42\xba\x50\x81\x34\x25\xe3\xc4\x73\x34\x6e\xc4\x54\xca\x94\x81\x35\xef\xa3\x21\x82\xb4\xb5\x42\x6e\x73\x34\x41\x01\x25\x5e\x2b\xb4\x65\x87\x2c\x9b\xe6\x1a\xd6\x68\x5f\xeb\xe6\x3c\x00\x42\x58\x2b\x8c\xa5\x45\xde\xb4\x13\xa6\xb9\x5b\x08\x4b\x8b\xc2\x63\x94\xdc\xa6\x75\x42\xda\x47\x33\x48\x6e\xb5\xce\xd1\xdd\x3a\x35\xb5\x8e\x5b\x98\x76\x08\x75\xcc\xd1\x16\xb6\x18\xb7\xae\x73\x74\x5b\xf6\x6d\x52\xe3\xc0\x2c\x73\x74\x3f\xb7\x6d\x8b\xd4\x37\xee\x3e\x2a\xbb\xcd\x46\xeb\xd8\x5a\x9b\xeb\x8a\xf9\x90\x54\xf3\x18\x85\xb1\x49\xe5\x80\xe2\x7e\x62\xbe\xf5\x18\xb5\x91\x90\x6c\x7e\x20\x89\x36\x3f\x80\x60\x04\x02\x05\x25\x21\xc5\x0c\x8a\x80\xca\x8a\x8a\x62\x7f\xc8\x9e\x02\x66\x14\x50\x10\xcc\xb0\x7e\xb7\x37\x58\xd9\xd6\x96\x6a\xf3\x11\xe6\x8e\xea\xf6\x54\x02\x7b\x9f\xfd\xdf\xb5\x86\x3d\x8d\xd5\xf6\x15\x98\x9f\xec\x7f\x6c\x47\x5b\x17\x07\x46\x5d\xab\x54\x58\xab\xb0\xba\x84\xb6\xae\xaf\x62\x41\x83\x00\x50\x80\x31\x63\x7c\x95\xd0\x56\xce\x34\xd7\x9e\xba\x29\x64\xf3\x07\x18\xfc\xb4\x49\xcb\x67\x9b\x78\xc4\x61\x84\xb2\x22\x0f\xd8\xe3\x53\x30\x46\xa0\xc0\xf6\x96\x68\x78\x5a\x2c\x9b\x72\xf2\xdc\xfb\xfd\x5e\xe3\x6c\x7f\xa2\xfc\xc7\x5e\x69\x9c\x7e\x22\x84\xc0\xa2\x88\xd1\xac\x14\xe7\x5c\x04\x19\x60\x12\x99\xfd\xd7\x6e\xc4\xf1\xbc\x1b\xf7\x88\x90\x2a\x1c\x65\xff\x42\x6e\x92\xfa\xad\xdc\xbb\x5c\xb4\xcb\x95\xaa\xd8\x6e\xfb\x4a\x0a\xdf\x5a\xfb\xb4\x92\x6b\x1d\x11\xd4\x16\x7a\xae\x57\xf4\x2c\x59\x35\x14\x2d\x4d\x8e\x1e\x3d\x46\x86\x8c\x47\xff\x78\xaf\xeb\x86\xff\xb1\xae\xa5\x95\xa3\x6c\xe3\xce\xfe\xef\x4e\x1b\xa1\xc6\xed\xf0\x36\xa3\x9c\xde\x66\xa6\x9f\x2c\xb5\x61\x3c\xda\xe0\xf5\xcd\xaf\xed\xc1\x72\x8e\x8f\xb7\x5a\x5c\xec\xd1\xa9\x1e\x35\x4a\xfd\x76\xa5\x29\xed\xe0\x71\x9c\x9b\xc3\xad\xef\x8e\x7c\x3c\x7d\x2e\xe9\x1f\x7a\xd3\xc8\xe9\xb8\x5e\xbb\xc4\xe7\xa7\x13\x33\x18\x38\xbe\xdd\xcf\xfa\x39\xba\x22\xe9\xd1\x0a\x01\xce\xfe\x15\xa0\xed\x56\x40\x6a\xed\x10\x9b\x41\x45\xe8\x8a\x00\x99\x35\x38\x3e\x80\x46\xc3\xd3\x8c\xca\xae\x93\xa1\x70\x34\xec\xb3\xd3\xb5\x93\x8d\xa0\xf2\xfc\xdd\x4e\x3c\x3a\x52\x4f\x14\x2e\x60\xe3\x86\xb6\xb7\x27\x6f\x08\x77\x92\x54\x7a\x44\x64\x18\x07\xbf\xba\x4a\xf7\xad\x67\x05\xbd\xc4\xc7\x9f\x68\x88\xc8\xf8\x62\xcd\x4b\xfc\x7f\x81\xde\xc8\x29\x1f\xd7\x68\xe5\xbd\x5f\xa2\xf0\xd1\x43\x42\x3f\xe3\xd7\x27\x99\x11\x45\x8f\x1e\x12\xde\xe0\xff\xda\x69\x3b\xee\x24\x97\xf8\xff\x3a\xee\x30\xbd\xc4\x9d\xf0\x59\x3f\x43\x12\x44\xdb\x2d\xfa\xef\x12\x4a\x44\x54\xd0\xfd\x5c\x75\x65\x86\x75\x7a\x86\x3b\xc5\x4e\x34\x0d\x89\x41\x24\x90\x39\x47\x8f\x92\x28\xa6\x94\xe1\x87\x1f\xf7\x5a\x67\x01\x96\xed\xa5\xe6\x95\x8b\x5e\xf5\x62\x63\x10\xd1\x65\x5e\xac\x03\xdc\x9b\xf6\x6c\xe5\x9e\xce\x04\x39\x68\x32\x96\xa0\x41\x28\x87\xe9\xe5\xc6\x13\x08\x54\x32\x88\x64\xc8\x64\xde\x9f\x86\x36\xa9\x1d\xbb\xf4\xda\x5b\xda\xa4\x6e\x18\x46\xc2\x40\x69\xc3\xae\x61\xf0\xb6\x01\x63\x68\x30\x52\x25\xca\xd8\xa5\x12\x40\x69\xda\x52\xe3\x9a\x49\xf2\x5c\xf1\x43\xbe\x2c\x2c\xee\x79\xb6\xa3\x73\x8e\xb8\x33\x30\xcf\xce\x8d\xd9\x6c\x1e\x3d\x2f\x19\x5f\x30\xba\x0f\x67\xfc\xb2\x04\x17\x8f\xf3\x7c\xec\xe5\xfc\xc2\x0d\x22\x18\x1e\xa0\x31\xaa\xc8\x2f\xfe\xc9\xec\x4c\x4d\xce\xf6\xc5\xa8\x97\x5c\x62\xa1\x9c\x8d\x59\x32\x50\x87\x38\xda\xc0\x36\x7a\x14\x66\xe0\x4e\xbd\xd4\xa8\xbd\x0f\x69\x38\x28\x65\xc4\x51\xf2\x96\xc3\x20\x0d\xa0\xa3\xe7\x20\x34\x92\x6a\xb2\xcf\x42\x2f\x52\xbe\x45\x2f\x54\x5a\xe8\x65\x58\x48\x0f\xe4\xe2\x57\xe4\xba\x62\x53\x31\x1e\x1a\x17\xee\x34\xe7\x7d\x6f\x7c\xec\x94\xeb\x1c\x2f\xd5\xd8\x07\x89\xfb\x43\x26\xa3\xb9\x11\x30\x3c\x18\xa9\x9e\xcf\x93\x9c\x8f\xce\x75\xc2\x4b\x3c\x4c\x1f\xd0\x68\xab\xdd\x9c\x05\x68\x5c\xfa\xbd\xa0\xaf\x26\xd3\x5b\xd9\xc6\xdc\xa3\x61\xc7\x67\xe3\xd9\x42\x81\xa6\x5c\x71\xbd\x27\xa4\xc1\x77\x00\xb0\x72\xc8\x7c\x7a\x72\x70\x79\xc4\xd0\x64\xc2\x04\xa8\x20\xe1\x2a\x89\x31\xe2\x1b\xfb\xaf\x7d\xa6\x5c\x98\x2c\x4e\xfc\x04\x26\x47\xf7\x35\x4d\x4f\x53\x63\x72\x6b\x45\x09\x7a\x83\xf4\x40\xb6\x43\x06\xe5\x9b\xbd\x23\xd0\x5c\x5b\xa6\x9e\xcf\xd5\xed\x7f\xe2\x5a\xee\x3a\xf0\x94\xe5\x47\x3d\x2e\x5a\xec\x75\xc4\xfa\xac\xf8\x5b\x08\x63\x4c\xb4\x2b\x5d\x62\x30\x5d\xf8\x7f\xda\x48\xf1\x14\x83\x69\x6b\x2f\xb3\x4e\x1e\xa6\xb4\xe3\xd5\x8e\x0f\xe0\xf5\xc9\xc4\x2a\xf3\x25\x09\x4c\xea\xf2\x62\xc4\x89\xcb\xca\x9b\xaf\xf9\xe3\x4a\x66\xa3\xc4\x67\x6b\xbc\xfb\xf1\x13\x72\x7e\xf0\x62\xa9\x7a\x42\xa8\x1d\xa7\x54\x40\xd3\x49\x77\x5d\xbc\xed\x55\x4e\x50\xfd\x45\xe3\xc3\x3a\x4f\x4b\x1b\x5e\x9c\xd1\x4e\xf3\x99\x1f\x69\x2e\x26\xd3\xce\x8f\xad\xa2\xb3\xd1\x22\x7a\x60\xcd\x8e\x73\x41\xd9\xea\xce\x55\x35\x6a\x13\x49\x02\x76\x96\xa0\xcd\xb0\xe3\xd8\x57\x41\x4c\x5a\x27\x43\x46\x94\xba\xbf\x33\x92\xbd\xf3\x85\xb6\xf7\xf9\x88\xb5\x58\x8c\x0b\x59\x94\x59\xcc\x4a\xb0\xbc\x61\x52\x2d\xfd\x4a\x8d\x37\xd6\x4c\xa7\xd5\xf1\x6c\xcb\x88\x30\xb3\x50\x7c\xd5\x21\x97\x9d\xe5\x5f\x24\xce\xef\xd7\x9c\x39\x32\x5b\x15\xc0\x96\x25\x4d\x3b\x9b\xb5\xef\x24\xe5\xba\xd3\x6e\xad\xf7\xb6\x79\xe4\x6a\xbc\xb5\x8d\x65\x63\x11\xc9\x64\x2b\xed\x56\x34\x5b\x29\x2b\x12\x64\x7f\x3b\x1f\xa4\xc8\xdb\x3f\xd2\xf7\xdd\x09\xd5\xd3\x09\xd9\xa9\xe4\xd6\x2e\x9e\x58\x62\x74\xff\x09\x97\xbd\x2c\x42\xb9\x41\xef\x50\xb5\x30\xab\xfb\x2b\xef\x99\xe9\xd9\xb1\x7b\x48\x6e\xe7\x0b\xf4\xb4\xce\x61\x2d\xe7\xa5\xe0\x79\xe8\xc1\x2d\xfc\x37\xe7\x1b\xb4\x7a\x84\xc1\xb3\xe3\x7a\x1e\xfd\x37\xf5\xac\x60\x31\x1d\x3d\x93\x6a\xd0\x60\xe7\xaa\x81\x93\xaf\xe6\x2c\x24\xbf\xa0\xe2\xcc\x3a\x33\xcb\x29\x9b\x26\x7e\x6e\x49\x81\x77\x3c\x2c\x72\xa9\x7f\x5b\x94\x02\x3c\x70\x9f\x11\xe9\x38\x63\xad\x5d\x6f\x59\xc6\xc5\xd3\x2d\x8d\x6c\xdb\x20\xa1\xb2\x61\xed\xd4\x34\xd7\x98\x9b\x55\xed\x3a\x1a\x27\xdd\x4a\xc9\x42\xb5\xa4\x81\x91\x5b\x28\x88\x91\x74\x88\x94\xb0\x0d\x21\xae\xdc\xc7\x83\x61\x7c\xe0\x62\xce\xc4\xd8\x91\xa2\xd4\xfa\xc8\x05\x3c\xbb\x42\x6e\x19\xde\x7b\x43\xf3\x29\xd2\xcc\x14\x7c\x89\x7e\x8c\xcc\xd7\x31\x43\xf1\x69\x8f\x7e\xe6\xd7\x65\xf0\x4d\xa6\x29\xe3\x8c\x7f\x15\xd2\x25\xd3\x18\x1a\x7d\xca\x34\x30\x6b\xbd\x4f\xb8\x8b\x71\xed\x78\x9b\x61\x76\xfe\xf5\xbf\x9b\x61\x66\x36\x5e\xd9\xe5\x2e\x3e\xcf\x59\x6d\xf6\x19\x31\xef\x88\x44\x76\x8a\xc6\x33\x32\xdc\xb1\x89\xa5\x51\xdd\xf8\x06\x3d\xcf\x16\x39\xad\x6d\x31\x62\xab\xbf\x67\x17\x77\x9c\xfa\xa1\x8d\x9f\xd4\xd6\x94\x9f\x15\xff\x45\x82\x70\x87\x80\x4f\x8b\x2e\x0e\x68\x1a\x34\xa0\xec\xee\x83\xa9\xb4\x4f\x6b\x7d\xa3\x4d\xba\x48\x7d\xfe\x39\x73\x63\xe7\x52\x7a\xe5\xce\xf1\xcf\x73\x9e\xd9\x02\xe3\xe4\x8f\x40\x3b\x9f\xf8\xdd\xa2\x66\x05\xb3\xe6\xde\xcd\xc9\x0b\x99\x14\x11\xfd\x94\xdb\x08\xff\xec\x94\xff\xb6\xcb\x55\xb6\x74\x63\x95\xbf\xab\x59\xb3\xa8\xa1\xef\x47\x06\x7c\x3d\xe3\x5b\x5d\x8e\x31\xfc\xe8\x5f\x63\xbe\x61\x6a\x3f\x63\xd4\xc6\xed\x84\x3d\x5b\x88\x1a\x55\x9f\x5d\x3a\x43\xc3\xc9\xa0\xec\xe9\x36\x24\xa9\xec\x48\xfb\x7f\x57\x6d\x65\x3f\xc1\x59\x6f\xbd\x44\x50\x78\xb5\x88\xa1\x94\x7e\xac\x10\x3e\x7a\xdc\xac\x3a\x42\x86\xc5\x1e\xb7\x36\xb9\x94\xf3\x9a\x87\x75\xf9\xed\xde\x5e\xb3\xa8\x9c\x32\x0a\xc2\xd6\xf5\x85\x9b\x82\xdb\x70\xbf\xfd\xd8\xc6\xb9\xbe\xef\x86\xf8\x5f\x73\x9a\x33\xe7\x3c\x7b\x89\x08\xe4\x90\x25\x87\x6b\xd5\xb3\x7b\x8a\x1a\x60\xfd\x7b\xce\x10\xed\x0c\xcd\xbb\x4d\x66\x3f\x8b\x9b\x33\x0b\xb4\x70\xa0\xe7\x75\xef\xb0\xec\x3e\xd8\xed\x64\xf5\xe8\xe4\x8e\xb6\x96\xfb\x6b\xaf\x70\x37\x73\xaf\x8f\x7d\x3e\xcf\xf9\x36\x7b\x48\xbe\x89\xd8\x3b\x5c\xf4\xba\x34\x78\x87\xcd\xea\x88\xde\x73\xc6\x30\x3b\xa9\xb7\x67\x98\xe1\x75\xbc\x3d\xba\xf0\xbb\xbc\x9e\x09\x0c\xeb\x5c\x4e\x68\x92\x4c\x9f\x8b\xdc\xb4\xe4\xb6\x31\xce\xfe\xcc\xf9\x3f\xdf\xef\xab\x6c\x2b\xbf\x91\xe9\xc8\x7a\x4e\xdd\xa9\x38\x6f\xe2\x46\xa8\x4f\x3c\xb6\x2a\x74\x9d\xc0\x10\x3d\xb1\x11\xe3\x17\x13\x53\x46\xcc\xab\x56\x72\xe9\xb4\x3d\x7d\x4f\x82\x72\x7e\xe8\x98\x92\xa4\xd1\xdd\x36\xf6\xbe\x33\x36\xfb\x9f\xb1\x73\xf7\x38\x82\xd5\x75\x30\x1d\xbc\x2b\xf8\x82\x7a\x3e\xba\xcb\x8b\x30\x0a\x69\xb8\xb0\xab\x51\xb6\x53\xac\x8d\x1a\x95\x4f\xec\x6a\x34\xf8\x83\x5d\xc9\xaf\x75\xbc\x5f\xd8\xde\xd5\xc7\xf2\x65\x07\x53\xcf\x1d\xcc\x19\x4f\x7b\x0f\xf3\xbf\xd9\xbb\x74\x86\x83\xf3\x4e\x76\xde\xe5\x9e\x59\xf2\xef\xac\x4e\x3d\x9b\xb9\x2f\xdf\xc4\xba\x92\xc2\xf1\x63\x12\x78\xa4\xed\xdc\xc0\x2a\x30\xb5\x9a\xde\x9f\x74\xaf\xc8\xd2\x5e\x4d\x1b\x14\x4b\xd2\x9c\x8b\x45\x0f\x52\xba\x67\x54\xed\x3b\xe6\x20\xe1\x0e\x01\x14\x21\xfc\xcd\x8e\x30\x9a\xa4\xff\x09\x87\xc8\x86\x93\x37\x96\xb1\xca\xcd\xf2\x33\x22\xf6\xc5\x33\x8a\x9f\xd0\xba\x91\xb0\x08\x75\xab\x20\x6d\x7b\xcf\x42\x15\x58\x23\x86\x65\x1d\xd3\x30\xd9\xbf\x9a\xed\xef\xd4\x62\x82\xad\x43\x8d\x95\x4b\x8a\xc1\x91\xdf\xc6\xfd\xef\x68\x31\x85\x92\x02\xe9\x78\x83\x31\xed\x2d\xba\x39\x32\xba\x04\xdd\xef\xe4\xd7\x6d\xde\x79\xfe\xc0\xb5\xd2\xe5\xc9\xde\x5d\x78\x3d\x49\x9d\xb9\xad\x6a\x52\x99\x39\xd5\x9f\xb8\x4e\xc5\x32\xdb\x73\x27\xc7\x4f\xc4\x0a\x7a\xb8\xb5\x71\x4e\x23\x2a\x2b\x52\xc9\xef\xde\x10\xb1\xc5\x59\xad\x1e\xed\x69\xb8\x68\xcf\x46\xf9\xdb\x56\x7d\x9b\xb6\xd2\xf4\xd6\x56\xfa\xce\x56\x39\x2f\x0d\xf1\x91\xa1\xd4\xfb\x00\x4b\x46\xae\x2e\x23\x79\x8d\xf0\xa5\x1c\x81\x34\xbf\xc1\xfe\x2c\x70\x89\x0f\x44\x0a\xe9\xc6\x02\x30\x67\xc5\xfe\x83\x05\xe2\xa7\x9d\xa7\x7e\x19\x72\xb0\x6a\xdc\x3d\x32\x1c\xbf\xf1\x71\xfc\x1c\x30\x1f\x91\x7c\xf6\xe7\x1b\xa9\xb0\x6e\xa4\x42\xd0\x30\x84\x7e\x8d\xbb\x27\xf7\x39\xde\x48\x3d\x32\xcd\x83\xbb\xc0\x01\xb3\xf7\xea\xf8\x85\x57\xac\xbc\xee\x7d\x6c\xc8\xbc\xf8\xcd\xfd\xcd\x80\xd5\x4f\xfc\x86\x67\xf0\xe2\x19\x84\x51\x67\x0d\x7d\xb1\xbf\xee\x3e\xf3\x73\x05\x80\xcc\xa7\xfc\x88\x1c\x3c\x3f\x1e\xb9\xab\x8d\x8a\x2a\x9e\x59\xc6\xbb\xde\xdf\xac\x08\x3f\x71\xd4\x59\x2d\xae\xde\xfc\xa5\xdf\x8c\xac\xca\x7c\xee\xed\xa2\xf1\xcf\x53\x6f\xd7\xdf\x10\x73\x89\xa9\x4d\x99\xbd\xdd\xd5\xf1\xdd\xfb\xb7\xc8\x75\xec\x3d\x5f\xe4\xba\x7d\xee\xf9\xfa\x1b\x42\x37\xdd\x6d\xfe\xb3\x3e\xb3\xf5\xfb\x0f\xfd\x49\x7e\x93\x2b\xbf\xe9\xc7\x62\x20\xfa\xa1\x1f\xfb\x57\x2f\xd9\xb4\x0e\x21\x9c\xfb\x9d\x18\xb6\xfe\xff\xaf\xdf\x89\xe1\x72\xff\x73\xea\x77\x62\xd8\xca\xb7\xfd\xce\xbb\x08\xfc\xaf\xf7\x3b\x9f\x35\xc4\xb5\x1a\xda\x59\x9e\x04\xbe\xe3\xfb\x68\xd6\x7b\xc3\xf7\xed\xcf\x37\x7c\x1f\x25\x8e\xaf\xf8\x3e\xec\x7c\xff\x89\xfc\x3f\xa3\x9a\x94\x73\x7d\x22\xbf\x77\x2f\x2f\xa8\x76\x73\x43\xba\x74\x15\xc7\x79\xc8\x70\x95\xca\xf5\x7f\xdc\x76\xa1\x0c\x39\x5b\xd2\xac\x1c\xd1\x22\xe3\x84\xc4\x11\xca\xfb\x6e\x18\xc6\x9c\x9d\x11\x44\xda\xef\x7b\xf9\x99\xb3\x03\x2d\xde\xe0\xb3\xa6\x7f\xcf\xef\x47\x9a\xb7\xcb\xea\x45\xcc\x19\xc6\x2c\xbe\xab\xc3\x9c\x1b\x8b\xdc\x68\x69\xfe\x5c\xa1\x6d\x1c\x68\xab\x20\x6d\x93\xd6\x19\x2b\xd7\x8e\x4d\x99\x72\xd3\xd1\x53\x26\xca\x62\x05\x0f\x75\xda\x42\xaa\xdc\x92\x51\x8f\x0d\xa5\x23\x6e\x3d\x58\xfd\x36\x3d\x1a\xe7\x0d\xf7\x9e\x81\xf7\xdb\xf5\xd3\xbd\x3f\xad\x5e\xf6\xc1\xdf\xf6\x5e\x82\xe9\x55\xaa\xce\x7e\xbb\x62\x99\xf9\xe2\xb3\xdf\xdd\xf1\x89\x40\x7b\x6c\x79\x97\x29\x3a\xd6\xb8\x5f\x5e\x6f\xdd\xf7\x3b\xf2\xfd\xc6\xf9\xdf\x62\xa5\x77\x55\xda\x4d\xc7\xff\xcd\xdd\x98\x31\x35\x8c\x8f\x9e\xcf\xca\x40\x0f\x4e\x34\xbd\xff\x7c\xc7\x83\x2f\x79\xfd\xd2\xe7\x5c\xde\x97\x74\xdd\x6b\x4c\x9e\x0d\x1b\xc2\xce\x04\x57\x44\x55\xaf\x57\xf6\xb5\xbc\xff\xf1\xfc\x26\xb1\xd7\xa5\xee\xbd\xfb\xd3\x15\x1d\xa9\xc4\x39\x6e\xdc\xcd\xec\xf0\x40\xba\x3f\x63\xdf\xbf\x8f\x41\x1e\xad\xfe\x2d\x80\x7d\x95\x17\x19\x48\x79\xd5\x59\xa9\x7b\xbf\x43\xfd\x7b\x19\xba\x67\x87\xd4\xd7\xfe\x10\x66\xdd\x75\x23\xed\x7c\xe7\xf1\xc6\x18\xfb\x1b\xd9\xfb\x3e\xc7\xfa\x9a\x2e\xdf\x36\x99\x1c\x54\x27\x3f\x5d\xdd\x2f\x63\x68\x22\x8a\xbe\xa6\xc5\x80\x86\x79\xab\x6c\xf2\xe2\xfa\x97\x2f\x51\x80\x33\x4f\xc2\x7a\xc3\xce\xd8\xff\x77\xfc\x16\xf6\xfa\x46\x98\xfa\xf7\x56\x8c\x57\x3d\x2d\xfd\xcc\x94\x4a\xde\x53\x9d\x1c\x78\x75\x57\x6d\x25\x53\x10\xc0\x29\x10\xa5\x92\x4a\x22\x06\x31\xc0\x2a\x8d\x5b\xaa\x44\x2d\x08\x65\x52\xe0\x50\x01\x62\x08\x1b\x96\x58\x81\x28\x40\x69\x9c\x35\x72\x96\x14\x00\x99\x6a\xd1\x5c\x41\x35\x34\xdc\x92\x49\x9f\xff\x27\x00\x00\xff\xff\x90\x2e\xc7\xef\x2e\x31\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x4f\xf3\x30\x0c\xc6\xbf\x8b\xcf\x39\xbd\xd2\xcb\xa1\x5f\x80\x03\xe2\xc4\x71\xaa\x2a\x6f\xf5\x26\x8b\xcc\xa9\x1a\x27\x10\xa6\x7e\x77\xd4\xad\x4d\x27\xb4\x11\xfe\x08\xc1\x31\xf1\x63\xfb\x17\xeb\x71\x56\x07\xd8\x38\xf1\x8a\xa2\x50\x6d\xd1\x7a\x32\xc0\xd2\x05\xf5\x50\xad\x0e\x20\xb8\x27\xa8\xe0\x91\x12\x18\xd0\xd4\x8d\x07\xaf\x3d\xcb\x0e\x06\x93\xc3\x11\x6d\xa0\x45\xc0\xa2\xff\xfe\xdf\xc0\x50\x9b\x59\x20\xa8\x1c\xe9\x81\x14\x0c\xb8\xa0\x53\xf9\xda\x40\x87\x09\xd7\x96\x72\x6b\xaf\xa8\x74\x1f\x14\xd7\x6c\x59\xd3\x98\xea\x64\x16\xe5\x06\xdb\x20\x1b\x65\x27\x47\x86\x0f\xe0\x37\x05\xfe\xa6\xf8\x00\xff\x6b\xe8\xd1\xe9\x48\x9b\x0b\x60\xdb\xf6\xe4\xfd\x39\x5c\xc3\xc2\xca\x68\xf9\x85\x7e\x14\x52\xfb\xf0\x89\xf1\x2e\x7c\xbb\x37\xc3\xcb\x89\x17\x27\x5e\x46\x8e\x4c\x4f\x5f\x86\x2d\xb0\x9e\x9c\x7a\xfb\x07\x88\x17\xa6\x6c\x81\x77\x81\xce\x8d\xf1\x2d\x22\x14\x27\x69\xef\x82\xbf\x64\x4b\x96\x96\x9e\xa9\x9d\x69\x17\x07\x1e\xaf\xef\xae\xec\x59\xce\x9a\x0a\x96\xf6\xf2\x9a\xbe\xb8\xa7\xa7\x2f\x66\x0a\x53\x24\x51\x18\xea\xd7\x00\x00\x00\xff\xff\x10\x32\xaa\x1a\xe4\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x01\x92\xe3\x36\x0c\xfb\x12\x48\x8a\x14\xf9\x1c\xc9\x96\xfe\xff\x84\x0e\x65\x3b\x76\x93\x9d\xbd\xed\x4d\xdb\xb9\x64\x76\xe2\x70\x25\x1a\x20\x20\x38\x86\x7c\x17\x28\x1b\x50\xc4\x08\x46\x80\x0e\xad\x26\xf3\x7c\x19\x06\x0c\x60\x34\x03\x20\x8a\x42\x66\x42\xb6\xa1\xce\xb2\x3b\x51\xc9\x3d\x26\x5a\x1d\x26\x3c\xa6\xf7\x56\xcb\x51\xed\x7e\x54\x85\xa2\x56\xdd\x8e\x2a\xa1\x1f\x55\x0b\x19\x9b\xeb\x38\xaa\xdc\x8e\x6a\xdb\xa6\xe8\xa8\xf5\xa8\xfa\x7e\x54\xe7\x36\x68\xdb\xb6\x76\x54\xf7\xa1\x55\x7b\xe2\x71\xcc\x5d\xbb\x14\xd2\x85\x22\x91\xbf\xaa\x0b\x81\x25\x33\x03\x17\x27\x51\x27\x27\x50\xc0\x05\xf9\x0d\x06\x86\x81\xa6\x33\xc8\x29\x80\xe2\x04\x06\xad\x99\xe4\x3a\x3a\xaf\x39\x77\x2a\x07\x07\xc5\xda\xe5\x05\xe4\xe2\xe2\x70\xf6\x22\x55\x11\x25\x4c\xa1\x08\x11\x0d\xd1\x9c\x24\x63\x0f\xce\x9a\x42\x4d\x3b\x70\x23\xdd\xe4\xcf\x42\x4a\xf4\x44\x7a\xa2\x24\xb2\x2f\x51\x92\xa1\x9d\x9e\x80\x2c\xe7\x28\x99\x11\x0a\xd1\x73\xb7\xe8\xdb\x6e\xaa\xfd\xff\xe5\x98\x98\x0c\xa1\x27\xb3\x17\xbf\xbb\x63\x3a\x9f\x71\xdd\xc3\x11\x04\x09\x4c\xb9\x59\x84\xff\x01\x2c\x54\xf4\x93\xc5\x85\x70\xc4\x3b\xc2\x49\x6b\x4f\xbf\xb9\xbe\xab\x16\x08\x22\xfb\x8e\xff\x3d\x2b\x40\x8b\xc8\x67\x07\x27\xb2\xec\x42\xc5\x97\x87\x64\x6a\x55\x08\xde\x57\x92\x7d\xee\xce\x5d\xda\x49\x17\x03\x2e\xed\xc9\xe0\xab\x0e\x8f\xc4\x11\x97\x13\xad\xdc\x29\x45\x76\xe7\x14\xf8\xe0\x85\x9c\x27\x0e\x45\xd6\x64\x5f\x6c\x9d\x9d\x20\xce\xca\x5e\x96\x0a\x74\xff\x2f\x48\xe1\x4b\xa9\xf3\x3b\x1c\xc7\x3d\xf3\xfc\x66\x17\xc2\x81\xba\x23\xb3\x29\x75\x4e\x2c\xeb\xf3\x9a\x26\x81\xc3\x73\x7a\x97\x5e\xb1\xfe\x0e\xa7\xd8\x12\xc8\xcf\x2e\xfb\x7e\x76\x11\x3f\x75\xca\x7b\x31\x20\x2b\x2b\xb1\xf8\xc7\x53\xab\x44\x98\x9d\xf3\xec\x1e\xef\xc4\x76\x29\xe8\x02\x71\x5a\xd3\xac\x0e\x79\xcd\x78\x6e\x6f\x2e\xe1\xcd\xb4\x41\x26\x9d\x2b\x04\xfb\x73\xc5\xd1\xd9\x5f\xce\x70\xfe\x6a\x2a\xe9\x0f\x86\xcb\x7a\x72\x48\x59\x13\x51\xca\xc9\x2e\x96\x11\x08\x4e\xc4\xb9\x2a\xc8\xd7\xf5\x9a\x8f\x30\x9d\xee\xfa\x82\xaf\xe7\xb1\x63\x5d\x0e\xf5\x92\x9f\x54\xb3\x93\x9e\x19\x95\x27\x26\xfb\x64\x66\x25\xbe\x35\x91\x87\x7f\x19\x75\xda\xac\x31\xd9\x44\xbb\x33\x53\x30\x95\xce\xbb\x23\xda\x14\x78\xeb\xc2\xdb\x36\x94\x2c\x2a\xa4\xb8\xf6\x52\x65\xec\x73\x33\x0e\xca\x93\x15\xfc\xf0\xd9\x7f\xe7\x21\xd9\xf9\x1b\x0f\x49\x6f\x3f\xf2\x90\xcc\xf9\x6f\x78\xe8\x99\x00\x8d\x5f\x29\xf3\xe3\xf3\x7c\xfa\xa8\x08\xfd\xcd\x69\xeb\x4a\x4b\x7d\x9d\xd5\x5f\xbd\x12\xe9\x47\xda\x70\xea\x9f\x79\xb3\x92\xab\x06\x54\xaf\x74\xfa\x3a\x2f\xae\xdf\x11\xc7\xd4\xaf\x14\x4c\xee\x39\x83\xc5\x95\xff\x51\x7e\xdc\x7a\xcb\x6f\xeb\x5d\xb6\xf6\x8d\xde\xa5\xf3\x8f\xf4\x2e\xb3\xfe\xb6\xde\x7c\xa9\xcd\xbf\x4a\x0c\xa5\xf7\xe7\xf7\x7b\x62\x28\xdb\x67\x62\x5c\x5d\x95\x42\x9e\xbf\x29\x8e\x94\x8a\xc7\x33\xe5\x53\x35\x27\x35\xa0\x91\xa9\x71\x6d\xb5\x55\x16\xa8\x33\x78\x16\xae\xe2\xb3\xa2\x99\xfb\x9c\x43\xb9\xb7\xbd\x37\x58\xa5\x52\x07\x4d\x60\x1f\x44\xbd\x8d\x49\x7b\xdd\x63\x7a\xca\x37\x68\xb7\x39\x7c\x8c\xbc\x41\xfc\x15\x00\x00\xff\xff\xc0\x63\x4e\x2c\xec\x0a\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledSafemathAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledSafemathAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledSafemathAbi,
		"compiled/SafeMath.abi",
	)
}

func compiledSafemathAbi() (*asset, error) {
	bytes, err := compiledSafemathAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/SafeMath.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledSafemathBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xc1\x11\xc0\x20\x08\x04\xc0\x96\x0e\x8c\xa0\xe5\x00\x07\xfd\x97\x90\x71\xf6\xbb\x86\xe7\xc3\x56\x03\x70\x30\x04\x42\x6c\x9b\x7a\x78\xb8\x2e\xec\xa3\xc8\xb8\xc3\x14\x37\x2d\x9c\xac\xd6\xeb\xfc\x22\xf3\x54\x9b\x89\x48\xb2\x9d\xcd\x75\xf1\x56\x0a\x77\xc8\x8a\x59\x35\xac\x62\x36\xa0\xf7\x0f\x00\x00\xff\xff\x84\x1f\x85\x61\x6a\x00\x00\x00")

func compiledSafemathBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledSafemathBinRuntime,
		"compiled/SafeMath.bin-runtime",
	)
}

func compiledSafemathBinRuntime() (*asset, error) {
	bytes, err := compiledSafemathBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/SafeMath.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledVotingAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingAbi,
		"compiled/Voting.abi",
	)
}

func compiledVotingAbi() (*asset, error) {
	bytes, err := compiledVotingAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xdb\x11\xc0\x20\x08\x04\xc0\x96\x2e\x3c\x4e\x28\x07\x41\xfb\x2f\x21\xe3\xec\xef\x12\x8f\xc1\x85\x00\x02\x77\x80\xfa\xe8\x94\x55\xab\x96\x28\x3c\x04\x31\xea\x4b\x3a\x79\x92\xcd\xa0\xdd\x29\xde\x9b\xd1\xdf\x51\xbc\xb8\xd3\x66\x6b\xeb\xa9\x54\x31\x1e\xa7\x9b\x8e\xcc\xb4\xed\x31\x40\xf2\x0f\x00\x00\xff\xff\x56\x21\x80\x23\x6a\x00\x00\x00")

func compiledVotingBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingBinRuntime,
		"compiled/Voting.bin-runtime",
	)
}

func compiledVotingBinRuntime() (*asset, error) {
	bytes, err := compiledVotingBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/SafeMath.abi": compiledSafemathAbi,
	"compiled/SafeMath.bin-runtime": compiledSafemathBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
	"compiled/Voting.abi": compiledVotingAbi,
	"compiled/Voting.bin-runtime": compiledVotingBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"SafeMath.abi": &bintree{compiledSafemathAbi, map[string]*bintree{}},
		"SafeMath.bin-runtime": &bintree{compiledSafemathBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
		"Voting.abi": &bintree{compiledVotingAbi, map[string]*bintree{}},
		"Voting.bin-runtime": &bintree{compiledVotingBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

