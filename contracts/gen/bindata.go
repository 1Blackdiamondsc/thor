// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xcd\x6a\xeb\x40\x0c\x85\xdf\x45\xeb\x59\xdd\xbb\xf3\x2e\xd0\xd2\x55\xa1\x74\x1b\x42\x98\x78\xe4\x76\xc0\x96\x8c\x47\xe3\xc6\x0d\x79\xf7\xe2\xd6\xbf\xd4\xc9\xd8\xa5\x0e\x5d\x0e\x12\xd2\xf9\x4e\x8e\xe2\xed\x09\x62\x26\x27\x9a\x04\xa2\x44\xa7\x0e\x15\x58\xca\xbd\x38\x88\xb6\x27\x20\x9d\x21\x44\xb0\xd7\xc6\x14\xa0\x40\xaa\xbc\x7e\xd6\x2f\x74\x0e\xce\x3b\xd5\x76\x18\xd4\x5e\x5e\xb9\xb0\xef\x08\x0a\xd8\x4b\x33\x62\xa7\x20\xd7\x95\x3e\xa4\xd8\x8d\x77\xa2\x05\x1f\xbd\xe8\x83\x4d\xad\x54\x10\x01\x31\xb5\x4d\xdd\x8e\xc4\x53\x2c\x96\x09\xce\x6a\x28\x51\x0a\x3f\xa9\x30\x28\x90\xb4\xd8\x12\x1f\x50\x9e\x0a\xce\xd9\x61\x31\x92\xd9\xcd\xe9\x67\x1c\x98\xd3\xcf\xe5\xdf\x2b\x95\xa0\xfb\xff\x6f\xba\xe8\x2d\x49\x5d\x9b\x05\x5e\x5a\x7c\xfb\x31\x72\xf8\x47\x79\x09\xd1\x26\xec\xc9\x5c\x46\xb6\x06\x49\x6a\xa5\xd7\xd0\x6b\x2a\xef\xd6\x34\x60\x71\x2c\x7b\x71\xfb\x2b\x08\xbd\x4f\xb7\x89\xee\x45\x8c\x20\xc5\x2c\x88\xaf\x80\x6f\x8c\x59\x16\xf0\x95\x0f\x74\xe2\x00\xef\x8f\x18\x7b\xe1\xa0\xbe\x61\xa0\xd7\x4e\xd2\xcc\xbf\x8f\x67\xcc\xb8\xc4\x3f\x6a\x30\xde\xda\x57\x4d\x4c\x55\xc6\xde\x4d\x19\x6b\xc9\xe0\x11\x4d\xab\x37\x18\xf5\xae\xbf\x19\xb5\x24\xfa\x9b\xc1\xfd\x36\x5d\x58\x22\xc9\x2f\xab\xec\x17\xde\x8d\xbe\x76\xe3\x95\xbb\x8f\x00\x00\x00\xff\xff\xef\xb6\x80\xd5\x53\x07\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x0b\x6e\x2b\x31\x08\xbc\xd2\x00\x06\xc3\x71\xfc\xbd\xff\x11\x9e\xbc\xce\xb6\xc9\x36\x4d\x5a\xe9\x49\x6d\x15\x69\x33\x31\xb3\xc3\x00\xb6\x0d\xeb\x3f\x41\xd9\x80\x24\x46\x30\x02\x72\xd2\x6c\x32\x6f\x7f\x86\x01\x03\x18\xc5\x00\x88\x22\x91\x99\x70\x6e\x91\x67\x51\x27\x4a\x47\x4c\x68\x76\x98\x68\x4f\x59\xb3\xcf\x8d\x46\xd9\xa8\x2b\x95\xc8\xa9\x6d\x74\xe8\x46\xc3\x62\x90\x16\x39\x50\x42\xba\xa1\xa5\x5b\x37\xe7\x8d\xb2\x6d\xb4\xb4\x9a\x1a\x63\x6c\x54\xdb\x0d\x9d\xb3\xcf\x4e\x37\xd4\xeb\x46\x9b\xa4\x06\x1f\xba\xd1\x52\x34\x6b\x5d\xda\x1d\xb3\x6b\x95\x44\xba\x54\xf8\xca\xf2\x03\x3d\xd4\xba\x01\x64\x28\xb7\x7c\x21\x87\x2b\x4a\xb6\x78\x6a\x57\xd3\x0a\x7c\x32\x14\xbd\x32\xd4\x78\xc1\xc0\x53\x16\xc3\xe1\x37\x05\x93\x92\xba\x2c\xe7\x19\x2e\xa0\xa0\x40\x90\xf2\xa7\xf3\x64\x6b\xad\x3f\xfe\x0a\xc3\x7a\x02\x05\x94\x7c\x3d\x49\x60\xca\xa7\xaa\x89\x5f\xaa\x3a\xf2\xba\x45\x13\xe6\x2f\x5c\x01\x27\x59\x51\xe2\xed\x9e\x43\xe8\xc2\x41\xe9\x3d\x47\x9a\x7c\xe7\x0e\x0e\x77\x68\xbb\xb3\x22\xd3\xf3\x6c\xc9\xf2\xf5\x5d\x36\x0f\xb6\xf2\xc9\x76\x7d\xf7\xf2\x8f\xec\x27\xec\x61\xbf\xc8\x64\xbd\x75\xde\xfb\x50\xaf\xfd\xb1\xb5\x29\xf4\x58\x85\x2b\xd3\x9a\xab\xb3\xcf\x57\xdc\xa9\x7e\x69\x5c\x5a\x0f\x95\xf4\xd8\x1f\xe7\x6c\x82\x77\x3e\x48\x38\x22\xce\x9c\x5c\x20\x4e\x87\x8a\xec\x90\xba\x7c\x5d\x55\x87\x5c\xb4\x71\x33\x2d\x90\x49\xe7\x0a\x7a\x98\x0f\x5d\xb2\x3f\x58\x57\x85\xf4\x89\x7e\x91\xaf\x18\xa5\x93\x51\xfa\x3d\xe3\x37\xf9\xdf\x26\xda\xf9\x3b\x07\xee\xf6\xa3\x0f\x27\x3c\xad\x45\x37\x07\x9e\xd4\x7a\xf9\xe2\xbc\x39\xf8\x87\x0e\xc5\x75\x7f\xf8\xe2\xd0\xe3\xfc\x3f\x73\xe8\x5c\x59\xcb\xfd\x4a\x7f\x92\x79\x9e\x39\x46\x1f\xe2\x12\xad\xe7\x92\xbb\xd7\x9e\xf3\x88\x3c\xb4\x79\x40\x4d\xe7\x48\x33\x5b\xeb\xb5\x8e\x52\xc4\x92\x25\x1b\xec\xc5\x2d\xb4\x64\xf7\x74\xba\x73\xdf\xcb\x85\x75\x85\xd6\xa3\x56\x08\x38\xed\xcf\x9e\x8d\xa5\xe7\xd8\xd3\x9f\x56\xe2\xdc\xc9\x5d\xef\x2b\x61\xff\xbd\x12\xf6\xae\x12\xa2\xf1\xa6\x12\x62\xe5\x75\x25\x76\x07\x7d\x79\xe6\xc8\xb1\x66\x1c\x41\x91\x14\xc1\x3b\xf2\xcf\xa7\x53\x3a\xbf\xcb\x78\xc8\x7f\x9e\xce\x84\xf6\xf0\xce\xcb\x4a\x67\x32\x52\x07\x69\xac\x3b\x42\x62\xd1\xac\xf0\xa3\xc3\xf5\xd4\x9d\x78\xbc\x9f\xf0\xf3\x7c\x77\x71\xf9\xd5\x8c\xeb\x8b\xce\xe2\x5b\x67\xc9\xd9\x59\x67\x8f\xa5\x9f\x39\x9e\xd6\xdd\xe1\xa5\xe3\x29\xda\x0f\xa7\x3d\xd5\x87\xf3\xcf\xbf\x9c\x3f\x6b\xda\x7d\xdd\x9f\x6a\x69\xae\x5e\x7d\x4a\x37\x5f\xb7\xa2\x22\xbd\x89\x8e\x70\x20\x65\x67\xed\x65\x36\xb2\xc2\x12\x91\x0c\x3d\x50\xbd\x29\xda\x14\x71\x3e\x4f\xca\xef\xce\xb1\xc2\x67\x2f\x1f\xb3\xcf\x41\x0f\xdf\x1f\xf6\x85\x13\xfd\xd3\xae\xd7\xd4\xdf\xd4\x40\x75\xbc\xac\xc1\x91\xe1\xca\x06\x28\x64\x6a\x9c\x4b\x2e\x99\x05\xea\x8c\x5c\xda\xcc\x5d\x28\xe5\x4e\x69\x30\xb5\x9a\xa1\x35\x5b\x47\x21\xf2\xe6\xb3\x31\x8d\x36\x32\x33\x11\xd1\xe8\x34\xb4\x0f\xe5\x9c\xa1\x5d\x1a\x35\x80\xe3\x5f\x00\x00\x00\xff\xff\x71\xb1\x1b\x15\x30\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4d\x6f\xdb\x30\x0c\xfd\x2f\x3a\xfb\x34\x6c\xc5\x90\x5b\x37\x6c\x3d\x15\x03\x9a\xde\x8a\xa2\x60\x6c\xa6\xd1\x20\x4b\x86\x44\xd9\x35\x8a\xfe\xf7\x21\xb1\x63\x3b\x9b\x64\x29\xad\x67\xe7\x16\x20\x94\xc4\x8f\xc7\xf7\x48\x3f\xbc\xb2\x54\x49\x43\x20\x89\xad\x48\x5b\x4c\x18\x97\x85\x25\xc3\x56\x0f\x8f\x09\x93\x90\x23\x5b\x31\x09\xc4\x4b\xbc\x41\xba\x57\x04\x62\x6d\x8b\x42\xd4\x2c\x61\xca\x52\x6b\xfa\x7a\xb4\x64\x09\xa3\xba\xd8\xff\xb2\x5c\xd2\xa7\x2f\x57\xec\xed\x31\x61\x05\xd4\xb0\x11\xc8\x56\x5b\x10\x06\x13\x66\x08\x08\x6f\x2d\xc1\x86\x0b\x4e\x35\x5b\xb1\x92\x63\xd5\x9f\xdd\x5a\x99\x12\x57\x92\xbd\x25\x91\xfe\xe5\x18\xf2\xc7\x90\xe6\xf2\x39\xd2\x9d\xc2\x6a\x0c\xba\xd3\x9e\xee\xfc\xe9\x1e\x7d\xd2\x98\x72\x2c\x51\xf7\x57\x40\x96\x69\x34\xe6\x70\xc3\xd1\x0a\x72\x65\x25\xb9\x33\xd6\xda\x40\x51\x68\x55\x7a\x62\x33\x36\x4d\xf7\x77\x76\x17\x6c\x94\x12\x91\x01\x4a\x25\x8f\x46\x67\x66\xbd\x7b\x7e\x1f\x92\x23\x40\x07\x6a\xbe\x81\x00\x99\x06\x2b\x34\x27\x62\x68\x51\x20\xfb\x91\xb3\xd5\x2a\x1f\x47\x0d\xa9\xf1\xff\x53\x8d\x19\x77\xa1\x2a\x39\xc1\xa7\x2a\x51\xd7\x77\x40\x38\x6e\x89\x2f\x05\xd7\x70\x08\xe1\xc4\xee\xea\xf3\xb0\xd2\x66\x07\xfa\xb4\xbc\x53\x83\xd0\x9f\xb1\x54\x49\xd2\x90\xd2\xb5\x1b\x8e\x83\x58\x24\x56\xb7\x60\xc8\xd9\x96\x83\x58\x90\xbe\xb7\x57\x76\xd6\x4b\xc4\xf5\x71\x24\x44\xf0\x0b\x69\x90\x66\x8b\xfa\x67\xf3\xd8\xc5\x90\x4c\xef\x61\x86\x29\xcf\x41\x98\x98\x2e\xfd\x3a\x0b\xbb\x6b\x77\xd3\x0c\x48\x3b\xfb\x6d\x0d\xdd\x68\x55\xd1\xae\xed\xb0\x05\x00\x14\xdd\x17\x79\xb8\x27\x1a\x26\x5f\xcf\xda\x19\x3e\xd9\x79\x52\x95\x0c\xb8\xbb\x69\xf4\xe6\xd7\xd6\x0d\x9a\x4d\x27\x47\xb3\x09\x4f\xf7\x76\xb0\xab\x9d\x4d\xed\xd0\xd4\xf5\x0e\xf6\xf3\xcc\x1d\xe6\xc0\x25\x66\x97\x24\x62\x9e\xc1\x20\x89\x2b\xc0\xdf\x90\x73\x0d\x0f\xb3\x61\x2d\xd0\x44\xbd\xbb\xcf\xa3\xbd\xe1\x28\xc8\xf0\x8e\xff\x3d\xec\x98\x3a\xdf\x28\x31\xff\x80\xec\x4b\x6b\x74\x56\x3b\xb4\x2f\x9e\x5b\xbf\x4e\x4f\xa8\xc2\x97\xa9\xc0\x5d\x11\x7e\xbc\x60\x6a\x49\x5d\x54\xfa\x83\x62\xdc\x78\x7f\x3d\xa7\x24\x7b\x33\x89\x17\x98\xc0\xf7\x09\x52\xff\x77\xc4\xba\x11\xbd\x6d\xc4\x2d\x1b\x9d\x32\xb4\x12\xb8\x8c\x32\xbc\x73\x3c\x3f\x51\x8c\xe5\x35\xfc\xec\x21\x6b\x10\x9f\x29\x50\x66\x81\x49\x0c\x84\x50\x95\x7f\xf7\xd7\x87\xc8\x9b\x1a\x2e\xb1\x6d\xc7\xef\x8e\x13\xb0\x7c\xc5\x69\x97\x69\xa8\xf6\xbb\xd6\x51\xcf\x16\x60\x7c\x90\x4a\xd6\xb9\xb2\xc6\x95\x18\x2e\x33\x7c\xc1\xac\xfb\x2b\x96\x65\x1d\xfc\xda\x1a\x63\x89\x92\xce\x78\xb8\x41\x64\x90\x9c\xdc\xf6\xbe\x2a\x79\xc2\x1a\xe3\x2e\x5f\x26\x82\x5c\xe6\x39\x18\xc7\x6d\xeb\xf6\x43\xca\x14\xc9\x0b\x83\xdb\xe3\xaa\x12\x99\xf7\x3b\x89\xff\x54\xdc\xd7\x15\xd7\x0e\x39\x45\xb0\x23\x7c\xec\x39\x70\x26\x56\x9e\x4a\x10\x76\xbc\x09\xee\xfb\x31\x6e\x92\x90\x46\x38\xd8\x73\xc2\x4f\xc9\x1f\x0a\xec\xfa\xf0\x15\x1a\xc4\x3f\x81\x3d\xfe\x09\x00\x00\xff\xff\x3c\x61\x2b\x21\x3f\x18\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x07\x76\x23\x39\x0e\xbd\x12\x22\x09\x1e\x87\xf1\xfe\x47\xd8\xc7\x50\x52\x25\x05\x7b\x76\xc7\x6b\xbd\x76\xab\xd1\x55\x20\xf0\x91\x3e\x49\x07\xfd\x23\xa0\xe4\x00\x84\x1d\x82\x43\x40\x6a\xea\x1d\xb7\xf5\xe3\xa0\x82\x03\x20\x88\x0e\x00\x58\x41\xd0\x39\x06\xc9\x58\x9b\xa0\x21\x4a\x7f\x87\x45\xbd\x81\x63\x70\xad\x94\x0a\x3c\xa5\x1a\x96\x34\x68\x8d\x3e\x2d\x69\xe5\x29\x45\x0c\x39\x57\x9d\x52\xc2\xf5\x2c\x1a\x3a\x28\xa5\x4c\x29\xdb\x92\xd6\xea\x2a\x54\x9a\x52\x49\x4b\xda\x6a\x4a\xd1\xb5\x29\x35\x9d\x52\xe2\x64\x9e\x36\x0d\x31\x4e\x29\x23\xe7\xaa\xce\x4f\x69\xa1\x29\x15\xa4\x9c\x5b\x5b\x1a\xda\xd2\xeb\x92\x31\xfa\x38\xa5\x8c\x38\xa5\x1e\x22\x18\xf1\xf4\x98\xd9\x2d\x69\x31\x0f\xec\x74\x4a\x55\x1f\xd2\xe6\x29\xcd\xd5\xd8\x2f\x1b\x2c\xc7\x1a\xcd\xb9\x29\x0d\x79\x4a\x83\x16\x0b\x49\x96\xde\xe2\x97\x34\x49\xc2\x94\xa7\xc7\x5c\x97\x86\x18\x40\x43\x4e\x69\x48\x05\x16\x66\x31\x27\xc9\x04\x75\x4a\x69\x79\x91\x90\xb9\x58\x99\x5e\x08\xd7\x29\xcd\x2c\x19\xac\x4e\x7b\x45\x65\x93\x46\x43\xd6\x38\xa5\x6e\xd9\x50\xd8\x9a\x17\x5b\xd2\xd0\x96\xb4\x38\xaa\x85\xd7\x6a\x79\x69\x68\xa9\x2a\x97\xb2\xa4\x35\xa8\xd7\xd4\x33\xc6\xa0\x15\x4d\x2c\xa8\x23\x4f\x7a\x6e\x3d\xa4\x5d\x22\xde\x21\x28\xa2\xba\xfe\xbc\x80\x62\x00\xc3\x9e\x91\x04\x80\x53\x62\x10\x3a\x5e\xd0\xf8\xa9\xc9\xc9\x59\x93\xcb\x43\x93\x7b\x6a\xea\x3a\x0c\x8c\x94\x6c\x68\x05\x34\x36\x34\x54\x7c\xae\x10\x50\xc1\xc6\xaa\xeb\xdf\xfd\x0d\x36\xee\xba\x35\xf5\xe7\x7b\x22\x77\xfd\x71\xe4\xa2\x11\xf4\xf7\x79\xfc\xbd\x59\x89\xfd\xbd\xbe\xae\xc2\xfc\x84\xf1\xc7\x86\xdc\x01\x36\x74\xb6\xb4\x14\x5d\x5a\xd8\x86\x85\xdd\xa6\xa1\xa5\x97\x1f\x02\x40\x04\xc6\x80\xee\x68\x61\xd7\x1c\x68\xea\x7e\x8d\x49\xad\x27\x4c\x08\xd4\x0d\x14\xe3\xaa\x61\xe0\x51\xe9\x8a\xce\x01\x09\xf7\xb7\x54\xfd\x1e\x7b\x54\xd4\x2f\xf0\x27\xba\xe0\x2f\xfe\xe5\x5a\x08\x9a\x47\x84\xb7\xb7\x85\xef\xf3\x20\xfb\xfd\x53\xea\xce\xfe\x8c\xb8\xdc\xac\x61\x88\x6e\x44\x70\xf9\x26\xdd\x37\x70\xfd\xb7\x6f\xa7\x1f\x07\xb6\x59\xe5\xa8\xf6\xf5\x7a\xa4\xb7\x35\x03\xfc\x72\x4d\x04\xdf\xca\xde\xfa\xa4\xdf\x46\xe3\xd6\x7a\x84\x20\x71\xaf\xaf\x94\xb3\xbe\x3a\x9e\x2a\x87\x8c\x6f\x2d\x40\xc0\x7d\xfe\xbc\x8c\x21\xc3\x3d\xbe\x6b\xf5\x92\x76\xab\x33\xe6\x5f\xe3\x12\xeb\x41\x93\xe0\x8f\x32\x27\xd6\xb6\x7f\xdb\x9d\xe3\xf3\xf2\xed\x8b\x1d\xc9\xd9\x5e\x93\x5d\xe2\xf3\xca\xa3\x5d\xb5\x9c\x7c\x89\xfe\xa4\x83\x53\x7a\xe3\x4b\xf2\xb0\x8f\xd5\xf1\xb9\xef\xe3\x56\xe9\xb6\xf7\xa5\x1c\xf6\xb6\xb5\xb3\x7f\xef\x6d\x3b\x56\xa8\xe0\xb9\xbe\xbf\xe9\x25\x19\xf6\x19\x2b\x7c\xce\xaf\x6e\xc1\xa3\xdb\x6f\x4f\x49\x78\x93\x85\x19\xf7\x1d\x41\xf4\x3c\x3f\xa6\xc6\x8c\x87\x75\xfd\x19\x9f\xff\x76\xdf\xc8\x8e\xf6\xeb\x75\x8e\xf1\xcb\x9c\xcc\x6e\x1f\x33\xc9\x77\xf3\xf1\x4b\x4d\x87\xcc\x94\xf6\x75\xfc\x5e\x74\x9f\x82\x32\x73\x15\x60\xce\xb6\x11\xb9\xea\x10\x91\x6d\xcb\x62\x5b\xf3\x7a\x65\x6b\xe7\x91\xb1\x67\xb0\x6f\x2a\xce\x5c\xf3\x44\x7d\x62\x35\xef\x9d\x7a\x82\x1f\xfc\x8c\xd9\x3d\x66\xec\x9c\xa5\xcb\x96\x83\xfd\xdc\xa7\xb3\x1b\x5e\x3e\x26\xfa\xf6\x4d\xc6\x1c\x27\x08\x62\xbe\x4f\x5f\x13\xa5\x20\xbd\xc6\x94\xfa\xfc\x25\x30\x0d\xa0\x1a\x20\x50\xc0\x00\xbe\x59\xd6\x54\xb1\x6a\x4d\x35\xfb\xa2\xa9\xa0\x34\x8f\x42\xbe\x60\x35\x69\x5c\x4a\xe7\xb5\x19\x9a\x4f\x44\x01\xab\x26\x02\x88\xd9\xb2\xcf\x9c\x02\x69\x98\x1a\xdf\xf0\x97\xc8\x7d\x7a\x03\xf6\x15\xc7\x2c\x1f\x8c\x61\x87\x70\x67\xd8\x70\xf6\x72\xcf\xb7\xdd\x40\x66\xe3\x36\xb0\x3c\xed\x7c\xe6\xc9\xd8\x3b\x22\x1b\x67\x07\x9a\xb6\x80\xc0\x78\x63\xb3\xc7\x18\xd8\x86\x36\xf3\x06\x9c\xfa\xd4\xef\xf3\x10\xce\xf9\x47\xd9\x69\x04\x6e\xb8\x3d\x41\x87\xfe\x7b\x64\x24\x3a\xb9\xca\xf2\xc6\xe4\xea\x09\x5f\xea\x10\x1d\x8a\xf5\x7d\x87\x2b\xa0\x5e\x5f\xf8\xbf\xb1\x61\x73\xaf\x10\xd8\xed\x53\x1e\x48\x58\x07\x6c\x43\xe0\xa6\xd7\x76\x5c\x1e\x3c\xee\x4b\x84\xe2\x85\x1f\x9c\x11\x4a\xf8\x16\x21\xd0\x1b\x0f\xef\x71\xd1\xc7\xaa\x25\xed\x75\x0a\x5d\xbb\x93\x11\x3a\xec\x4c\xd4\xb5\xf3\x7c\x75\x2d\x5a\x67\xe5\x25\x8d\x2e\x39\x34\x7a\x38\xf4\x87\x7b\xd4\xb7\x5d\x81\xb9\xed\xf3\x06\x6b\x7b\x89\xb5\x9a\xdb\x63\x1d\x3a\xfa\x32\xa7\x86\xc9\x8a\xa0\x18\x77\xa6\x3b\xeb\xb3\x77\xe0\x15\x97\x8b\x9f\x5b\xe4\xec\x11\xb9\x38\x22\x07\x9f\x22\xe7\xfd\x85\x3f\x9d\x22\xe7\xad\x5e\x23\x77\x9d\x1c\xd8\x69\xc4\x45\xe6\x9b\x61\xf6\xd4\xcc\x17\x2f\xc9\xbb\xec\x2b\x10\x88\x49\x8a\x06\xd6\xa2\x53\x09\xb1\x6f\x88\x63\xc8\x0a\x24\x35\x39\x46\x07\xbe\x48\x93\xd8\x34\x16\x30\xed\x9f\xc5\xc3\xc9\x78\xf5\xb3\x3d\x2e\x17\x34\x46\xbf\x1e\x9d\xee\x80\x1e\xf4\x6f\x63\x4f\x72\xe8\x3d\x8f\xcf\xdb\x5e\xf3\xa8\x35\xf9\xe3\x5a\xb3\x2b\xff\x3f\x45\xcc\x9c\xff\xdc\x8d\xae\xb5\xd5\x3b\x74\x9f\x79\xa3\x66\x7a\x65\x98\xa5\xcf\xd5\xb0\x9d\x0a\x98\x74\x64\x5e\xe2\xa0\x2f\x71\x20\xe3\x43\x1d\xe0\xaa\x01\xda\x6a\xe0\xab\x3c\xb6\x7a\xae\xef\x0b\x2a\x8d\x6e\xf2\xf8\x62\x4f\xcf\x59\xd6\x96\xb5\xaa\x44\xe7\x6b\x22\x6a\x86\x5c\x18\x33\x98\x0b\xce\x61\x56\x13\xd2\x22\x4a\x1e\x59\x8a\xb6\x5e\x96\xe4\x19\x12\x92\x2f\x26\x35\x1b\x3d\xb1\xb8\xf3\xd6\x9e\x7e\xc2\xc3\xcf\xc7\xce\x78\x97\x9d\x74\xcc\x4c\x43\xd4\x31\x15\x82\xcf\x7d\x2a\x9c\xb5\x1b\x98\xce\xc9\xff\x9c\xb6\x97\xc9\xcf\x63\xf2\xb3\x52\xe8\x1c\xa2\x33\x11\x31\x0a\x80\xb0\x7a\x60\xb0\xb0\x74\x8f\x95\x72\x5b\x2c\x27\x04\xb1\xf1\xe9\x3d\xb3\xfa\x47\xcf\x0c\x39\xbd\xb0\x45\xbe\xb0\xc5\x1d\x6d\xb1\x65\x4d\xf7\x5e\x67\x3f\x79\xd8\x30\x6d\xd2\x14\x38\x1c\x70\x41\x9a\x93\xf5\x3e\x3f\xb7\x53\xa0\xff\x31\x47\x88\xf4\x29\xff\x22\xdf\xe4\xdf\xef\x26\xe0\xa6\x51\xbf\xa8\xcf\xed\xbc\xcb\xbe\xed\x52\x32\xb2\xf0\xd1\x35\xe9\xbb\xfa\x8b\xf1\xa3\xff\xe9\xc6\x7f\xdf\xa4\x52\x4d\x2c\x09\x4a\x70\xd9\x51\x25\x50\x14\xae\xc4\x41\x9b\x07\xaa\x42\xe2\x99\x5a\x20\x00\x4b\x0d\x12\x50\x8a\x4d\xb2\x67\xb6\x1c\x73\x19\x03\xf6\xfd\xf9\x58\x44\x7d\x9e\x42\xbd\xed\xf1\xdb\xd9\xeb\x3c\xe7\xfa\xc3\x1e\x9f\xc4\x3e\xa0\x99\x34\xbc\xcd\xa6\x53\x8d\x00\xec\xd9\xf5\x17\x53\xee\xff\x0f\x81\x54\xf0\xe3\x2e\x4b\xb6\x5d\x96\x98\x34\xfd\xd1\xce\xea\x8b\x5d\xd6\xea\x87\xcc\xc7\x2e\xf8\x09\xd3\x7f\xa9\x03\x9d\x76\x29\xdf\xf2\x9a\xed\xa4\x7e\xce\xef\x1f\xc4\xfc\x1f\x4e\xf4\x8f\xfe\xe4\x7c\x3e\x3f\x38\xd7\x40\x3e\xf2\xff\x4b\x0d\x48\xe0\x13\x06\x47\x3b\xb1\x33\x9d\x4f\x13\x6a\xb2\x72\x23\xa5\xad\x27\xf6\x89\xf9\x69\x67\xfa\xa8\x23\xfd\xe3\x3a\x2a\xee\x13\xbf\x2f\xfe\x86\xdf\xff\xa3\xb9\x54\x2e\xe7\x7f\x25\xd1\x99\x3b\xdc\x44\x07\xec\xca\x22\xba\xde\xa5\xb5\x2c\xde\xdb\xfb\xd8\xd0\x33\xce\xcb\x8c\x38\x2d\x1b\x3b\x3f\x7a\xde\x0b\x0c\xcb\x0f\x9a\x3f\x75\x7d\xff\xc7\xb1\xaa\x97\xf3\xff\x73\xac\xaa\xca\xdb\x58\x91\xde\x44\x8b\xe1\xe0\xe5\x5f\x9f\x15\xd4\xf4\x69\xff\x52\xf3\x17\xfb\x97\xf1\xff\x82\xb8\x6e\x90\x6a\xa5\xce\x42\x8d\x8d\x10\x50\x35\x3d\xe4\x6d\xc8\xd7\xce\x18\x71\xb2\x56\x44\x8a\xea\x5f\x76\xc4\x71\x4b\x69\xde\x9c\x29\xf0\xaf\x7a\x20\x04\x5a\xe8\xf0\x86\xce\x0f\x77\x34\x4d\x3e\xf5\xbf\xa6\x37\xfd\xef\x83\x4f\xce\x9c\xc9\xc6\x90\xfe\x7d\x9f\xd2\xe5\xfc\xf5\xec\x53\xd6\x9b\xd8\x23\xb4\x82\xa6\xc7\xd3\x9a\xde\x68\xd4\xdf\x9d\xa7\x39\xce\x50\x2b\x24\x8b\x3d\x86\x7b\xbb\x34\x8c\xdb\xfc\xd6\x5c\xcf\x0a\x0d\x9a\xb6\x8e\x8f\x0d\x43\xff\xdd\x7d\xeb\x3b\x34\xc0\x1d\x97\xa4\xf0\xcc\x40\xf9\x3c\xad\x7b\xb6\xdd\x58\x75\x3d\x31\x79\x30\x56\xe3\xdd\xf7\x75\xe7\x6a\x64\x08\x3c\xee\x69\x7f\x7d\x3f\x8b\xe0\xdf\xdc\xcf\x76\xd2\xf0\xcd\xfd\x6c\xdf\x6a\xfc\xfa\x7e\x56\x9e\x4c\xe4\x73\x86\x20\xe4\xcb\xfd\xd3\x31\x43\xfa\x48\xbb\xe1\x39\xb7\xe7\xaa\x76\x83\xb9\x6f\xa5\x34\x52\x8a\x05\x53\xa5\x6c\x21\xb9\x90\x29\x81\xb3\x96\xd9\x5b\x89\x31\x28\xa5\xe8\x1b\x3a\xce\x12\x11\x1d\x59\x53\x8d\x52\x9a\x12\x27\xae\x6d\x3b\xef\x7b\x77\xa2\x3d\xcf\xb3\x7b\xe6\x22\x52\x7b\x72\xf0\x89\x89\xc2\x99\x9f\x6f\x5d\xf3\xc4\x67\xc7\x0a\x61\x5c\x51\x44\x74\xea\xc8\x47\x1f\x3d\x31\xa8\x11\xf8\xd6\x33\x51\xac\x89\x39\xc6\x0c\x48\xea\x53\x90\x9e\xf1\x88\x88\x49\x90\x43\xf3\xce\xb0\x4a\x81\xde\x15\x33\x07\xc8\x25\x78\xd7\x22\x0d\xe8\x29\xfc\x27\x00\x00\xff\xff\xe1\xbe\xeb\x45\xec\x22\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\x00\x21\x08\x04\xd0\x4a\xeb\x22\x1f\xe3\x20\x60\xff\x08\x37\x37\xcf\xf0\xdb\x50\x1a\x80\xc0\x6b\x20\x97\xa9\xd1\xd3\xd3\x29\xd0\x20\x8a\xd2\x92\xc3\xae\xb0\xec\x25\x50\x5b\xc9\xe0\xe9\xf0\xf2\xba\xb1\x45\xc5\x74\x1f\xde\x5e\xba\x63\xae\x8f\xbf\xc2\x13\x13\xde\x39\x00\xcf\x17\x00\x00\xff\xff\xd7\x93\xa9\x33\x6a\x00\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\xf4\x40\x0c\x86\xff\x4b\xce\x73\xda\x8f\xcf\x43\xef\xe2\xc9\x93\xc7\xa5\x48\xda\x66\x65\xb0\x9b\x29\x4d\x52\x77\x58\xfa\xdf\x45\xb7\xed\x80\xcc\x32\x22\xb2\x78\x2c\x7d\x27\x79\xf2\xf0\xee\xcf\xd0\x06\x16\x45\x56\xa8\x0e\xd8\x0b\x39\xf0\x3c\x98\x0a\x54\xfb\x33\x30\x1e\x09\x2a\x78\x7e\xa5\x08\x0e\x34\x0e\x1f\x5f\x4d\x54\x92\x7f\x3b\x98\x5d\x0a\x4c\xd8\x1b\xa5\x88\x79\xd6\xdd\xff\x3b\x98\x6b\xb7\x46\x84\x14\x1c\x04\xd3\x65\x78\xed\x60\xc0\x88\x4d\x4f\xdb\x62\x51\x54\x7a\x34\xc5\xc6\xf7\x5e\x23\x54\xc0\x81\xd7\xd0\x36\xfb\x60\xdc\xaa\x0f\xfc\xb9\x3f\xc1\xeb\x68\x59\xf6\x3c\x7a\xe2\x62\x54\x3f\xd1\xc3\x17\xba\xed\x79\xfe\xa6\x32\xf9\xe4\xe9\xed\xc7\xcc\x57\x7c\x27\xe8\x97\xbf\x80\x9b\x71\x78\x7f\xa2\xd6\x34\x8c\x25\x38\xec\xba\x91\x44\x7e\x13\xee\x6a\x79\x4b\xdd\x2d\x57\xf7\x72\xde\xd3\x6d\x0b\x9c\xd6\xd3\xad\xa5\x22\x07\x8e\xc7\x60\x92\xb3\xea\xb9\xa3\x13\x75\x2b\x6f\x49\xf2\x16\x5f\x26\x7d\x5b\xfa\x45\xf7\xf2\x9f\x26\x62\x85\xb9\x7e\x0f\x00\x00\xff\xff\xd3\x6a\xf5\x71\xaf\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x6d\xae\x63\x2b\x0c\xdb\x92\x93\x90\x90\x2c\x07\x38\xb0\xff\x25\x3c\x05\x7a\xda\x77\x3b\xd5\xed\xfc\x9a\x22\x55\x3a\x56\x3e\x6c\x27\x60\xc8\x53\xa0\x6c\x40\x11\x23\x18\x01\x3a\xb5\x9a\xac\xc7\xcf\x30\x61\x00\xa3\x19\x00\x51\x14\x32\x13\xae\xb2\x4a\x14\x38\x51\xc9\x1c\x13\xad\x0e\x13\x6e\x6d\xf5\xa1\xf5\xa0\x75\x1e\xd4\x67\x6b\xd6\x06\x0e\xda\xec\xa0\x6d\xf4\x32\x18\xf3\xa0\x99\x95\x68\x17\x19\x97\xcf\x76\xd0\xd9\x0f\x3a\xa4\x0c\xf8\xd4\x8d\x12\x8a\x56\xed\xc9\xc7\xb1\x2e\xed\x52\x48\x37\x8b\x64\xfe\x44\x37\x83\xb1\x95\xa9\x81\xf3\x9f\x40\x54\xd5\xb4\x03\xaf\x2c\x8f\xf7\xac\x28\x8f\x2c\x02\x0b\x65\xfc\x76\x89\x02\x4e\xe9\x15\x03\x74\x10\x47\x10\x24\xb0\xe4\x55\xaf\xd3\xaf\xf5\x76\xff\x3b\x76\xd4\xf7\xd8\xb1\x32\xaa\xf9\xab\xab\xed\x6e\xed\x31\x85\xec\x16\x44\xf6\x37\x4c\x96\x7d\xf5\x83\xdb\xf5\x3f\x3e\x84\xf5\x99\x4f\xdf\x2e\x08\xde\xb9\xe4\x2e\xdc\x73\xcc\xbc\x9b\x71\xf2\x4a\x7e\x9b\x19\xbd\xb6\x89\xec\xb5\x4f\xe0\xa3\x01\x05\x3b\xe3\xd6\xe1\x02\x71\xda\x2c\xaa\x43\x3a\xe9\xe1\xa6\xd7\x1b\x37\x1e\xa6\x0d\xb2\xe8\x8e\xf8\x39\x7f\x45\x9e\xbb\x6a\x4e\x4f\x3f\xf0\x17\xf9\x13\xa3\x72\x57\x8c\x1f\xf3\xf9\xac\xff\xde\x58\x17\x97\x5b\xff\xf3\xce\x3c\x95\xfb\xb6\xe5\x56\xec\x59\x9b\x03\xc1\x7b\x8a\xc5\xf9\xe1\xd7\xf6\x02\x5f\xbd\x98\xf2\xcd\x8b\x55\x7e\x7a\xe1\x12\xa4\xa8\x8b\x7d\x0a\x17\x5b\xe9\x88\x2e\x1d\x34\xaf\xf0\xda\x49\x64\x2e\x5e\x14\x52\x24\x3a\x6b\x1b\xbd\x59\xd3\x69\xb1\x98\x62\x7a\xd8\x1a\x71\x51\x8d\x74\xd1\xf9\xdb\x7d\x68\xbc\xdd\xb7\xec\x9c\x2c\x02\x67\x9f\x81\xcf\x1e\xde\xef\x46\x3a\xf8\x79\x8b\x3e\x7a\x5a\xfe\xf0\x94\xf2\x76\x1c\x4f\xff\x6a\xab\xd8\xfd\x8b\x93\x1c\xf1\xeb\x56\x49\x1c\xad\x4f\x85\xf1\xd0\xad\x5f\x34\xff\xa3\x7b\xc3\xeb\xfd\x7d\x7b\x57\x28\x68\xbf\x2a\xa4\xfc\x4e\x55\x40\x23\x53\xe3\xda\x6a\xab\x2c\x50\x67\x70\x63\xc1\xe5\xa3\x5d\x56\xd1\xf3\x69\x36\x74\x1a\x24\xd5\xe8\xd2\xab\x11\xcc\x6c\x2d\xab\x4b\x0a\xcd\x7c\xc8\xfd\x1a\x66\x52\xea\x72\x1d\x29\x83\xe3\xbf\x00\x00\x00\xff\xff\xc7\x52\x5f\xd3\x88\x06\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

