// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Owned.abi
// compiled/Owned.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ProposerSet.abi
// compiled/ProposerSet.bin-runtime
// compiled/SafeMath.abi
// compiled/SafeMath.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// compiled/Voting.abi
// compiled/Voting.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6b\x02\x41\x0c\xfd\x2f\x39\xef\x49\x6f\x7b\x2b\xf4\xd2\x43\xa1\x97\x9e\x44\x24\x3a\xb1\x0d\xac\x99\x61\x92\xb1\x9d\x8a\xff\xbd\xac\xac\x8e\x5a\xb5\x5f\x5b\xa4\xc7\x81\x97\xe4\xbd\x37\x8f\x37\x5a\xc1\xcc\x8b\x1a\x8a\x41\x6d\x31\x51\x05\x2c\x21\x99\x42\x3d\x5a\x81\xe0\x82\xa0\x86\x09\x3a\x17\xa1\x02\xcb\xa1\x7d\xb6\x2f\x52\x85\xf5\xb8\xda\x22\x42\xf4\xc1\x2b\xb5\x20\x9f\xec\x78\x5e\x0d\x2d\x69\x59\x90\x58\x6c\x38\x80\x75\xb5\x43\xb0\x23\x31\xb6\x5c\x30\x6a\x91\xe5\x69\x73\x23\x60\xc6\x69\x43\x50\xcf\xb1\x51\xaa\x36\xeb\xe8\x3e\x19\x4e\xb9\x69\x67\x6a\x58\x32\xbd\x94\xd1\x79\x92\x99\xb1\x97\xcd\x81\xa2\xae\x9b\xfe\x89\x3c\x47\x98\xec\xd9\x47\x7e\xa3\x03\x85\x5f\x22\x27\x5e\xb6\xa0\xde\x29\x16\x07\x27\x17\x2d\xec\x40\xd7\x56\x41\x32\xf3\x8e\x5c\xd9\x30\xcd\x46\x3a\x1c\x8c\xc6\xfb\x2c\x35\xeb\x63\x70\x68\xff\xdb\x6b\xcd\xfa\x10\x49\xc9\xae\xa4\x62\xe9\xad\x65\x74\x29\xd6\x9a\xf5\x4e\xd8\x18\x9b\xbf\x8e\xc4\x51\xb3\x7c\x2c\x0e\x3d\xdd\x1c\xe7\x92\xd2\x53\x25\x9c\xa5\xb5\x33\xef\x22\xa7\x7d\x4b\x7f\xc5\x08\xc5\x4b\x5e\xf8\xa4\xa7\x3e\x94\xc5\xd1\x2b\xb9\x2d\xdb\xcf\x53\xba\x1b\xe8\x76\x7d\x27\xb5\x37\x7b\x0d\xd1\x81\x68\x49\x62\x7d\xd3\x2c\x17\x6f\x0f\xba\xf5\xf0\xe6\xf8\x3d\x00\x00\xff\xff\xcf\x89\x9f\xfd\x9f\x06\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6f\xb6\xdb\xbe\x0a\xdc\x12\x20\x81\x60\x39\xb2\x6c\xed\x7f\x09\xef\x00\x72\xe2\xc4\xb9\x7f\xda\xbe\x0f\xbf\xe4\xdc\x36\x91\x6d\x04\xc3\x30\xa0\x08\xf8\xbb\x02\x93\x00\xd4\x22\x08\x82\x00\xba\x73\x93\x32\xd7\xab\x0d\x40\xf8\xcb\x97\x00\x40\x61\xa8\x28\x52\x80\xeb\xd4\xb1\x4d\x45\xac\xbe\x8b\x11\x37\x05\x29\xd4\x86\xb5\xd9\x39\x56\xb1\x70\xae\xf2\x01\x43\x77\xd5\x5c\x65\xc9\x55\xdd\x66\xdd\xc7\xd8\x73\x75\x5b\xf7\xf6\xb6\x19\x0d\xb1\x58\x25\xa8\xb9\xba\x15\x23\xd9\xb4\xe7\xaa\x94\x5c\x1d\x7d\x9b\x0a\x96\x76\x49\x97\x0f\x73\x1c\x38\xc6\x58\xf7\x1e\xca\x8d\x37\xf7\x5d\x61\xee\xbc\x95\x8a\x1c\x1e\x3b\x2e\x8f\x55\x5f\xd9\x50\x00\x50\xa0\x7b\xa4\x04\x1d\x4a\xe0\xc8\x28\x82\x50\xb0\xb1\xb8\x9d\x0a\x8c\x4f\x3c\xb5\xa0\x28\x3a\xe2\x15\x04\x08\x94\x00\x15\x7d\xc5\xf2\x73\x89\x6f\x98\xf7\x10\x00\x1a\x32\x28\x30\x1a\xac\xef\xa0\xa0\x45\x7d\x2f\xe0\xcd\xef\x0f\x88\x10\x60\x9a\xc7\xe3\x56\xd8\xed\xf8\xff\xcb\x86\x5f\x3d\x1c\xc7\x8d\x21\xdf\x16\x7f\x8a\x10\x76\x71\xa2\x68\x5a\x41\x92\x65\xa5\xf8\xae\x1e\xa1\xef\x45\x00\x4e\x10\xe7\x42\x87\x82\x76\x46\x71\x7a\xe8\x96\xad\x9c\xd6\x33\x6a\x05\x43\x28\x06\xb3\x3c\x50\xc4\x0a\x6f\x28\x22\xd7\xef\x50\x9c\xc3\xbd\xf6\x48\x4f\x0b\x82\x1f\x2d\x54\x85\xc2\xef\x96\x50\x3c\xba\x5a\x05\x28\xae\x9f\x11\x6b\x71\xae\x69\x20\xea\xd1\x67\x16\xcc\xad\x38\x87\x30\xfd\xcf\xbb\xb3\x42\x56\x8e\xc8\x56\x1e\xb4\x46\xae\x8a\x23\xa5\xb5\x34\x06\xab\x26\xec\x15\x54\x75\x37\x3e\x91\x88\xb7\x3c\xbd\x1f\x9f\xe3\x4f\x0f\xdd\x27\xbc\x7b\x18\x6b\x9f\xbd\x02\x2b\xe9\x93\x5e\x18\x93\xec\x20\x00\xfa\xe0\x1d\x77\xfa\xd2\x3b\x82\xf9\x1f\xc7\x56\x68\xfb\xda\x7b\x39\xfe\x88\x5b\xd2\xcb\xf5\x69\x7d\xaf\x6f\x32\x5f\x97\x49\x97\x3a\x76\xef\x40\xc9\x7d\xce\x08\x7e\x53\xaf\x8f\x5c\x7c\xaa\x5a\xda\xeb\x37\x55\x4b\xdb\x78\xaf\x5a\x40\xa3\x1f\xaa\x8c\x66\x79\x8f\x65\xfa\xbf\x8d\xf1\x1a\xcb\x2b\x32\x06\x86\xd7\xaa\xbe\x5b\x77\x8b\x5e\x93\xe4\x9e\xd9\x98\x61\x0b\xa1\x14\x0a\x95\xa8\x4f\x95\xf3\xbd\x04\x50\x72\xb7\x40\x1d\xf4\x03\x83\xee\x2b\x17\x1c\xe1\xea\x0b\x24\xf2\x90\x19\xd5\xf0\xde\xa5\x60\x69\x12\x2d\x6b\x14\x3c\x0b\xde\xc1\xca\x96\x21\x54\x78\x89\xe9\xad\x82\xee\xf5\x43\xbf\xdd\x27\xd6\xcb\x31\xa2\x8f\xb8\x8a\x06\x3e\xc3\x15\x2a\xee\xf7\x9c\x73\xf5\xfd\xb5\x30\x19\x9e\x0c\x59\x4f\x09\x6f\x9e\xef\xe4\x3d\x40\xee\x9f\xb1\x9a\xb3\x04\xb9\x66\x67\x70\x2f\x1e\x4c\x42\xb7\x8a\x61\x63\x4c\x6e\xea\xbe\x94\xa5\xe1\x61\xed\xc9\x97\xa5\xf3\xf8\xf2\x97\x39\x01\xae\xa5\xdc\x39\xa0\x88\xe2\x3c\x88\x5e\x58\xb1\xbd\xf1\xa8\x92\x06\x2e\xf4\x9a\xeb\xad\x65\xae\x91\x03\x91\x5a\x5e\xf9\xf7\xb6\x8b\xef\xe1\x57\xcf\x0c\x43\xa8\x55\xf6\x44\x45\x0a\x0d\xe5\x1a\x28\x59\x76\x2d\x85\x3b\x53\xda\x6c\x76\xec\x47\xd1\x62\x63\x6f\xbd\xed\xba\xed\xad\x1d\xd6\x0e\x1e\x6a\x2e\x0c\xf3\xa8\xb3\xc9\xd8\xb7\xed\xe8\xbd\x48\x95\x2a\x07\x69\x57\x31\xee\x4d\xb5\x9e\x75\x70\xe5\x79\xa7\xd4\x94\xdf\x22\xd4\xf5\x2d\x52\x8f\x09\x23\x3b\x75\x93\x77\xf4\x46\x5b\xfd\xf4\x8a\x9e\x76\x7c\x45\x6f\xa7\x6f\xd1\xa3\xaf\xd1\xb3\xec\x16\x1e\x15\x42\x9d\x9b\x3d\x39\xe7\xa8\x76\xd2\x54\x13\xbd\x55\x7f\xe0\x79\x74\xa4\x9d\x4b\xb3\xbd\x57\xdb\x58\xb0\xb4\x42\x6d\x1e\xa5\xf6\x71\x8c\x43\xb9\x1f\xa6\x7d\x1c\x73\xe8\x31\xa6\x1d\x3a\x67\x11\x56\x02\x82\x7d\x53\x56\xfa\x17\x95\xfc\x42\x1f\x59\xbe\xd3\x47\xae\x37\x7d\xfc\x38\xd5\xb0\xe1\x5f\x4f\x35\x1f\xd5\xb6\xd3\xd9\x7d\x62\xca\xfd\xc0\xcf\x3b\x77\x9c\x33\x2b\xc7\x3c\xea\x35\xc7\x0c\x2b\xee\xc0\x68\x45\x2e\xd4\x42\x47\x04\x9d\x25\x3c\x29\x7a\xe2\xba\xc3\x57\x8e\xc2\x6d\x1e\xbc\xbd\x77\x1a\x47\xca\xab\xb2\x1e\x4b\xa1\x9d\x64\x55\xeb\xe5\x59\x01\xfc\xf6\x59\xc3\xba\x62\x4b\x75\xba\xf2\xd5\x68\x3e\x94\x1d\x33\x0b\x43\x1f\x59\xf0\x8e\xfa\xa7\x68\x48\xdd\xbe\xac\x22\x61\x7b\xab\x22\x91\xfe\x8b\x2a\x92\xc6\xff\x97\x2a\x12\x3b\xbe\xaa\xa2\xbf\x8f\x77\xbc\xeb\x63\x74\xb6\xf6\x88\xe7\xa7\x97\x33\xf5\xa6\x4c\x64\x60\xe4\xda\x14\x9d\xbc\x19\x30\x9f\xf9\x9f\xfd\xd2\xb1\x63\x16\xf1\xfe\x96\x55\xfa\xe5\x64\xf9\x45\x5f\x5c\x15\xd5\x6a\xa8\x5b\x4c\x36\xbf\xe8\x61\xc1\x24\xaf\x9d\x7b\x17\x6b\x05\xfd\xc4\xf5\xda\xb3\x9c\x99\x4f\x1d\xfe\x38\x27\xc8\xcf\x9d\x85\x40\x8b\x5d\x3a\x4b\x7a\x9f\xfe\x2b\xbf\xf1\xaa\xf5\x5d\xeb\xe2\x74\xf0\xcb\xed\xb9\xf7\xf8\x78\xc6\xc6\xb3\x6a\xde\x63\x8d\x69\xf3\x51\x39\x4f\xf5\x88\x4f\xf0\xaf\xde\x1e\xeb\xdc\xe0\xd6\xa2\xe3\x3e\x2c\xc6\xb4\x9c\x18\x01\xda\x9a\xc1\xb3\xca\xdb\xac\xdf\xfb\xfb\x43\xbc\x8a\xeb\xf9\xdc\xd9\x15\x3d\xcf\xac\xb4\x74\xc1\x90\x63\xaa\x53\x4e\x1f\xb4\x18\x69\x0b\x26\x7a\x66\x95\xe9\xe4\x05\x9a\xca\xc5\x33\xad\xf8\x23\x92\xa7\x7e\x7d\xec\xc0\x0f\x5f\xe2\xbc\x61\x3e\xbd\x96\x55\xbd\xa8\x94\x13\xa3\x05\x8a\x56\x0d\xac\x32\xab\xa0\xc4\x14\x06\x2a\x16\xa7\x0e\x82\xe5\xfd\x42\x30\xaa\x5b\x4d\x1e\x1e\x97\x50\xb7\xde\x25\xeb\x3d\x38\x5c\x9f\xa7\xdc\x93\x9f\xa1\x3e\x7b\x74\x2f\x04\xd3\x9a\x2a\xe4\xab\x5b\xe7\x96\xda\xee\x57\xe0\xc8\x89\x2f\x31\xcf\x5a\x5a\x9f\x49\x03\xaf\x1d\x6c\x69\x4c\xee\x69\xf8\x09\x9d\x73\xcf\x43\x63\xa6\x0e\xdb\x3d\x4e\x29\x99\x91\xb3\x5f\x65\x8d\x7d\x3a\x05\x69\xb9\x31\x8f\xed\xa2\x7e\xcc\xbc\x5d\x99\xdb\xea\xef\x7f\x05\xf2\xc9\xd8\x3e\xf3\x9d\x6e\xbb\xd6\x97\x5d\x9f\x7c\x37\xae\x6f\xd5\x69\x7c\x9c\x08\x77\x7a\x70\x9f\x5f\xb8\x5f\x2f\x0c\xb3\x46\x9f\xb8\xeb\x08\x39\x7b\x99\xdf\xb2\x78\x3f\x99\x5c\xfc\x5c\x5c\xbf\x78\xea\x7e\xae\x28\x1f\xaa\x8d\xf2\x27\x38\x01\xdd\x98\x9d\xca\x2d\xa1\xdd\xe1\x15\xc1\x5d\x99\x57\x77\xa4\xbc\x87\x7f\x79\x26\x8a\xa7\x88\xf9\x72\x4e\xe9\xd0\x82\x9d\xde\xd1\xb2\x53\x3c\x4e\x4d\x99\xc3\x3b\xf7\xd6\x64\x15\x4f\x9c\x4c\x1d\xab\x3a\x92\xdb\xbf\xf3\xe6\x93\xed\xd7\xdd\x63\x27\xf2\x5a\x39\xbd\x95\xf8\x75\xcb\x67\xb7\xec\x7f\x5a\xd4\x77\x70\x1d\xf7\x3d\xba\xc9\xe9\x41\xea\x99\xb3\x83\x59\x09\xcf\xab\x2d\x95\x21\xee\x41\xc4\xe7\xba\x12\x3b\x3f\xf8\x79\x3e\xbb\x9c\xb8\x10\x7a\xdb\x56\xfd\x7b\x5d\x52\xd6\xc5\x35\xf2\xcc\x44\x6a\xa7\x16\x8e\xdf\x70\x7c\x7c\xc9\xe9\x61\xf1\xb8\x3c\xb8\x04\x71\xc2\xf1\xb9\xe2\xf2\x5b\x4f\x76\xa0\x7a\xf8\xde\x7e\xde\x51\x3a\x3d\xec\xe7\x69\x60\x69\x6d\x6a\xd2\x18\xfe\xa5\xfb\xc8\x43\xad\xb7\xde\xa8\x80\x4f\xe2\xfb\x21\x93\xb4\x82\x56\xaa\xaa\x7e\xe2\x9f\x5b\x83\x4a\x47\x19\xa5\x96\xbd\xd4\x5e\x4b\x17\x12\x93\x1d\x8f\xc3\x44\xb0\x4f\x83\xde\x08\xa8\x16\x99\xdd\x13\xf4\xbf\x00\x00\x00\xff\xff\xab\xc1\xc3\xc3\x18\x16\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x6f\xa3\x3c\x10\xfd\x2f\x3e\x73\xea\xf7\x6d\xb5\xca\xad\xad\xd4\xd5\x1e\xb6\x95\xda\x74\xf7\x50\x55\xd5\x00\x93\xc4\x92\xb1\x91\x3d\x26\x65\xab\xfe\xf7\x15\x84\x40\xb2\xc5\x18\x36\x24\xe4\x94\x48\x3c\x9b\x79\xe3\xe7\x37\x8f\xe7\x77\x16\x29\x69\x08\x24\xb1\x19\x69\x8b\x01\xe3\x32\xb5\x64\xd8\xec\xf9\x25\x60\x12\x12\x64\xb3\xcd\x4f\xc0\x94\xa5\xea\xd1\xfb\xf6\x09\x0b\x18\xe5\x69\xf1\xcf\x90\xe6\x72\xc9\x3e\x5e\x02\x96\x42\x0e\xa1\x40\x36\x5b\x80\x30\x18\x30\x43\x40\xf8\xc3\x12\x84\x5c\x70\xca\xd9\x8c\xa5\x56\x63\xb3\x74\x61\x65\x44\x5c\x49\xf6\x11\xec\x96\x53\xad\xae\xeb\xa9\x5f\xfa\xaa\x31\xe2\x98\xa1\x6e\xb6\x80\x38\xd6\x68\x4c\xb9\xc3\x16\x05\x89\xb2\x92\x1a\x8c\xe5\x92\x2e\xbe\x5c\x96\x25\x56\x18\x48\x53\xad\x32\x07\x37\x63\xa3\xa8\xd8\xb3\xde\x20\x54\x4a\xf4\x24\x28\x95\xdc\x82\x8e\x4d\x53\xf0\x84\xb7\xb1\xdc\x81\x44\x1a\x63\x4e\xdf\xb4\x5a\xd3\xea\x01\x08\xf7\xd1\x97\xff\xef\x81\xf1\x2d\xe5\xba\x05\xd2\x74\xcd\xac\x40\xe3\x5c\xed\x75\x6d\xec\xae\x38\xb5\x48\x8a\x40\x3c\xda\x34\x15\xb9\x4f\x92\xbb\x07\xee\x2f\x2e\xe3\xb8\x3e\xe0\xb0\x22\x25\x49\x43\x44\x57\x71\xec\x39\x30\x89\xeb\xfb\xb5\x6c\x3d\xd6\x9d\x1e\x23\xdd\x55\xb8\x5b\xa5\x6f\xaa\xcd\x8f\xda\x72\x37\xb7\x85\x56\x49\x37\x27\x52\x07\xdf\x45\xd2\x20\xcd\x02\xf5\xed\xe6\x65\xd3\x5d\x48\xa7\xf4\x62\x8c\x78\x02\xc2\xf4\xd1\xdd\xd7\xd3\x38\x61\x7f\xd5\xa9\x3e\x92\x3b\x13\xbd\xf9\x6b\xb5\x69\x0c\x84\xd7\x20\x40\x46\xde\xd1\x34\xcc\x07\x46\x61\x10\x81\x10\x3e\xe3\x2e\x31\x78\xf0\xbd\x29\xca\xb1\xae\xf9\xfc\x5a\x3d\x75\x74\xf3\x98\xf7\x66\x88\x7d\x74\x4c\xba\x86\xe8\x12\xe9\x2a\x03\x2e\x8a\x62\x6e\xca\x89\xd6\xeb\x26\x8e\x3c\x01\x5c\x2c\x33\xd4\xa6\x40\x77\x1d\x55\xc8\x35\xad\x7e\x71\x5a\xfd\x2c\xa9\x4e\x5c\x7a\x53\x97\x40\xb9\xa4\xd5\xfd\xe2\x01\x33\x5e\x90\x98\xa2\xaf\x63\x78\xdc\x68\xb9\xb0\x34\xa0\xab\x33\x08\x87\xce\x3b\xe5\xb7\xc8\x70\x63\x8e\xf7\x8b\x76\x02\x61\xed\x9d\x13\x08\xce\xe4\x49\xa8\xc4\xe9\x3f\x29\x5c\xed\xdc\x39\xc6\x9c\xd0\xfc\x77\xf1\x29\xee\xc6\x9d\x8e\xe3\xcf\xe0\xae\x54\xdd\x20\x86\x84\xf4\x0d\xd6\x3c\x19\x8c\x3b\xdf\x6a\x24\xa4\x73\x9e\xb4\xa7\xf9\x63\x1f\xf2\xd3\xdd\xf7\x79\x1f\x23\x19\xb7\x9c\x13\x7c\x35\x46\x2b\xd0\x4b\x9c\x28\x1b\x8d\x98\xb4\xcf\xd2\xd9\xfa\xcc\x51\xe2\x09\x4e\x37\x46\xdd\x67\x93\x29\x2a\x0c\xab\xcb\x95\xb9\xe4\xc4\x41\xf0\xdf\x53\xe9\xa7\xcc\x20\x9d\xdd\x35\x48\x55\xb0\xbe\xae\xb0\x27\xfb\xcc\xf7\xcf\xb7\x1d\xa5\x9b\x14\x65\xec\x19\x82\x20\x84\x5a\xbb\xbf\x11\x34\x26\xc0\xe5\xde\x99\x9d\x72\x0c\xd6\x7a\xe9\x94\xf0\xb0\xc0\xde\x51\x11\x48\x25\xf3\x44\x59\xd3\xa6\x0f\x2e\x63\x7c\xc3\x78\x5b\xad\x3f\xbb\x3b\x16\xb8\xfc\xa9\x86\x57\xaf\xae\xef\x0c\x08\xeb\x48\x21\x15\x64\xde\xd8\x55\x05\xc2\x0c\x25\xfd\x33\xa5\x0e\x69\x39\x56\xb8\x95\x76\x10\xb1\x4d\xc0\x04\x31\x12\x31\x7c\xc3\xc8\x92\x1a\x56\x26\x7d\x4a\x07\xdb\x08\xe1\x58\xe0\xf7\x8f\xc7\x4f\xfe\x31\x06\xbb\xa1\x42\x1c\xaa\xc3\x8e\x08\xe7\x58\xd2\x1d\xd8\x3c\x8b\xdb\xf2\xe0\xdf\x7d\x2c\x72\xe7\xed\x1e\xed\xaa\x83\x2f\x7f\x02\x00\x00\xff\xff\xc1\xc4\xc8\x4b\xb7\x17\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x0d\x92\xeb\x28\x0e\xbe\x92\x7e\x10\x88\xe3\x00\x86\xfb\x1f\x61\x4b\x02\x27\x8e\xed\xa4\xd3\xef\xed\x4e\x4d\xd5\x76\x6a\xe6\x75\x13\x0c\x92\x90\x3e\x7d\x12\x8e\x60\x9f\x00\x42\x11\x20\x70\x44\x88\x08\x48\x43\x52\xe4\xb1\x7e\x22\x74\x88\x00\x04\x25\x02\x00\x0b\x04\x8c\x91\x21\x8e\x6d\xeb\xc0\x8a\x18\xec\x19\x0e\x92\x14\x22\x43\x96\x5e\x52\xe5\x39\x5a\xfb\x1a\xed\xdc\x49\xdb\x9a\x3b\xd6\x5c\x54\x8c\xb0\x6d\x9b\x8f\x12\xd5\x39\x4a\x8c\x99\x64\xcd\x25\x81\x7d\xb4\x6a\xa2\x7d\x6e\x92\x39\xca\xc8\xad\x4b\x4c\x73\x34\x6f\x6b\x34\x0e\x08\x9a\xa6\x0c\xd4\xe2\x1c\x0d\x50\x35\x80\x94\x39\xda\xd7\x6e\xa1\x95\x2c\xb9\x80\x8f\x32\x94\x39\x2a\x31\x64\x10\x1e\x73\x34\x2c\x2d\xa4\x0b\x15\x48\x53\x32\x4e\x3c\x47\xe3\x46\x4c\xa5\x4c\x19\x58\xf3\x3e\x1a\x22\x48\x5b\x2b\xe4\x36\x47\x13\x14\x50\xe2\xb5\x42\x5b\x76\xc8\xb2\x69\xae\x61\x8d\xf6\xb5\x6e\xce\x03\x20\x84\xb5\xc2\x58\x5a\xe4\x4d\x3b\x61\x9a\xbb\x85\xb0\xb4\x28\x3c\x46\xc9\x6d\x5a\x27\xa4\x7d\x34\x83\xe4\x56\xeb\x1c\xdd\xad\x53\x53\xeb\xb8\x85\x69\x87\x50\xc7\x1c\x6d\x61\x8b\x71\xeb\x3a\x47\xb7\x65\xdf\x26\x35\x0e\xcc\x32\x47\xf7\x73\xdb\xb6\x48\x7d\xe3\xee\xa3\xb2\xdb\x6c\xb4\x8e\xad\xb5\xb9\xae\x98\x0f\x49\x35\x8f\x51\x18\x9b\x54\x0e\x28\xee\x27\xe6\x5b\x8f\x51\x1b\x09\xc9\xe6\x07\x92\x68\xf3\x03\x08\x46\x20\x50\x50\x12\x52\xcc\xa0\x08\xa8\xac\xa8\x28\xf6\x1f\xd9\xb7\x80\x19\x05\x14\x04\x33\xac\xbf\xed\x09\x56\xb6\xb5\xa5\xda\x7c\x84\xb9\xa3\xba\x3d\x95\xc0\x9e\x67\xff\x77\xad\x61\xdf\xc6\x6a\xfb\x0a\xcc\x4f\xf6\xff\x6c\x47\x5b\x17\x07\x46\x5d\xab\x54\x58\xab\xb0\xba\x84\xb6\xae\xaf\x62\x41\x83\x00\x50\x80\x31\x63\x7c\x95\xd0\x56\xce\x34\xd7\x9e\xba\x29\x64\xf3\x07\x18\xfc\xb4\x49\xcb\x67\x9b\x78\xc4\x61\x84\xb2\x22\x0f\xd8\xe3\x53\x30\x46\xa0\xc0\xf6\x94\x68\x78\x5a\x2c\x9b\x72\xf2\xdc\xfb\xfd\x5e\xe3\x6c\x7f\xa2\xfc\xc3\x5e\x69\x9c\x7e\x22\x84\xc0\xa2\x88\xd1\xac\x14\xe7\x5c\x04\x19\x60\x12\x99\xfd\xd7\x6e\xc4\xf1\xbc\x1b\xf7\x88\x90\x2a\x1c\x65\xff\x42\x6e\x92\xfa\xad\xdc\xbb\x5c\xb4\xcb\x95\xaa\xd8\x6e\xfb\x4a\x0a\xdf\x5a\xfb\xb4\x92\x6b\x1d\x11\xd4\x16\x7a\xae\x57\xf4\x2c\x59\x35\x14\x2d\x4d\x8e\x1e\x3d\x46\x86\x8c\x47\xff\x78\xaf\xeb\x86\x7f\xac\x6b\x69\xe5\x28\xdb\xb8\xb3\xff\xbb\xd3\x46\xa8\x71\x3b\x3c\xcd\x28\xa7\xa7\x99\xe9\x57\x96\xda\x30\x1e\x6d\xf0\xfa\xe4\xd7\xf6\x60\x39\xc7\xc7\x5b\x2d\x2e\xf6\xe8\x54\x8f\x1a\xa5\x7e\xbb\xd2\x94\x76\xf0\x38\xce\xcd\xe1\xd6\x77\x47\x3e\x9e\x3e\x97\xf4\x97\xde\x34\x72\x3a\xae\xd7\x2e\xf1\xf9\xe9\xc4\x0c\x06\x8e\x4f\xf7\xb3\x7e\x8e\xae\x68\x39\xf0\x39\x2b\xc0\xd9\xbf\x02\xb4\xdd\x0a\xc8\x90\x0e\xb1\x19\x54\x84\xae\x08\x90\x59\x83\xe3\x03\x68\x34\x3c\xcd\xa8\xec\x3a\x19\x0a\x47\xc3\x3e\x3b\x5d\x3b\xd9\x08\x2a\xcf\xbf\xed\xc4\xa3\x23\xf5\x44\xe1\x02\x36\x6e\x68\x7b\x7b\xf2\x86\x70\x27\x49\xa5\x9b\x8c\xa1\x1c\xfc\xea\x2a\xdd\xb7\x9e\x15\xf4\x12\x1f\x3f\xa2\x21\x22\xcb\x8b\x35\x2f\xf1\xff\x05\x7a\x23\xd7\x70\x5c\xa3\x95\xf7\x7e\x89\x92\xe8\x38\xb7\x9f\xf1\xeb\x93\xcc\x88\xd2\xf8\xf8\xf4\x1b\xfc\x9f\x3b\x45\x3c\xee\x24\x97\xf8\xff\x3a\xee\x30\xc5\xa3\x8d\x84\xcf\xfa\x19\x92\x20\xa6\x19\x4b\x9e\xff\x4b\x44\xd4\xc0\xfb\xb9\xea\xca\x0c\xeb\xf4\x0c\x77\x8a\x9d\x68\x1a\x12\x83\x48\x20\x73\x8e\x1e\x25\x51\x4c\x29\xc3\x2f\x7e\xdc\x6b\x9d\x05\x58\xb6\x97\x9a\x57\x2e\x7a\xd5\x8b\x8d\x41\x44\x97\x79\xb1\x0e\x70\x6f\xda\xb3\x95\x7b\x3a\x13\xe4\xa0\xc9\x58\x82\x06\xa1\x1c\xa6\x97\x1b\x4f\x20\x50\xc9\x20\x92\x21\x93\x79\x7f\x1a\xda\xa4\x76\xec\xd2\x6b\x6f\x69\x93\xba\x61\x18\x09\x03\xa5\x0d\xbb\x86\xc1\xdb\x06\x8c\xa1\xc1\x48\x95\x28\x63\x97\x4a\x00\xa5\x69\x4b\x8d\x6b\x26\xc9\x73\xc5\x0f\xf9\xb2\xb0\xb8\xe7\xd9\x8e\xce\x39\xe2\xce\xc0\x3c\x3b\x37\x66\xb3\x79\xf1\x71\xe3\x0b\x46\xf7\xe1\x8c\x5f\x96\xe0\xe2\x71\x9e\x8f\xbd\x9c\x5f\xb8\x41\x04\xc3\x03\x73\x20\x23\xfb\xc7\xb9\xcc\xce\xd4\xe4\x6c\x5f\x8c\x7a\xc9\x25\x16\xca\xd9\x98\x25\x03\x75\x88\xa3\x0d\x6c\xa3\x47\x61\x06\xee\xd4\x4b\x8d\xda\xfb\x90\x86\x83\x52\x46\x1c\x25\x6f\x39\x0c\xd2\x00\x3a\x7a\x0e\x42\x23\xa9\x26\xfb\x2c\xf4\x22\xe5\x5b\xf4\x42\xa5\x85\x5e\x86\x85\xf4\x40\x2e\x7e\x45\xae\x2b\x36\x15\xe3\xa1\x71\xe1\x4e\x73\xde\xf7\xc6\xc7\x4e\xb9\xce\xf1\x52\x8d\x7d\x90\xb8\x3f\x64\x32\x9a\x1b\x01\xc3\x83\x91\xea\xf9\x3c\xc9\xf9\xe8\x5c\x27\xbc\xc4\xc3\xf4\x01\x8d\xb6\xda\xcd\x59\x80\xc6\xa5\xdf\x0b\xfa\x6a\x32\xbd\x95\x6d\xcc\x3d\x1a\x76\x7c\x36\x9e\x2d\x14\x68\xca\x15\xd7\x73\x42\x1a\x7c\x07\x00\x2b\x87\xcc\xa7\x27\x07\x97\x47\x0c\x4d\x26\x4c\x80\x0a\x12\xae\x92\x18\x23\xbe\xb1\xff\xda\x67\xca\x85\xc9\xe2\xc4\x4f\x60\x72\x74\x5f\xd3\xf4\x34\x35\x26\xb7\x56\x94\xa0\x37\x48\x0f\x64\x3b\x64\x50\xbe\xd9\x3b\x02\xcd\xb5\x65\xea\xf9\x5c\xdd\x7e\x13\xd7\x72\xd7\x81\xa7\x2c\xbf\xd4\xe3\xa2\xc5\x5e\x47\xac\xcf\x8a\xbf\x85\x30\xc6\x44\xbb\xd2\x25\x06\xd3\x85\xff\xa7\x8d\x14\x4f\x31\x98\xb6\xf6\x32\xeb\xe4\x61\x4a\x3b\x5e\xed\xf8\x00\x5e\x9f\x4c\xac\x32\x5f\x92\xc0\xa4\x2e\x2f\x46\x9c\xb8\xac\xbc\xf9\x9a\xbf\x5c\xc9\x6c\x94\xf8\x6c\x8d\x77\x3f\x7e\x42\xce\x0f\x5e\x2c\x55\x4f\x08\xb5\xe3\x94\x0a\x68\x3a\xe9\xae\x8b\xb7\xbd\xca\x09\xaa\xbf\xd1\xf8\xb0\xce\xd3\xd2\x86\x17\x67\xb4\xd3\x7c\xe6\x47\x9a\x8b\xc9\xb4\xf3\x63\xab\xe8\x6c\xb4\x88\x1e\x58\xb3\xe3\x5c\x50\xb6\xba\x73\x55\x8d\xda\x44\x92\x80\x9d\x25\x68\x33\xec\x38\xf6\x55\x10\x53\x8b\x93\x21\x23\x4a\xdd\x9f\x19\xc9\x9e\xf9\x42\xdb\xfb\x7c\xc4\x5a\x2c\xc6\x85\x2c\xca\x2c\x66\x25\x58\xde\x30\xa9\x96\x7e\xa5\xc6\x1b\x6b\xa6\xd3\xea\x78\xb6\x65\x44\x98\x59\x28\xbe\xea\xb0\xc9\xce\xf2\x2f\x12\xe7\xf7\x6b\xce\x1c\x99\xad\x0a\x60\xcb\x92\xa6\x9d\xcd\xda\x77\x92\x72\xdd\x69\xb7\xd6\x7b\xdb\x3c\x72\x35\xde\xda\xc6\xb2\xb1\x88\x64\xd2\xba\xf3\x43\xf0\x1c\xa1\xac\x48\x90\xfd\xe9\x7c\x90\x22\x6f\x7f\xa5\xef\xbb\x13\xaa\xa7\x13\xb2\x53\xc9\xad\x5d\x3c\xb1\xc4\xe8\xfe\x13\x2e\x7b\x59\x84\x72\x83\xde\xa1\x6a\x61\x56\xf7\x57\xde\x33\xd3\xb3\x63\xf7\x90\xdc\xce\x17\xe8\x69\x9d\xc3\x5a\xce\x4b\xc1\xf3\xd0\x83\x5b\xf8\x5f\xce\x37\x68\xf5\x08\x83\x67\xc7\xf5\x7d\xf4\xbf\xd4\xb3\x82\xc5\x74\xf4\x4c\xaa\x41\x83\x9d\xab\x06\x4e\xbe\x9a\xb3\x90\xfc\x82\x8a\x33\xeb\xcc\x2c\xa7\x6c\x9a\xf8\xb9\x25\x05\xde\xf1\xb0\xc8\xa5\xfe\x6d\x51\x0a\xf0\xc0\x7d\x46\xa4\xe3\x8c\xb5\x76\xbd\x65\x19\x17\x4f\xb7\x34\xb2\x6d\x83\x84\xca\x86\xb5\x53\xd3\x5c\x63\x6e\x56\xb5\xeb\x68\x9c\x74\x2b\x25\x0b\xd5\x92\x06\x46\x6e\xa1\x20\x46\xd2\x21\x52\xc2\x36\x84\xb8\x72\x1f\x0f\x86\xf1\x81\x8b\x39\x13\x63\x47\x8a\x52\xeb\x23\x17\xf0\xec\x0a\xb9\x65\x78\xef\x0d\xcd\x6f\x91\x66\xa6\xe0\x4b\xf4\x63\x64\xbe\x8e\x19\x8a\x4f\x7b\xf4\x33\xbf\x2e\x83\x6f\x32\x4d\x19\x67\xfc\xab\x90\x2e\x99\xc6\xd0\xe8\x53\xa6\x81\x59\xeb\x7d\xc2\x5d\x8c\x6b\xc7\xdb\x0c\xb3\xf3\xaf\xff\x6e\x86\x99\xd9\x78\x65\x97\xbb\xf8\x3c\x67\xb5\xd9\x67\xc4\xbc\x23\x12\xd9\x29\x1a\xcf\xc8\x70\xc7\x26\x96\x46\x75\xe3\x1b\xf4\x3c\x5b\xe4\xb4\xb6\xc5\x88\xad\xfe\x9e\x5d\xdc\x71\xea\x87\x36\x7e\x52\x5b\x53\x7e\x56\xfc\x17\x09\xc2\x1d\x02\x3e\x2d\xba\x38\xa0\x69\xd0\x80\xb2\xbb\x0f\xa6\x9e\x3e\xad\xf5\x8d\x36\xe9\x22\xf5\xf9\xe7\xcc\x8d\x9d\x4b\xe9\x95\x3b\xc7\x1f\xcf\x79\x66\x0b\x8c\x93\x3f\x02\xed\x7c\xe2\xf7\x16\x35\x2b\x98\x35\xf7\x6e\x4e\x5e\xc8\xa4\x88\xe8\xa7\xdc\x46\xf8\xbb\x53\xfe\xd9\x2e\x57\xd9\xd2\x8d\x55\x7e\xae\x66\xcd\xa2\x86\xbe\x1f\x19\xf0\xf5\x8c\x6f\x75\x39\xc6\xf0\xa3\x7f\x8d\xf9\x86\xa9\xfd\x1a\xa3\x36\x6e\x27\xec\xd9\x42\xd4\xa8\xfa\xec\xd2\x19\x1a\x4e\x06\x65\xdf\x6e\x43\x92\xca\x8e\xb4\xff\xbb\x6a\x2b\xfb\x09\xce\x7a\xeb\x25\x82\xc2\xab\x45\x0c\xa5\xf4\x63\x85\xf0\xd1\xe3\x66\xd5\x11\x32\x2c\xf6\xb8\xb5\xc9\xa5\x9c\xd7\x3c\xac\xcb\x6f\xf7\xf6\x9a\x45\xe5\x94\x51\x10\xb6\xae\x2f\xdc\x14\xdc\x86\xfb\xed\xc7\x36\xce\xf5\x7d\x37\xc4\xff\x9a\xd3\x9c\x39\xe7\xd9\x4b\x44\x20\x87\x2c\x39\x5c\xab\x9e\xdd\x53\xd4\x00\xeb\xdf\x73\x86\x68\x67\x68\xde\x6d\x32\xfb\x59\xdc\x9c\x59\xa0\x85\x03\x3d\xaf\x7b\x87\x65\xf7\xc1\x6e\x27\xab\x47\x27\x77\xb4\xb5\xdc\x5f\x7b\x85\xbb\x99\x7b\x7d\xec\xf3\x79\xce\xb7\xd9\x43\xf2\x4d\xc4\xde\xe1\xa2\xd7\xa5\xc1\x3b\x6c\x56\x47\xf4\x9e\x33\x86\xd9\x49\xbd\x3d\xc3\x0c\x2f\xe3\x6a\xe5\xc7\x92\x64\xc9\xeb\x99\xc0\xb0\xce\xe5\x84\x26\xc9\xf4\xb9\xc8\x4d\x4b\x6e\x1b\xe3\xec\xdf\x39\xff\xe7\xfb\x7d\x95\x6d\xe5\x37\x32\x1d\x59\xcf\xa9\x3b\x15\xe7\x4d\xdc\x08\xf5\x89\xc7\x56\x85\xae\x13\x18\xa2\x27\x36\x62\xfc\x62\x62\xca\x88\x79\xd5\x4a\x2e\x9d\xb6\xa7\xef\x49\x50\xce\x0f\x1d\x53\x92\x34\xba\xdb\xc6\x9e\x77\xc6\x66\xbf\x19\x3b\x77\x8f\x23\x58\x5d\x07\xd3\xc1\xbb\x82\x2f\xa8\xe7\xa3\xbb\xbc\x08\xa3\x90\x86\x0b\xbb\x1a\x65\x3b\xc5\xda\xa8\x51\xf9\xc4\xae\x46\x83\x1f\xd8\x95\xfc\xb6\x8e\xf7\x0b\xdb\xbb\xfa\x58\xbe\xec\x60\xea\xb9\x83\x39\xe3\x69\xef\x61\xfe\x93\xbd\x4b\x67\x38\x38\xef\x64\xe7\x5d\xee\x99\x25\xff\x19\xab\xbb\x8b\x72\xb5\xe0\x78\xfd\xe4\x79\x96\x08\x79\xe1\x66\x2e\x16\x15\x48\x75\x32\x25\xfb\x66\x3c\xfd\xf4\x22\xcd\xf6\x63\x56\x85\x9c\xc5\x56\xb7\x9a\x75\xed\xd5\x2c\x02\xd3\x69\xa7\xf3\xca\xed\x3b\xee\x21\xe1\x0e\x43\x14\x21\xfc\xcc\xaf\x30\x9a\x5c\x7f\xc2\x42\xb2\x21\xed\x8d\x85\xad\xf6\xd3\x1c\x11\x91\xc7\x62\x2a\xd5\xcf\x78\xdd\x69\x58\x8c\xab\x69\x8d\xa1\xef\x5d\x0f\xcd\xc0\x1a\x31\xcc\x78\x41\x7f\x87\xc4\xff\xf5\xff\x97\x12\x13\x6c\x1d\x6a\xac\x5c\x52\x0c\x9e\x3b\x6e\x76\xb6\xb9\xb9\xfb\xff\xad\x0e\x42\x15\x1d\x81\x26\x26\x65\xe7\x34\x4f\xa4\x5a\xf8\xd5\xde\x22\xa7\xa3\xae\xcb\x36\xfc\xbe\x7f\xdd\x14\x9e\xe7\x53\x5b\x2b\xe5\x33\x0e\xee\x9d\x8b\xd7\x33\xd6\x99\x37\xab\xaa\xca\xcc\xd7\xfe\x8d\xeb\xb9\xb1\x1e\xee\x24\x27\x36\x23\x6e\x5d\x0f\x37\x42\xce\x97\x44\x65\xa1\x00\x39\xc3\x42\xc4\x11\x66\x25\x7c\xb4\xb4\x61\xae\xcf\x91\x3f\xb2\x22\x91\xee\x56\x34\xc6\xf6\xc1\x8a\xfa\xce\x8a\xe6\x5b\xb6\x52\x69\x8f\xbc\x98\xbd\xfb\xb0\xa4\x4f\xd1\xa5\xa7\xd8\xde\x4a\x78\x91\x26\x90\xe6\x37\x19\xc7\x22\xec\x1c\x53\x88\xa4\x74\x63\x1b\x58\x92\xe5\xef\x77\xd6\xf8\x69\xe7\xa9\x5f\x86\x1c\x00\xb3\x65\x00\x6c\x74\x7c\xcf\xe4\xf8\x39\x64\x1a\x44\x6a\xfd\xc7\x7b\xb0\xb0\xee\xc1\x42\xd0\x30\x84\x7e\x1b\xab\x4f\xc6\x75\xbc\x07\x7b\xe4\xb7\x07\x63\x82\x43\xa6\xd8\x6b\xf2\x17\x36\xb3\xd8\x84\x77\xcf\x21\xf3\x62\x55\xf7\xf7\x11\x56\xb5\xf1\x1b\x76\xc3\x8b\xdd\x10\x46\x9d\x95\xfb\xc5\xfe\xba\xa3\xed\xaf\xeb\x0e\xe4\x74\xba\x9f\x45\x56\xf4\xda\xef\xc0\x98\x6d\x34\xcf\xf1\xaf\x3a\x8e\xb3\x0e\xfd\x84\xf4\xb3\x46\x5d\x37\x02\x97\x2e\x37\x72\x63\xe6\x73\x47\x19\xb9\xf5\x73\x47\xd9\x9f\x10\x0b\xa3\xa9\x4d\x87\xd9\x11\x9c\x7d\xe6\xbd\x6b\x8c\x3c\xca\xde\x69\x46\x1e\xfa\xb9\xd3\xec\x4f\x48\xcc\x57\xce\xc0\x3f\x56\x85\x11\xd1\x82\xee\xeb\xae\x28\xbf\xc9\xd0\xdf\x74\x81\x31\xc8\x4d\xff\xf5\x6d\x17\xf8\xa7\x0e\xb6\x69\x1d\xd2\x38\x77\x59\x51\x30\xff\xff\x75\x59\x51\xe0\xf2\x7e\xcb\x6b\x97\x15\x4f\xf7\xff\x9f\xba\xac\x77\x11\xf8\x8f\x77\x59\x9f\x95\xcb\xb5\x06\xdb\xb9\xa5\xa4\x7e\x57\x65\xa0\x68\x7d\x57\x65\xa0\xe4\xf6\x4d\x95\x81\x52\xca\x57\x55\x06\xec\x55\xc6\x13\xf9\x7f\x8d\x6a\xd2\xf9\x24\xaf\xfc\xbe\x67\x7a\x41\xb5\x9b\x7b\xd9\xa5\xab\x38\xce\x43\x86\xab\x54\xae\xff\xe3\x8e\x0d\x4f\xf7\xff\xfe\x1b\xa1\xbf\x1c\xc0\xa7\xfa\x08\x63\x90\xf7\x3d\x38\x8c\x5b\x70\x46\x10\xa5\xad\xbc\xc3\xcf\x9c\x1d\x68\xf1\x06\x9f\x35\xfd\x7b\xbe\x95\x69\xde\x2e\xab\x03\x32\x67\x18\xb3\xf8\xae\xfa\x73\x3e\x2d\x72\xa3\xa5\xf9\x73\x85\xb6\x71\xa0\xad\x82\xb4\x4d\x5a\x67\xac\x5c\x3b\x36\x65\xca\x4d\x47\x4f\x99\x28\x8b\x95\x59\xd4\x69\x0b\xa9\x72\x4b\x94\x9a\x6c\x28\xdd\xb8\x5b\xb0\xaa\x71\x7a\x34\xce\x7b\xf5\x3d\x03\xef\x77\xfa\xa7\xb7\x0d\x68\x75\xd0\x0f\xfe\xb6\x77\x30\x4c\xaf\x1e\x75\x76\xf9\x75\x9e\x53\xc6\xcf\x7e\x77\xc7\x27\x02\xed\xb1\xe5\xbd\xad\xe8\x58\xe3\x7e\x79\xbd\xeb\xdf\x6f\xe6\xf7\x7b\xee\x7f\x8b\x95\xde\xd5\x86\x37\xf7\x0c\x6f\x6e\xe4\x8c\xa9\x61\x7c\x74\x9a\x56\x06\x7a\x70\xa2\xe9\xfd\xe7\x9b\x25\x7c\xc9\xeb\x97\xee\xea\xf2\xbe\x54\x57\xdf\x73\x32\x70\xd8\x10\x76\x26\xb8\x22\xaa\x22\x3e\xbb\x0b\xea\x5d\x97\xe7\xfb\xcb\x5e\x0d\xbb\xf7\xee\xdf\xae\xe8\x48\x7d\x8d\x1b\x77\x33\x3b\x3c\x90\xee\xc7\xd8\xf7\xb7\x40\xc8\xa3\x55\x2d\x0b\xec\xab\xbc\xc8\x40\xca\xab\x36\x53\x0a\x9e\x1f\xfd\x6d\x10\xdd\xb3\x83\xd2\xda\x1f\xc2\xac\xd5\x6e\xa4\x9d\xcf\x3c\x9e\xe0\xb2\x3f\x91\xbd\xdb\x74\xac\xea\xe9\xf2\x8e\xcb\xe4\xa0\x3a\xf9\xe9\xea\xb9\x19\x43\x13\x51\xf4\x35\x2d\x06\xac\x88\x4e\xd3\xc7\xd7\x9b\x1d\xb4\xde\x01\x3f\x46\x01\xce\x3c\x09\xeb\x09\xaf\x5b\xec\xb7\x78\xe0\xe4\xeb\x3d\xb4\xf9\xad\xf1\xaa\x87\xa5\xf5\x99\x29\x95\xbc\x93\x3b\x39\xf0\xea\xe9\xfa\x4a\xcd\xfe\x28\x46\x4c\x28\x95\x54\x12\x31\x88\x9a\x67\x15\x50\x2d\x06\x5a\xa1\xa4\xbc\xa5\x9c\xb3\x82\x9d\x5d\x91\x3c\xd0\x5c\x05\x64\x60\xc1\x36\x50\xa9\x66\x09\x5c\xa1\x43\xc1\xad\xf4\xbc\x59\x41\x4f\xf9\x3f\x01\x00\x00\xff\xff\xe2\xfd\xfe\x84\xa4\x31\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledOwnedAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x51\xca\x83\x30\x10\x04\xe0\xbb\xcc\x73\x4e\x90\x3b\xfc\xfc\x07\x10\x29\xab\xae\x10\xb0\x1b\x49\x26\x15\x11\xef\x5e\x5a\xaa\x15\xda\x52\xe8\xeb\x32\xec\x7c\x53\x2d\x68\xa3\x65\x8a\x11\xbe\x97\x21\xab\x43\xb0\xb1\x30\xc3\x57\x0b\x4c\xce\x0a\x8f\x93\xe9\xf4\x3f\x99\x26\x38\x70\x1e\x6f\x27\xe9\xba\xa4\x39\x63\xad\xdd\x96\xca\xca\x2d\x14\x0b\x1f\x3f\x6a\x87\x51\x66\x69\x06\xdd\xff\x67\x0a\xf5\xaf\x50\x9a\x30\x04\xce\xf0\xb0\x68\x5b\x68\x2f\xe8\x8b\xb5\x0c\xd1\xb0\xba\xa3\x91\xa9\x1c\x89\xcf\xf6\xf8\x52\xbd\xf3\xdf\xab\xbf\xb3\x2e\x41\xa7\x0f\xa0\x23\xe0\xb7\x7d\xf7\x49\xa9\xb4\x8c\x09\x6b\x7d\x0d\x00\x00\xff\xff\x90\xea\x6f\x4c\x88\x01\x00\x00")

func compiledOwnedAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledOwnedAbi,
		"compiled/Owned.abi",
	)
}

func compiledOwnedAbi() (*asset, error) {
	bytes, err := compiledOwnedAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Owned.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledOwnedBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x51\x72\x04\x21\x08\x44\xaf\xd4\x2d\x02\x72\x1c\xd4\xf1\xfe\x47\x48\xe9\x24\x5b\x95\xfc\x64\x67\xf1\xc7\xa2\xe0\x35\xdd\x86\xfd\x2a\xb4\x18\x50\xc5\x08\x23\x50\xbb\xba\xc9\xfa\x2e\x1f\x20\x3e\x2c\x03\x20\x8a\x4a\x33\xa1\xe4\xaa\x10\x6d\x64\xdd\x2a\x0a\xf5\x06\x93\x36\x53\x47\xd7\x7e\x77\xfd\x52\xd7\xbe\xf7\x1a\xd6\xd4\x2e\x95\x7a\xa6\xf7\x4d\xaf\xee\x99\x1c\xfe\xba\xf1\xbf\x3a\xee\x94\xb6\xf7\x7a\xaa\x69\xdf\xc4\x1f\x76\x8b\xbf\xec\xa0\x11\xe4\xb5\x27\x4f\x3e\x7c\x5f\x2b\x10\xa4\x35\xee\x4c\x0b\xc0\x7b\xbf\x21\x08\x09\x2c\xb9\xdd\x69\x15\x79\xc2\x6c\xa4\x6d\xee\x9d\xd2\x55\x7e\x5d\x7c\x7e\x5a\xdf\xe7\x31\x68\x0f\xd4\x4b\x20\xca\xd6\x3f\xde\x3c\xa0\x7a\x27\x83\x67\xaa\x3b\x15\x03\x92\xa6\x56\x3c\x3d\xbd\x08\xb4\x15\x30\x33\xac\x27\x13\x14\x89\x35\x30\x24\xba\x0e\x87\x69\x19\x65\xae\x11\x61\x22\x96\x62\x62\x21\x3d\xae\x3a\x3d\xc7\x9a\x2b\x21\xd3\x25\x81\x12\x5f\x01\x00\x00\xff\xff\x68\x3c\x60\x89\xcc\x02\x00\x00")

func compiledOwnedBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledOwnedBinRuntime,
		"compiled/Owned.bin-runtime",
	)
}

func compiledOwnedBinRuntime() (*asset, error) {
	bytes, err := compiledOwnedBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Owned.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcf\x6a\xc3\x30\x0c\x87\xdf\x45\x67\x9f\x06\xdb\xc1\x6f\x30\xc6\x60\xb0\x63\x29\x43\x6d\xd4\x22\xe6\xca\x21\x92\xb3\x79\x25\xef\x3e\x5a\x9c\xa4\x0b\xed\x5a\xf6\x87\x1e\x13\xe9\xa7\x7c\xf9\xa4\xd9\x16\x96\x51\xd4\x50\x0c\xbc\x35\x89\x1c\xb0\xd4\xc9\x14\xfc\x6c\x0b\x82\x1b\x02\x0f\x2f\xaf\x94\xc1\x81\xe5\x7a\xf7\xa4\xd6\xb0\xac\xa1\x9b\xbb\xbe\xbe\x26\x03\x07\x31\xd9\x34\x38\x86\x12\x8b\xdd\xdc\xde\xed\x53\x35\x66\x5c\x04\x02\xbf\xc2\xa0\xe4\x40\x0d\x8d\x1e\x93\xe1\x82\x03\x5b\x06\x0f\x2d\xd3\xdb\x98\x5d\x25\x59\x1a\x47\x81\xce\x1d\xd2\x96\xf4\xa5\xb8\x6e\xac\xb7\x18\x12\x1d\x67\x2b\x2d\x3a\xf9\xa3\x8b\xa8\x25\x4a\xdf\xf4\x73\xf6\x36\xda\x0e\x77\x18\x80\x55\xd5\x90\xea\x17\xb8\xac\xf7\xc2\xc6\x18\xf8\x83\xae\x84\xf9\x07\x8a\xb3\x3e\x35\xf4\xdf\xa2\x27\x27\x3d\x7e\x7e\xf0\xfc\xed\xd9\x1e\xda\xff\xd5\xd9\xa2\x44\xc9\x9b\x98\xf4\x98\x54\x96\x8a\xde\xa9\xea\x69\x7b\x87\xe5\xf5\xc3\x09\xd5\x43\xaa\x0c\x3c\xb7\x9a\x53\xfd\xe7\x57\xf5\xbc\x5f\x52\xa9\x53\x4b\x62\xd0\xcd\x3f\x03\x00\x00\xff\xff\x48\x39\xff\xdd\x3a\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x5b\x92\xdc\x36\x0c\xbc\x52\xe3\x49\xe0\x38\x14\x49\xdd\xff\x08\x29\x50\xf3\xdc\x71\x92\xb5\x53\x71\x59\xfa\x18\x2e\x44\x82\xdd\x0d\x34\xd6\x51\xaf\xc2\xd8\x01\x15\x27\x38\x01\x3e\xac\xb9\x9c\xb7\xa7\x0d\x10\x7e\xf1\x71\x00\x62\x50\x72\x17\x4f\x59\x23\x6c\x05\x91\xd6\x2d\x8d\xac\x05\x5c\xa2\x2b\xaf\x63\xe5\x15\x9d\x7a\x45\x0f\x49\xf6\x23\xfa\x8e\x12\xe7\x15\x1d\xe3\x68\x79\x34\xbe\xa2\x1a\x57\xf4\x1c\x8b\xc6\x18\xb7\xbd\x79\x58\xb3\xa3\x6e\x0e\x9c\xd3\x0e\x51\xb2\x7d\x5f\xb1\x7a\x44\x2b\x32\x36\x6b\x07\x6b\x90\x58\x50\xd4\x69\x84\xa0\xfe\x82\x83\xe1\xa0\x33\x18\x14\x94\x80\x06\x81\x41\x5b\xaf\xda\x47\xb7\x35\xd7\x49\xe3\xe4\xa4\xdc\xa7\x42\x41\x21\x21\x81\xe0\x50\x69\x86\xd4\x74\x2b\x6d\x69\xf4\x34\xc3\xcb\xeb\x85\xf5\x9e\xb1\xea\xc0\xb8\xdf\x11\x48\x82\x24\x4e\x79\xb2\x98\xe7\x17\x16\xc4\xed\xf7\xb2\x30\xa4\x88\xa5\x6c\x3e\x2c\x99\xfc\x64\x02\x3c\x90\x92\xe8\x0f\x91\x92\xa3\x57\x5f\x30\x3a\x64\x77\x9d\x91\x3b\x41\x8e\x59\x19\xee\xa7\x4d\xfe\x28\x9e\x8a\xf1\xca\xf3\x8e\xb2\xfb\x57\x94\x7d\xd5\xee\x8c\x67\x5d\xbf\x72\x4e\x24\x91\xff\x53\xad\xfd\x72\x0e\x05\xdf\xbf\x05\xc7\x66\x71\x9d\x48\x04\x0a\x71\xed\x64\x84\x6c\xd7\xd2\xb9\xca\x0d\x46\xc1\x95\x99\x4e\xca\x44\x32\x28\xa9\x76\x25\xc5\x5e\x83\x6a\xef\x3c\x2f\x7c\xc5\x7c\xe7\x2c\xeb\x97\xcb\x3b\x24\x40\x19\x6c\x1b\x63\xe8\xfe\x45\x30\xb5\x30\xe3\xd7\xce\x4d\x58\x61\xa1\x6b\xfd\x77\x7c\x18\xa6\xb5\xb3\xd4\xbe\x77\x3b\x60\x2a\xf2\xa9\x4b\x10\x79\x69\xb3\x7d\xcc\xf6\xd6\x3f\x81\x3b\xda\x6f\x2b\xc2\xd1\xbe\xad\x08\x7b\xfc\xdf\x8a\x54\x24\x71\xd3\xc4\x82\x7e\x86\xc9\x1a\xdf\x67\x32\xe6\xcf\x30\xa1\x56\x99\xee\x3c\xaa\x4a\x95\xa7\x7a\xbd\xf0\x5d\x5c\x5e\xab\xd9\xce\x85\xd3\xc7\x38\x68\x44\x9f\xa3\x37\x4f\xed\x03\x9d\x55\x5a\x33\x12\x5b\xc3\x26\x37\x19\x47\x63\x89\x5c\x73\x9d\x6c\x12\xee\x2b\x2c\x65\xf0\xe0\x62\xf7\xe0\x7e\x63\x1d\xf2\x54\x2b\x38\x08\x52\x4c\x43\xb7\x57\xe9\xf9\xad\xf0\xfc\x48\xad\xdd\x53\x47\x65\xa9\xd1\x51\xd3\xa4\x6d\x37\x94\x2e\x56\xd9\xeb\xf7\x5e\x0d\x82\xb8\x97\x46\xaf\x75\xbb\x26\x44\xee\x19\x52\xf5\xbd\xb2\xf4\xe3\x96\x45\xe2\xe6\xe4\x4f\x4d\xab\x08\xef\x08\x2b\x73\xcd\x8d\xeb\x7d\xf7\x43\xe7\xc7\x0c\xc1\x57\x07\x90\x7f\xba\xa2\xdc\x40\x76\xa1\x99\xf3\x6d\xda\xec\x95\x69\x7b\xfc\xa7\xfe\xb7\xa7\x90\x7e\xb8\x8e\xab\xfe\xe5\xbb\x3d\x97\x5a\xc2\xec\x97\xd0\x29\x8f\xff\xe8\x57\xb5\xf3\xdb\x5d\xae\x8a\xdf\xeb\x57\x7b\x9b\x5e\x9f\x3a\x04\x99\x03\x9d\xdc\x9c\x5b\x6f\xbd\xb1\xc0\x82\xa1\x6c\x06\x5f\x53\xda\x48\x9b\x47\x79\x63\x36\x6b\x74\x68\x17\x5d\xd6\xcf\xae\xca\xdd\x26\xe9\x01\xcd\x15\x09\x61\xf3\xc9\x73\xd1\xea\xc1\x0d\xe0\xfc\x2b\x00\x00\xff\xff\x04\xed\x9e\x58\xa6\x09\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledProposersetAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledProposersetAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledProposersetAbi,
		"compiled/ProposerSet.abi",
	)
}

func compiledProposersetAbi() (*asset, error) {
	bytes, err := compiledProposersetAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ProposerSet.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledProposersetBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc1\x0b\x11\xc4\x40\x08\x03\x50\x4b\x21\x29\x2c\x2b\x87\xcf\xd5\xbf\x84\x9b\xce\x0b\x7c\x1e\x38\x03\x40\xe2\x5d\xa0\x2c\x3c\x78\xea\xd4\xa1\xe0\x49\x68\x7b\xd7\x95\x59\xfd\x8b\x4e\x89\x76\x79\xf8\x92\x1c\x4d\x8d\x23\xb5\x9e\xa6\xb1\xea\x35\xd8\xdc\x8a\xb1\x71\x5d\x3d\xd3\x0e\xf0\xfe\x03\x00\x00\xff\xff\x81\x85\xe2\xc0\x6a\x00\x00\x00")

func compiledProposersetBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledProposersetBinRuntime,
		"compiled/ProposerSet.bin-runtime",
	)
}

func compiledProposersetBinRuntime() (*asset, error) {
	bytes, err := compiledProposersetBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ProposerSet.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledSafemathAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledSafemathAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledSafemathAbi,
		"compiled/SafeMath.abi",
	)
}

func compiledSafemathAbi() (*asset, error) {
	bytes, err := compiledSafemathAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/SafeMath.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledSafemathBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xc1\x11\xc0\x20\x08\x04\xc0\x96\x0e\x8c\xa0\xe5\x00\x07\xfd\x97\x90\x71\xf6\xbb\x86\xe7\xc3\x56\x03\x70\x30\x04\x42\x6c\x9b\x7a\x78\xb8\x2e\xec\xa3\xc8\xb8\xc3\x14\x37\x2d\x9c\xac\xd6\xeb\xfc\x22\xf3\x54\x9b\x89\x48\xb2\x9d\xcd\x75\xf1\x56\x0a\x77\xc8\x8a\x59\x35\xac\x62\x36\xa0\xf7\x0f\x00\x00\xff\xff\x84\x1f\x85\x61\x6a\x00\x00\x00")

func compiledSafemathBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledSafemathBinRuntime,
		"compiled/SafeMath.bin-runtime",
	)
}

func compiledSafemathBinRuntime() (*asset, error) {
	bytes, err := compiledSafemathBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/SafeMath.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledVotingAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingAbi,
		"compiled/Voting.abi",
	)
}

func compiledVotingAbi() (*asset, error) {
	bytes, err := compiledVotingAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xdb\x11\xc0\x20\x08\x04\xc0\x96\x2e\x3c\x4e\x28\x07\x41\xfb\x2f\x21\xe3\xec\xef\x12\x8f\xc1\x85\x00\x02\x77\x80\xfa\xe8\x94\x55\xab\x96\x28\x3c\x04\x31\xea\x4b\x3a\x79\x92\xcd\xa0\xdd\x29\xde\x9b\xd1\xdf\x51\xbc\xb8\xd3\x66\x6b\xeb\xa9\x54\x31\x1e\xa7\x9b\x8e\xcc\xb4\xed\x31\x40\xf2\x0f\x00\x00\xff\xff\x56\x21\x80\x23\x6a\x00\x00\x00")

func compiledVotingBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingBinRuntime,
		"compiled/Voting.bin-runtime",
	)
}

func compiledVotingBinRuntime() (*asset, error) {
	bytes, err := compiledVotingBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Owned.abi": compiledOwnedAbi,
	"compiled/Owned.bin-runtime": compiledOwnedBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ProposerSet.abi": compiledProposersetAbi,
	"compiled/ProposerSet.bin-runtime": compiledProposersetBinRuntime,
	"compiled/SafeMath.abi": compiledSafemathAbi,
	"compiled/SafeMath.bin-runtime": compiledSafemathBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
	"compiled/Voting.abi": compiledVotingAbi,
	"compiled/Voting.bin-runtime": compiledVotingBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Owned.abi": &bintree{compiledOwnedAbi, map[string]*bintree{}},
		"Owned.bin-runtime": &bintree{compiledOwnedBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ProposerSet.abi": &bintree{compiledProposersetAbi, map[string]*bintree{}},
		"ProposerSet.bin-runtime": &bintree{compiledProposersetBinRuntime, map[string]*bintree{}},
		"SafeMath.abi": &bintree{compiledSafemathAbi, map[string]*bintree{}},
		"SafeMath.bin-runtime": &bintree{compiledSafemathBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
		"Voting.abi": &bintree{compiledVotingAbi, map[string]*bintree{}},
		"Voting.bin-runtime": &bintree{compiledVotingBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

