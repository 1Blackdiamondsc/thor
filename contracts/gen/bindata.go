// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/ERC223Receiver.abi
// compiled/ERC223Receiver.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// compiled/Voting.abi
// compiled/Voting.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x4f\x4b\xc3\x40\x10\xc5\xbf\xcb\x9c\xf7\xa4\xb7\xdc\x0a\x82\x27\x41\x3c\x78\x29\xa5\x6c\xbb\x93\xba\x90\xcc\x84\xec\x6c\x34\x96\x7e\x77\x89\xe6\xaf\x26\xdd\x46\x4a\x7a\x0c\x33\xcc\xbc\xdf\x9b\x7d\x64\x7d\x84\x3d\x93\x13\x4d\x02\x51\xac\x13\x87\x0a\x2c\x65\x5e\x1c\x44\xeb\x23\x90\x4e\x11\x22\xd8\x6a\x63\x72\x50\x20\x65\x56\x7d\x56\x5f\xe8\x1c\x9c\x36\xaa\xe9\x30\xa8\xbd\xbc\x71\x6e\x3f\x11\x14\xb0\x97\x7a\xc4\x46\x41\xa6\x4b\xbd\x4b\xb0\x1d\xef\x44\x0b\x3e\x79\xd1\x3b\x9b\x58\x29\x21\x02\x62\x6a\x9a\xda\x1d\xb1\xa7\xbd\x58\x26\x38\xa9\xbe\x44\xc9\xfd\xa8\xc2\xa0\x40\xd2\x62\x0b\x7c\x44\x79\xce\x39\x63\x87\xf9\x40\x66\x3b\xa7\x9b\xb1\x63\x4e\xbe\x97\xff\xad\x94\x82\xee\xfe\x6e\xbc\xe8\x2d\x49\x55\xbb\x08\xbc\xb0\xf8\xfe\x6f\xe4\xf0\x51\x0e\x21\xda\x98\x3d\x99\x69\x64\x6b\x90\xa4\x52\x7a\x0e\xbd\xa2\xf2\x6e\x41\x03\x46\x6e\xfa\xca\x62\xe9\x10\xba\x68\xdf\xa1\x2b\x49\x9b\x9d\x98\xce\xb7\xed\x19\x77\x3b\xc4\x65\x52\x35\x89\x11\xa4\xb8\x08\xe2\xe7\x4e\x2b\x63\xe6\x65\xef\xd6\x94\xbf\x01\x5e\x30\xe5\x02\x6f\xcb\x30\x99\x85\x62\xd9\x08\x68\x62\x2a\x53\xf6\x6e\xcc\x56\x4b\x06\x3f\xd0\x34\x6a\x83\x6f\xa9\xed\xaf\x47\xcd\x79\x5b\xab\x5e\x40\xea\x2e\x2c\x90\xe4\xca\x2a\xbb\x85\x0f\x83\x3f\xdd\x70\xe5\xe6\x2b\x00\x00\xff\xff\xcf\x1f\xac\x34\x4f\x07\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x0b\x8e\xeb\x30\x08\xbc\xd2\x60\x0c\x86\xe3\xe0\xdf\xfd\x8f\xf0\xe4\xa4\xde\x6d\xb2\x7d\xdb\x5d\xe9\x49\xaf\x55\xa5\x74\x62\xc8\x30\x30\x76\x14\xeb\x9b\x21\x49\x81\xcc\x4a\x50\x02\x4a\x96\xa2\x3c\x1f\x1f\xc5\x80\x02\x09\xa1\x00\x58\x90\x49\x95\x53\x69\x5e\x66\x88\x11\xe5\x23\xc6\xa5\x18\x94\xa5\xe7\x22\xc5\xe6\x89\x7a\x9c\xa8\x09\x85\x97\xdc\x4e\x74\xc8\x03\x9d\x89\x6a\x63\x39\x50\x42\x3e\x51\x57\x1f\x24\xc1\x27\xca\xfc\x40\xa3\x6b\x57\x4b\x27\x2a\x8f\x0c\x31\x67\x9f\x9d\xc6\x89\x5a\x3d\xd1\xd9\x06\xb5\xd6\xe2\x44\x23\xa4\x48\x5d\xdc\x0d\xb3\x4b\xe5\x4c\xb2\x58\xd8\xaa\xf2\x03\x3d\xd8\x9a\x02\xa4\x88\x47\xbd\xe0\x43\x15\x21\x5d\x79\x6a\x17\x95\x0a\x7c\x66\x08\xb9\x67\xa8\xfe\x4d\x86\x34\x79\x65\x38\xf4\x26\x4f\x24\x24\xc6\x4b\xf9\x04\x63\x90\x93\xc3\x49\xd2\xa7\xf2\xa4\x6b\xad\x5d\xef\x42\xb1\xae\x40\x0e\x21\x5b\x57\xec\x98\xfc\xc9\x6a\xe2\x97\xac\x8e\xba\x1e\xd1\x84\x79\x8b\x26\x2a\x4a\x60\x6b\x9f\xdc\xef\xd9\x16\x1f\x52\xa3\xb3\x96\x75\x2f\xbf\xe6\x46\x3c\x7e\xa1\x39\x52\xe6\x15\xc5\x4e\xcf\x0c\xf5\x5e\x1f\x95\xf2\x36\x47\x9e\xe5\x49\x7b\x1c\xda\xff\x80\xaf\xeb\x2f\x9e\xb5\x9e\x32\x9f\x99\xd6\xfb\x7c\x9c\x5a\x0a\xe4\x58\x85\x7b\xa6\xe5\xab\xed\x89\x15\xb7\xd5\x5e\x1c\x17\xd7\x83\x25\x5d\xe7\x63\x7b\x13\xe9\xac\x07\x19\x47\xc4\xae\xc9\x18\x6c\x74\xb0\x28\x06\xae\xab\xf2\xd5\x75\xf0\x8d\x5b\x6a\x2a\x01\x9e\xb4\x57\xd0\xc5\x1f\xb2\x68\x7f\x64\x5d\x1a\xca\x0b\xfe\xcc\x5f\x31\xca\x3b\x23\xf7\xe7\x8c\xaf\xeb\xdf\x8e\xb6\xf4\x37\x05\x9e\xf6\xa3\x0f\x25\x2c\xaf\x45\x0f\x05\x5e\xcc\xe6\xd2\xc5\xd2\x99\x23\xfd\x50\x21\xbf\xef\x0f\x5f\x14\xba\xfa\xff\x95\x42\x7b\x65\x8d\xe7\x95\xf6\xa2\xf2\x32\x8b\x8f\x3e\xd8\xd8\x5b\x2f\x51\xba\xd5\x5e\xca\xf0\x32\xa4\x99\x43\x54\xe6\xc8\xb3\x68\xeb\xb5\x8e\x08\xd6\xac\x59\x47\xb2\x30\x75\x89\x62\x96\xb7\x3a\xcf\xb3\x1c\x49\x56\x68\x3d\x7a\x05\x87\xd1\xf9\x3b\xbd\xb0\xf8\x1c\x7b\xfa\xcb\x4e\xec\x9d\xdc\x2e\xb3\xa8\xff\xbc\x13\xfa\xae\x13\x2c\xfe\xa6\x13\xac\xf1\x7d\x27\xce\x09\xfa\x72\x9d\xbc\xf8\xf2\x38\x9c\x3c\x0b\x3c\x9d\x91\x5b\x9d\x53\xa7\xff\xea\x53\xee\xe5\x5d\xed\xc3\xfe\xb1\x4f\x33\xd1\xe5\x99\xb7\x95\x96\x48\x49\x0c\x24\xbe\xde\x16\x72\x32\x29\x02\x3b\x66\x5d\x36\xef\xcc\xfc\xde\xeb\xfb\x4c\x37\x36\xfe\x95\xdb\xe5\x9b\x19\x4b\x8f\x19\xe3\x3d\x63\x7b\xda\xf2\xcf\x14\xcf\x7e\x3f\x5f\xee\x8a\xe7\xa0\x1f\xfa\x3e\xd7\xcb\xf9\x61\x5f\x4e\xce\xe5\x7b\x5b\x6f\x52\x35\x9a\x89\x55\x9b\xdc\xd5\xd6\xfb\x51\x70\x6f\x2c\xc3\x0d\xc8\xc5\x92\xf4\x98\x8d\x34\x12\xbb\x67\x45\x77\x54\x6b\x82\x36\x99\x2d\xed\x53\xed\x6f\x27\x5a\xa4\xcb\x54\x27\xa7\xfd\x7f\xef\x0b\xfb\xde\x7f\x9d\x75\xc9\xfd\x8d\xf2\x22\xe3\x5b\xe5\x8f\xba\x56\x35\x40\x90\x8a\xa6\x12\x25\x4a\x62\x88\x25\x78\xe4\x5c\x28\x6b\xef\x9d\x4a\x90\x32\x68\x24\x0e\x47\xd3\xa5\x50\x94\xa9\x75\x58\x6e\x66\x45\x0c\xad\x45\x72\x30\xda\x14\x9e\xa3\x73\x54\x20\xf9\x9f\x00\x00\x00\xff\xff\x23\xa4\x6c\x6c\x30\x0b\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x8a\x84\x30\x10\x85\xe1\xbb\xbc\x75\x56\x03\x33\x8b\x1c\x60\x76\x73\x02\x91\xa1\xa2\x25\x04\x63\x45\xcc\x4b\x43\x10\xef\xde\x34\xb4\x4a\x2f\x8b\xfa\xe0\xfd\xdd\x8e\x21\x5b\xa1\x18\xe1\x27\x49\x45\x1d\xa2\xad\x95\x05\xbe\xdb\x61\xb2\x28\x3c\xfe\xa7\x2d\x2f\x70\x60\x5b\x5f\xa7\x8c\xe3\xa6\xa5\xe0\x70\xb7\x78\x48\xaa\x7a\x93\x1a\x8d\x5f\xdf\x3f\x1f\x64\x14\xca\x2d\x42\xa3\x16\x1c\xbd\x3b\xff\xcc\xb3\xda\xaf\xa4\x14\x64\x98\xe1\x90\x2b\xdf\x1d\xbd\xc3\x2a\x4d\x42\xd2\xab\xb1\x50\xa8\x7f\x95\x12\x62\x8a\x6c\xf0\xb0\x6c\x27\xba\x36\xa6\x6a\x03\x63\x36\x1c\xfd\x33\x00\x00\xff\xff\x74\xa5\xc3\x0b\xe9\x00\x00\x00")

func compiledErc223receiverAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverAbi,
		"compiled/ERC223Receiver.abi",
	)
}

func compiledErc223receiverAbi() (*asset, error) {
	bytes, err := compiledErc223receiverAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledErc223receiverBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledErc223receiverBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledErc223receiverBinRuntime,
		"compiled/ERC223Receiver.bin-runtime",
	)
}

func compiledErc223receiverBinRuntime() (*asset, error) {
	bytes, err := compiledErc223receiverBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ERC223Receiver.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x6e\x9c\x30\x10\xfd\x17\x9f\x39\x55\x6d\x54\xed\x2d\xad\xd4\x9c\xa2\x4a\xd9\xa8\x97\x28\x8a\x06\x98\xcd\xba\x32\x36\xb2\xc7\x10\x14\xe5\xdf\x2b\x16\x16\xd8\xd6\x06\x6f\x42\x61\x6f\x2b\xed\xd8\x9e\xe7\x79\xf3\xe6\x99\x87\x57\x96\x28\x69\x08\x24\xb1\x0d\x69\x8b\x11\xe3\x32\xb7\x64\xd8\xe6\xe1\x31\x62\x12\x32\x64\x1b\x26\x81\x78\x81\x37\x48\xf7\x8a\x40\x6c\x6d\x9e\x8b\x8a\x45\x4c\x59\x6a\x43\x5f\x8f\x91\x2c\x62\x54\xe5\xf5\x2f\xcb\x25\x7d\xfa\x72\xc5\xde\x1e\x23\x96\x43\x05\xb1\x40\xb6\xd9\x81\x30\x18\x31\x43\x40\x78\x6b\x09\x62\x2e\x38\x55\x6c\xc3\x0a\x8e\x65\xbf\x76\x67\x65\x42\x5c\x49\xf6\x16\x05\xe6\x97\xe1\x54\x3e\x86\x34\x97\xcf\x81\xe9\xe4\x56\xe3\x64\x3a\xed\xea\x2e\x9f\xee\xd0\x27\x8d\x09\xc7\x02\x75\xbf\x05\xa4\xa9\x46\x63\x0e\x3b\x1c\xa3\x20\x53\x56\x92\xfb\xc6\xda\x18\xc8\x73\xad\x0a\x0f\x36\x63\x93\xa4\xde\xb3\xdb\x20\x56\x4a\x04\x02\x94\x4a\x1e\x83\xce\xbc\xf5\xee\xf8\x1a\x92\x03\xa0\x83\x35\xdf\x40\x80\x4c\x26\x2b\xb4\x24\x63\x68\x55\x22\xfb\x99\xb3\xd3\x2a\x1b\x67\x0d\xa9\xf1\xff\x13\x8d\x29\x77\xb1\x2a\x3a\xe1\xa7\x2a\x50\x57\x77\x40\x38\x1e\x89\x2f\x39\xd7\x70\x80\x70\x12\x77\xf5\x79\x58\x69\xb3\x07\x7d\x5a\xde\xb9\x49\xe8\xbf\xb1\x44\x49\xd2\x90\xd0\xb5\x9b\x8e\x03\x2c\x12\xcb\x5b\x30\xe4\x6c\xcb\x01\x16\xa4\xef\xed\x96\x5d\xf4\x1a\xb8\x3e\xce\x84\x00\x7d\x21\x0d\xd2\xec\x50\xff\x68\x0e\xbb\x18\x91\xe9\x33\x4c\x31\xe1\x19\x08\x13\xd2\xa5\x5f\x17\x51\x77\xed\x6e\x9a\x81\x68\xa7\xbf\xad\xa1\x1b\xad\x4a\xda\xb7\x1d\xb6\x02\x81\x82\xfb\x22\x9b\xee\x89\x46\xc9\xb7\x8b\x76\x86\x6f\xec\x3c\xa9\x52\x4e\xa4\x1b\x37\xf3\xe6\xe7\xce\x4d\x9a\xb8\x1b\x47\x8b\x0d\x9e\xee\xec\xc9\xae\x76\x36\xb5\x63\xa6\x6e\xf7\x50\xfb\x99\x3b\xcc\x80\x4b\x4c\x2f\x69\x88\x79\x8c\x41\x14\x56\x80\xbf\x29\xe7\x32\x0f\x8b\x71\x6d\xa2\x89\xfa\x74\x9f\x47\x7b\xc3\x51\x90\xe1\x1e\xff\xdf\x1e\xb7\xa4\xf9\xa5\xa8\xf6\xc0\x17\x94\x9a\xa9\xb2\x58\x89\xe5\xbd\xbb\xaf\xe2\xc1\x05\xef\xee\x74\xf5\xb2\xfb\x2d\xc4\x8c\x06\x61\x55\x73\xf0\xfe\x51\xdc\x54\xe9\xfa\x22\x06\xf2\xfb\xa4\xbf\xff\x3b\xc0\xd8\x07\xfb\xfa\x30\x5b\xdf\x69\x70\x3b\x6c\xd6\xd1\xe0\x77\x1a\xe1\x13\x6d\x5e\x7f\x5a\x9e\x6d\x67\x06\xf8\x4c\x8e\x32\x9d\xf0\x3c\x20\x84\x2a\xfd\xaf\x6c\x7d\x40\xde\xd4\x70\x8d\x77\x6d\xf8\x2b\x6d\x06\xd1\x2a\x39\xed\x53\x0d\x65\xfd\xaa\x39\xca\xf3\x65\xbe\x6e\x8a\x65\x07\x32\x48\x25\xab\x4c\x59\xe3\x2a\x15\x97\x29\xbe\x60\xda\xfd\x15\xaa\xb1\x0e\x75\x6d\x83\xb1\x40\x49\x67\x1c\xdc\x5c\xd3\xa4\x5c\xba\xe3\x7d\xbc\xf1\xc0\x1a\x53\x53\xdf\x4d\x4c\xaa\xab\x67\x61\x98\xda\x6e\xdb\x8f\x28\x73\x5c\xde\x74\xbb\x79\x52\x55\x22\xf5\x7e\x23\xf1\xaf\x0a\xfb\xb2\xe2\x7a\x3f\xce\x01\x76\x64\x42\x78\x16\x9c\xc9\x95\xa7\x02\x84\x1d\x6f\x82\xfb\xde\x27\xcd\x02\x69\x64\x2a\x78\x56\xf8\x87\xc4\x87\x80\x5d\x1f\xbe\x40\x83\xf8\x07\xd8\xe3\x9f\x00\x00\x00\xff\xff\xad\x4e\xf0\x52\x3b\x18\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x07\x96\x1c\x21\x0e\xbd\x92\x02\x12\xe2\x38\xc4\xfb\x1f\x61\x1f\xa1\xba\x2b\x75\x98\x59\xaf\xbd\xd3\xcf\xe3\xb6\x5c\x25\xa4\xaf\xf4\x01\x85\xfe\x71\x20\xa4\x00\x8e\x15\x41\x11\x90\x9a\x78\xe5\xb6\x7e\x14\x2a\x28\x00\x41\x54\x00\x60\x01\x87\xaa\x0c\x2e\x63\x6d\x0e\x0d\xd1\xf5\x77\xd8\x89\x37\x50\x06\x6d\xa5\x54\xe0\x29\x95\xb0\xa4\x41\x6a\xf4\x69\x49\x2b\x4f\x29\x62\xc8\xb9\xca\x94\x12\xae\x67\xd1\x50\xa1\x94\x32\xa5\x6c\x4b\x5a\xab\x56\xa8\x34\xa5\x2e\x2d\x69\xab\x29\x45\x6d\x53\x6a\x32\xa5\xc4\xc9\x3c\x6d\x1a\x62\x9c\x52\x46\xce\x55\xd4\x4f\x69\xa1\x29\x75\x48\x39\xb7\xb6\x34\xb4\xa5\x57\x93\x31\xfa\x38\xa5\x8c\x38\xa5\x1e\x22\x18\xf1\xf4\x98\x59\x97\xb4\x98\x07\x56\x99\x52\x91\x87\xb4\x79\x4a\x73\x35\xf6\xcb\x06\xcb\xb1\x46\x53\x9d\xd2\x90\x97\xb4\x11\xa6\xcc\x4b\x43\xf1\x53\x1a\xa4\x58\x48\x6e\xad\x56\x97\x86\x90\x5c\xc2\x94\x27\x0e\xdc\xca\x94\xc6\x00\x12\x72\x4a\x43\xea\x70\xe9\x4d\xc8\x5c\xac\x4c\x2f\x1c\xd7\x29\xcd\x1c\x0d\x59\xe2\x94\xca\x8a\x5b\x61\x6b\xde\xd9\x92\xda\xd2\x50\x8a\x52\x2d\x5c\xa7\x34\x2d\x1c\x5a\xaa\xc2\xa5\x2c\x69\x59\x38\xb4\x5c\x31\xe7\xbc\x34\xb4\x2a\x5e\x52\xcf\x18\x83\x56\x24\xb1\x43\x19\x79\xd2\x73\xeb\x21\xed\x12\xe7\x15\x41\x10\x45\xfb\xf3\x0e\x04\x03\x18\xf6\x8c\x24\x00\x9c\x12\x83\xd0\xf1\x82\xc6\x4f\x4d\xea\xce\x9a\x34\x0f\x4d\xfa\xd4\xd4\x75\x18\x18\x09\xd9\xd0\x0a\x68\x6c\x68\x28\xf8\x5c\x21\xa0\x80\x8d\x55\xd7\xbf\xfb\x1b\x6c\xdc\x75\x4b\xea\xcf\xf7\x44\xee\xfa\xe3\xc8\x45\x23\xe8\xef\xf3\xf8\x7b\xb3\x12\xfb\x7b\x7d\x5d\x81\xf9\x09\xe3\x8f\x0d\xb9\x02\x36\x54\x5b\x5a\x8a\x2c\x2d\x6c\xc3\xc2\x6e\xd3\xd0\xd2\xcb\x0f\x01\x20\x02\x63\x40\x3d\x5a\xd8\x35\x07\x9a\xba\x5f\x63\x52\xeb\x09\x13\x02\xd1\x81\x62\x5c\x35\x0c\x3c\x2a\x5d\x50\x15\xc8\x71\x7f\x4b\xc4\xef\xb1\x47\x41\xf9\x02\x7f\xa2\x0b\xfe\xce\xbf\x5c\x0b\x41\xf2\x88\xf0\xf6\xb6\xe3\xfb\x3c\xc8\x7e\xff\x94\xe8\xd9\x9f\x11\x97\x9b\x35\x0c\x51\x47\x04\x97\x6f\xae\xfb\x06\xda\x7f\xfb\x76\xfa\x51\xb0\xcd\x2a\xa5\xda\xd7\xeb\x91\xde\xd6\x0c\xf0\xcb\x35\x11\x7c\x2b\x7b\xeb\x93\x7c\x1b\x8d\x5b\xeb\x11\x82\x8b\x7b\x7d\xa5\x9c\xf5\xd5\xf1\x54\x39\x64\x7c\x6b\x01\x02\xee\xf3\xe7\x65\x0c\x19\xee\xf1\x5d\xab\x97\xb4\x5b\x9d\x7b\x57\xf9\x25\x2e\xb1\x1e\x34\x39\xfc\x51\xe6\xc4\xda\xf6\x6f\xeb\x39\x3e\x2f\xdf\xbe\xd8\x91\xd4\xf6\x9a\xec\x12\x9f\x57\x1e\xed\xaa\xe5\xe4\x4b\xf4\x27\x1d\x9c\xd2\x1b\x5f\x92\x87\x7d\xac\x8e\xcf\x7d\x1f\xb7\x4a\x37\xab\x3e\xba\xe8\xf6\x54\x3b\xfb\x37\x3b\x64\xca\x61\xf7\x94\x03\xfb\x91\x07\xc7\x3a\x76\x74\xf6\xff\x9b\x8e\x93\x61\x9f\xd7\xce\x85\x37\x59\x98\x71\xdf\x11\x9c\x9c\xe7\xc7\x9f\xee\x08\x19\x0f\xb6\x85\xb3\x7f\xdf\x67\x5b\xa6\x03\x52\xe9\x5c\x3f\x3f\xd0\x14\x79\xaf\xa9\x9e\xeb\xe7\xa7\x7d\x25\xe7\xbc\xd3\x27\x70\xc6\x7f\x66\x53\xf1\x34\x73\x15\x60\xce\xb6\x91\x61\x55\x11\x91\x6d\xcb\x62\x5b\xf3\x7a\x65\x6b\xe7\x91\xb1\x67\xb0\x6f\xe2\xd4\xb4\x79\xa2\x3e\xb1\x9a\xf7\x2a\x9e\xe0\x07\x3f\x63\x76\x8f\x19\x3b\x67\xe9\xb2\xe5\xe0\x25\xf7\xe9\xac\xc3\xf6\xc7\x44\xdf\xbe\xb9\x31\xc7\x09\x82\x33\xdf\xa7\xaf\x39\xa1\xe0\x7a\x8d\x09\xf5\xf9\x4b\x60\x12\x40\x24\x40\xa0\x80\x01\x7c\xb3\x2c\xa9\x62\x95\x9a\x6a\xf6\x45\x52\x41\xd7\x3c\x3a\xf2\x05\xab\xb9\xc6\xa5\x74\x5e\x9b\xa1\xf9\x44\x14\xb0\x4a\x22\x80\x98\x2d\xfb\xcc\x29\x90\x84\xa9\xf1\x0d\x7f\x89\xdc\xa7\x37\x60\x5f\x71\xcc\xf2\xc1\x18\x76\x08\x77\x86\x0d\x67\x2f\xf7\x7c\x5b\x07\x32\x1b\xb7\x81\xe5\x69\xe7\x33\x4f\xc6\xde\x11\xd9\x38\x3b\xd0\xb4\x05\x1c\x8c\x37\x36\x7b\x8c\x81\x6d\x68\x33\x6f\xc0\xa9\x4f\xfd\x3e\x0f\xe1\x52\x5f\x59\x25\x02\x37\xdc\x9e\xa0\x43\xff\x3d\x32\x12\x99\x5c\x65\x79\x63\xee\xea\x09\x5f\xaa\x15\x15\x9d\xf5\x7d\x87\x16\x10\x2f\x2f\xfc\xdf\x78\xaf\xe9\x2b\x04\x76\xfb\x94\x07\x12\xd6\x01\xdb\x10\xb8\xe9\xb5\x1d\x97\x07\x8f\xfb\x12\xa1\x78\xe1\x07\x67\x84\x12\xbe\x45\x08\xe4\xc6\xc3\x7b\x5c\xe4\xb1\x6a\x49\x7b\x9d\x8e\xae\x3d\xcc\x08\x15\x3b\x13\xd5\x76\xee\x0f\xda\xa2\x75\x56\x5e\xd2\xe8\x6d\x43\xa3\x87\x03\x7f\xbb\x47\x7d\xdb\x2b\x98\x6e\x9f\x37\x58\xdb\x4b\xac\xc5\x74\x8f\x75\xe8\xe8\xbb\x39\x0f\xcc\xad\x08\x3a\xe3\xce\x74\x67\x7d\xf6\x3e\xbd\xe2\x72\xf1\x73\x8b\x9c\x3d\x22\x17\x47\xe4\xe0\x53\xe4\xbc\xbf\xf0\xa7\x53\xe4\xbc\xd5\x6b\xe4\xae\xf3\x05\x3b\x8d\xb8\xc8\x7c\x33\xcc\x9e\x9a\xf9\xe2\x5d\xf2\x9a\x7d\x05\x02\x67\x2e\x45\x03\x6b\x51\xc5\x85\xd8\x37\xc4\x31\x64\x01\x72\x35\x29\xa3\x82\x2f\xae\xb9\xd8\x24\x16\x30\xe9\x9f\xc5\xc3\xc9\x78\xf5\xb3\x3d\x2e\x17\x34\x46\x57\x1f\x9d\xee\x80\x1e\xf4\x6f\x63\x4f\x72\xe8\x3d\x8f\xcf\xdb\x5e\xf3\xa8\x35\xf7\x8f\x6b\xcd\xae\xfc\xff\x14\x31\x53\xff\xb9\x1b\x5d\x6b\xab\x77\xe8\x3e\x19\x47\xcd\xf4\xca\x30\x4b\x9f\xab\x61\x3b\x15\x30\xd7\x91\x79\x89\x83\xbc\xc4\x81\x8c\x0f\x75\x80\xab\x06\x68\xab\x81\xaf\xf2\xd8\xae\xf3\xff\x8c\x4a\xa3\x9b\x3c\xbe\xd8\xd3\x73\x96\xa5\x65\xa9\xe2\xa2\xfa\x9a\x88\x9a\x21\x17\xc6\x0c\xa6\x41\x15\xb3\x98\x23\x29\x4e\xc8\x23\xbb\x22\xad\x97\x25\x79\x86\x84\xe4\x8b\xb9\x9a\x8d\x9e\x58\xdc\x79\x6b\x4f\x3f\xe1\xe1\xe7\x63\x67\xbc\xcb\x4e\x3a\x66\xa6\x21\xca\x98\x0a\xc1\xe7\x3e\x15\xce\xda\x0d\x4c\xe6\xe4\x7f\x4e\xdb\xcb\xe4\xe7\x31\xf9\x59\x28\x74\x0e\xd1\x99\x88\x33\x0a\x80\xb0\x7a\x60\xb0\xb0\x74\x8f\x95\x72\x5b\x2c\x27\x04\x67\xe3\xd3\x7b\x66\xf5\x8f\x9e\x19\x72\x7a\x61\x8b\xfb\xc2\x16\x3d\xda\x62\xcb\x9a\xee\xbd\xcc\x7e\xf2\xb0\x61\xda\x24\x29\x70\x38\xe0\x82\x34\x27\xeb\x7d\x7e\x6e\xe7\x48\xff\x63\x8e\x10\xe9\x53\xfe\x45\xbe\xc9\xbf\xdf\x4d\xc0\x4d\xa3\x7c\x51\x9f\xdb\x79\x97\x7d\xdb\xa5\xdc\xc8\xc2\x47\xd7\xa4\xef\xea\x2f\xc6\x8f\xfe\xa7\x1b\xff\x7d\x73\x95\x6a\x62\x97\xa0\x04\xcd\x4a\x95\x40\xd0\x71\x25\x0e\xd2\x3c\x50\x75\xe4\x3c\x53\x0b\x04\x60\xa9\x41\x02\x4a\xb1\xb9\xec\x99\x2d\xc7\x5c\xc6\x80\x7d\x7f\x3e\x16\x51\x9e\xa7\x50\x6f\x7b\xfc\x76\xf6\x3a\xcf\xb9\xfe\x61\x8f\x4f\xee\xbc\xff\x3c\xa3\x99\x24\xbc\xcd\xa6\x53\x8d\x00\xec\xd9\xf5\x17\x53\xee\xff\x0f\x81\x54\xf0\xe3\x2e\xcb\x6d\xbb\x2c\x67\xae\xc9\x8f\x76\x56\x5f\xec\xb2\x56\x3f\x64\x3e\x76\x41\x39\x9c\x71\x7e\x42\x78\x3b\x19\x9f\xf3\xf2\x07\x18\xff\x97\x13\xf4\x23\xe2\xd9\xce\xe7\x27\xe7\x9c\xcb\x81\xdf\xe6\x9c\x0b\x7c\xc2\xe0\x68\x27\x76\x66\xf1\x69\x22\x4c\x16\x6c\x24\xb4\xf5\xa0\x3e\xa1\x3e\xed\x04\x1f\x79\xfb\xb2\xcf\xff\xa5\xbc\x2d\x74\x39\x3f\x3b\xa1\x58\x58\xff\xf0\x1c\x28\x97\xf3\x9f\xa2\xf1\x3c\xab\x6f\xa2\xf3\x02\xcb\xbf\x34\x31\xcf\xbb\xea\xf1\xed\xc2\x22\xba\x9f\xcb\xcb\xb2\x70\xeb\x7d\x6c\xf8\x35\x4e\x92\x8c\x38\x2d\xcc\x3a\x3f\x7a\xde\x0b\x0c\x24\x1f\xcc\x09\xbe\xe8\xfa\xfe\x1f\xe7\x4e\xbd\x9c\xff\x9f\x73\xa7\x8a\x7b\x9b\x3b\x24\x37\xd9\xc3\x70\xf0\xf2\x5f\x9f\x15\xd4\xf4\x69\xff\x52\xf3\x17\xfb\x97\xf1\xff\x0e\x71\xdd\x20\xd5\x4a\x9d\x85\x1a\x1b\x21\xa0\x48\x7a\xc8\xdb\x90\xaf\x9d\x31\xe2\x64\xad\x88\x14\xc5\xbf\xec\xd0\xe3\x96\xd2\xbc\xa9\x09\xf0\xaf\x7a\x32\x04\x5a\xe8\xf0\x86\xce\x0f\x77\x34\xcd\xc5\x0f\x38\xb5\x23\xff\x9b\x38\x7d\xf0\x49\x4d\xcd\x6d\x0c\xe9\xef\xfb\x94\xce\xf7\x63\x17\x9f\xb2\xdc\xc4\x1e\xa1\x15\x34\x39\x9e\xd6\x20\x94\x28\xfe\xee\x3c\x4d\x39\x43\xad\x90\x2c\xf6\x18\xee\xed\x92\x30\x6e\xf3\x5b\xd3\x9e\x15\x12\x24\x6d\x13\x08\x1b\x86\xfe\xbb\xfb\xd6\x77\x68\x80\x3b\x2e\x49\xe1\x99\x81\xee\x73\xf7\xeb\xd9\x76\x63\xd5\xf5\xc4\xe4\xc1\x58\x8d\x77\xdf\xd7\x9d\xab\x91\x21\xf0\xb8\xa7\xfd\xf5\xfd\x2c\x82\x7f\x73\x3f\xdb\x9b\xf0\x37\xf7\xb3\x7d\xab\xf1\xeb\xfb\x59\xf7\x64\x46\x9f\x33\x04\x21\x7f\x98\x9f\x7d\xb8\x5d\x33\xe4\xfe\x5c\xd5\x6e\x30\xf7\xad\x94\x46\x42\xb1\x60\xaa\x94\x2d\x24\x0d\x99\x12\xa8\xb5\xcc\xde\x4a\x8c\x41\x28\x45\xdf\x50\x39\xbb\x88\xa8\x64\x4d\x24\xba\xd2\x84\x38\x71\x6d\xdb\x79\xdf\xbb\x13\xed\x79\x9e\xdd\x33\x17\x91\xda\x93\x83\x4f\x4c\x04\xce\xfc\x7c\xeb\x9a\x27\x3e\x3b\x56\x08\xe3\x22\x23\xa2\x8a\x92\x8f\x3e\x7a\x62\x90\x1e\xc8\xe6\x52\x71\x1a\x23\x71\x4b\x41\x8b\xd5\xc0\x64\x50\x72\x15\x6a\x02\x9e\xc4\xa9\x4f\x29\x7b\x6b\xb1\x95\xe0\x4b\x81\x52\x62\x24\x92\x2c\x95\xb5\x00\x50\xf8\x4f\x00\x00\x00\xff\xff\x53\x7b\x77\x31\xec\x22\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x6b\xf3\x30\x0c\x86\xff\x8b\xce\x3e\xf5\xe3\xdb\x21\x7f\x60\xa7\x9d\x06\xbb\x94\x30\x94\x46\x2d\x62\xa9\x1c\x2a\xd9\x9b\x29\xf9\xef\x63\x6b\x12\xc3\x70\xf1\x18\xa3\xec\x18\xf2\x5a\x7a\xf4\xf0\x6e\xcf\xb0\xf3\xa2\x86\x62\xd0\xec\x71\x50\x72\xc0\x32\x06\x53\x68\xb6\x67\x10\x3c\x12\x34\xf0\xfc\x42\x09\x1c\x58\x1a\x3f\xbe\xba\x64\xa4\xff\x36\x30\xb9\x1c\x88\x38\x04\xca\x91\xc0\x62\x9b\xff\x77\x30\xb5\x6e\x89\x28\x19\x38\xf0\xc1\xe6\xe1\xad\x83\x11\x13\x76\x03\xad\x8b\xd5\xd0\xe8\x21\x18\x76\x3c\xb0\x25\x68\x40\xbc\x2c\xa1\x75\xf6\x3e\xc8\xce\xd8\xcb\xe7\xfe\x0c\x6f\xa7\x50\x64\x2f\xa3\x67\x2e\x41\xe3\x48\xf7\x5f\xe8\xd6\xe7\xe5\x9b\xea\xe4\x91\xe9\xf5\xc7\xcc\x57\x7c\x67\xe8\xc3\x5f\xc0\x2d\x38\x7c\xf2\xc6\x72\xa8\xa1\x61\xdf\x9f\x48\xf5\x37\xd1\xae\x56\xb7\xd6\xdc\x7a\x71\x2f\xc7\x3d\xde\xb6\xbe\x79\x7d\xbc\xad\x52\x14\x2f\xe9\xe8\x83\x96\x9c\xb2\xf4\xf4\x46\xfd\x42\x5b\x53\xbc\xc6\xe7\x49\xdf\x56\x7e\x91\x3d\xff\xa7\x48\x62\x30\xb5\xef\x01\x00\x00\xff\xff\x60\x13\x48\x89\xab\x04\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x61\xae\xeb\x2a\x0c\x84\xb7\x34\xb6\xb1\xb1\x97\x03\x04\xf6\xbf\x84\x27\x43\xd3\xbe\xd3\x5b\x9d\xde\x5f\xb7\x91\x2a\x65\x84\x61\xe6\xb3\x89\x21\x9f\x02\x65\x03\x8a\x18\xc1\x08\xd0\xa9\xd5\x64\x3d\x7e\x86\x09\x03\x18\xcd\x00\x88\xa2\x90\x99\x70\x95\x55\xa2\xc0\x89\x4a\xd6\x98\x68\x75\x98\x70\x6b\xab\x0f\xad\x47\xad\xf3\xa8\x3e\x5b\xb3\x36\x70\xd4\x66\x0f\x75\x31\xf5\x21\x7a\xd4\xac\x4a\xb5\x8b\x8c\xcb\x67\x3b\xea\xec\x47\x5d\x63\xd2\x18\xe3\xa8\x84\xa2\x55\x7b\xfa\x71\xac\x4b\xbb\x14\xd2\xed\x22\x9d\x3f\xd5\xed\x60\xec\x64\x6a\xe0\xfc\x27\x10\x55\x35\xed\xc0\xab\xca\xe3\xbd\x2a\xca\xa3\x8a\xc0\x42\xb9\x7e\x53\xa2\x80\x53\xb2\x62\x80\x8e\xe2\x08\x82\x04\x96\xbc\xf6\xeb\xf4\xeb\x7e\xfb\xfc\x7b\xed\xa8\xef\x6b\xc7\xca\x55\xcd\x5f\xa7\xda\x3e\xad\x3d\xba\x90\xa7\x05\x91\xfd\x8d\x93\x65\x5f\x79\x70\xbb\xfe\xe7\x87\xb0\x3e\xfb\xe9\x9b\x82\xe0\xdd\x4b\xce\xc2\xdd\xc7\xac\xbb\x1d\xa7\xaf\xf4\xb7\x9d\xd1\x6b\x9a\xc8\x5e\xf3\x04\x3e\x19\x50\xb0\x2b\xee\x1c\x2e\x10\xa7\xed\xa2\x3a\xa4\x93\x1e\x6f\x7a\xbd\x79\xe3\x61\xda\x20\x8b\xee\x15\x3f\xfb\xaf\xc8\xe7\xde\x35\xbb\xa7\x1f\xfc\x8b\xfc\xa9\x51\xb9\x77\x8c\x1f\xfd\xf9\x9c\xff\x9e\x58\x17\x97\x3b\xff\xf3\xce\x3c\x93\xfb\xc6\x72\x27\xf6\xdc\x9b\x03\xc1\xbb\x8b\xc5\xf9\xc1\x6b\xb3\xc0\x57\x16\x53\xbe\xb1\x58\xe5\x27\x0b\x97\x20\x45\x5d\xec\x53\xb8\xd8\x4a\x22\xba\x74\xd0\xbc\xc2\x6b\x27\x91\xb9\x78\x51\x48\x91\xe8\xac\x6d\xf4\x66\x4d\xa7\xc5\x62\x8a\xe9\x61\x6b\xc4\x45\x35\x92\xa2\xf3\xb7\xfb\xd0\x78\xd3\xb7\x3c\x39\x5d\x04\xce\x3c\x03\x9f\x19\xde\xdf\x8d\x24\xf8\x79\x8a\x3e\x32\x2d\x7f\x30\xa5\xbc\x1d\x87\xe9\x5f\x4d\x15\xbb\x7f\x21\xc9\x11\xbf\x4e\x95\xc4\xc9\xfa\x4c\x18\x8f\xdc\xfa\x25\xf3\x3f\xba\x37\xbc\xde\xbf\x6f\xef\x09\x05\xed\xd7\x84\x94\xef\x99\x0a\x68\x64\x6a\x5c\x5b\x6d\x95\x05\xea\x8c\x3a\x94\x1b\xf3\x08\x8b\xa8\xc3\x66\x74\xf6\x35\xed\x52\x61\x5e\x8d\xd4\x69\xc8\x25\x23\x44\xd0\x2f\x95\x8a\xcb\x56\x9d\x98\x1d\xbe\x96\x35\x00\x1c\xff\x05\x00\x00\xff\xff\xb3\x69\xb1\x8f\x88\x06\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func compiledVotingAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingAbi,
		"compiled/Voting.abi",
	)
}

func compiledVotingAbi() (*asset, error) {
	bytes, err := compiledVotingAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledVotingBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xdb\x11\xc0\x20\x08\x04\xc0\x96\x2e\x3c\x4e\x28\x07\x41\xfb\x2f\x21\xe3\xec\xef\x12\x8f\xc1\x85\x00\x02\x77\x80\xfa\xe8\x94\x55\xab\x96\x28\x3c\x04\x31\xea\x4b\x3a\x79\x92\xcd\xa0\xdd\x29\xde\x9b\xd1\xdf\x51\xbc\xb8\xd3\x66\x6b\xeb\xa9\x54\x31\x1e\xa7\x9b\x8e\xcc\xb4\xed\x31\x40\xf2\x0f\x00\x00\xff\xff\x56\x21\x80\x23\x6a\x00\x00\x00")

func compiledVotingBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledVotingBinRuntime,
		"compiled/Voting.bin-runtime",
	)
}

func compiledVotingBinRuntime() (*asset, error) {
	bytes, err := compiledVotingBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Voting.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/ERC223Receiver.abi": compiledErc223receiverAbi,
	"compiled/ERC223Receiver.bin-runtime": compiledErc223receiverBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
	"compiled/Voting.abi": compiledVotingAbi,
	"compiled/Voting.bin-runtime": compiledVotingBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"ERC223Receiver.abi": &bintree{compiledErc223receiverAbi, map[string]*bintree{}},
		"ERC223Receiver.bin-runtime": &bintree{compiledErc223receiverBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
		"Voting.abi": &bintree{compiledVotingAbi, map[string]*bintree{}},
		"Voting.bin-runtime": &bintree{compiledVotingBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

